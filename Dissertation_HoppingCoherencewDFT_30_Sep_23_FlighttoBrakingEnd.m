%% SECTION 1 - Load Data Structure

%Want to clear the errors for the new section
lasterror = [];

%Load data structure
load( 'Post-Quals Data/Data Structure/David_DissertationDataStructure_17_Apr_2024.mat');



%Need to create a data structure for use in creating a dialog box stating there are no errors in
%this section, if all code was run
CreateStruct.Interpreter = 'tex';
CreateStruct.Resize = 'on';
CreateStruct.WindowStyle = 'modal';

%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 1',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



 %% SECTION 2 - Create Field Variables


%Want to clear the errors for the new section
lasterror = [];


%First field within data structure = data for quals versus for remainder of dissertation
QualvsPostQualData = {'Post_Quals'};
%Second field = group list
GroupList = {'ATx','Control'}; 
%Third field = participant list
ATxParticipantList = { 'ATx07', 'ATx08', 'ATx10', 'ATx12', 'ATx17', 'ATx18', 'ATx19', 'ATx21', 'ATx24', 'ATx25', 'ATx27', 'ATx34', 'ATx38', 'ATx41', 'ATx44', 'ATx50', 'ATx36', 'ATx49', 'ATx39', 'ATx74' };
ControlParticipantList = { 'HC01', 'HC05', 'HC06', 'HC08', 'HC11', 'HC12', 'HC17', 'HC18', 'HC19', 'HC20', 'HC21', 'HC25', 'HC42', 'HC45', 'HC53', 'HC44', 'HC48', 'HC65' };
%4th field = data type
DataCategories_HoppingGRFandKin = {'HoppingKinematicsKinetics'};
DataCategories_HoppingKinematicsKineticss = {'HoppingKinematicsKinetics'};
DataCategories_IndividualHops = {'IndividualHops'};
%5th field = limb ID
LimbID = {'LeftLimb','RightLimb'};
%MuscleID = HoppingGRFandKin_Trial1.Properties.VariableNames;
RLimb_MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
LLimb_MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};

%Specify sampling rates for GRF, EMG, kinematics/kinetics
GRFSampHz = 1500;
EMGSampHz = 1500;
MoCapSampHz = 300;

%Create vector of participant masses
ATxParticipantMass = [ 69.90, 64.66, 107.47, 84.35, 83.07, 68.80, 84.39, 81.96, 90.30, 79.08, 79.67, 87.51, 58.12, 61.82, 90.18, 80.99, 67.28, 70.30, 71.72, 57.66 ]; 
%ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44,
%ATx50, ATx36
ControlParticipantMass = [ 57.24, 83.50, 61.37, 80.99, 105.01, 61.66, 77.14, 75.66, 79.75, 68.08, 75.28, 65.44, 82.52, 50.40, 60.45, 91.25, 60.39 ];  
%HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC19, HC20, HC21, HC25, HC42, HC45, 'HC53', HC44, HC48

%Create vector containing the names of the downsampled vGRF variables
GRF_IDs = {'VGRF_Downsampled','VGRF_Normalized_Downsampled'};

%Create vector containing the different lower extremity joints
JointID = {'Ankle','Knee','Hip'};

%Create vector for pulling out sagittal plane data rather than frontal or transverse plane
PlaneID = {'Sagittal'};




  %Set vectors containing between-limb difference in tendon thickness for each participant
    %ATx Group - %ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34,
    %ATx38, ATx41, ATx44, ATx50, ATx36, ATx49
ATxMorphology = [ 0.75, 2.41, 1.4, 0.5, 1.57, 3.69, 2.58, 1.21, 1.94, 1.84, 2.84, 1.9, 0.43,  1.4, 3.18, 0.94, 1.09, 0.82  ];
    %Control Group - HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlMorphology = [ 0.55, 0.55, 0.35, 0.55, 0.63, 0.55, 0.55, 0.62, 0.55, 0.55, 0.55, 0.55 ];



%Set vectors containing visual analog scale rating after each hopping bout, for each participant
    %ATx Group
        %Involved Limb
            %Preferred Hz
ATxVAS_Involved_PreferredHz = [ 0, 2, 0, 0, 4, 1, 2.5, 0, 0, 0, 3, 3, 0, 0, 1.5, 0, 0, 0 ];
            %2.0 Hz
ATxVAS_Involved_TwoHz = [ 0, 1, 0, 6.5, 4, 1, 3, 0, 0, 0, 1, 1, 0, 0, 1.5, 0, 0, 0 ];
            %2.3 Hz
ATxVAS_Involved_TwoPoint3Hz = [ 0, 0, 0, 6, 3, 1, 3, 0, 0, 0, 0, 2, 0, 0, 1.5, 0, 0, 0 ];
        %Non-Involved Limb
            %Preferred Hz
ATxVAS_NonInvolved_PreferredHz = [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 ];
            %2.0 Hz
ATxVAS_NonInvolved_TwoHz = [ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 ];
            %2.3 hz
ATxVAS_NonInvolved_TwoPoint3Hz = [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 ];
    %Control Group
ControlVAS = 0;



%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 2',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end




%% SECTION 3 - Perform DFT and Concatenate Data for Coherence Analysis



%Want to clear the errors for the new section
lasterror = [];

RowtoFill_CoactivationRatio_RateMeans = 1;

%Will use these to count how many total hops there are for the ATx group
TotalATxInvolvedHops_PreferredHz = 0;
TotalATxInvolvedHops_TwoHz = 0;
TotalATxInvolvedHops_TwoPoint3Hz = 0;
TotalATxNonInvolvedHops_PreferredHz = 0;
TotalATxNonInvolvedHops_TwoHz = 0;
TotalATxNonInvolvedHops_TwoPoint3Hz = 0;
TotalControlHops_Left_PreferredHz = 0;
TotalControlHops_Left_TwoHz = 0;
TotalControlHops_Left_TwoPoint3Hz = 0;
TotalControlHops_Right_PreferredHz = 0;
TotalControlHops_Right_TwoHz = 0;
TotalControlHops_Right_TwoPoint3Hz = 0;




% Begin J For Loop - Create List of All Groups

for j = 1 : numel(QualvsPostQualData)
    
    ListofAllGroups = getfield(David_DissertationDataStructure, QualvsPostQualData{j} );

%% Begin K For Loop - Create List of All Participants Within A Given Group

    for k = 1 : numel( GroupList )
        
        ListofParticipants_GroupJ = getfield( ListofAllGroups, GroupList{ k } );
        
        %If Group being processed is ATx, set Participant List to contain list of ATx participants.
        %If Group being processed is Controls, set Participant List to contain list of Control
        %participants.
        if strcmp( GroupList{ k }, 'ATx' )
            
            ParticipantList = ATxParticipantList;
            
            ParticipantMass = ATxParticipantMass;

            LimbID = {'InvolvedLimb','NonInvolvedLimb'};

            
        else
            
            ParticipantList = ControlParticipantList;
            
            ParticipantMass = ControlParticipantMass;
            
            LimbID = {'LeftLimb','RightLimb'};

            
        end
        
        
        
        
 %% Begin L For Loop - Create List of Variables within a Given Participant      
        
        for l = 1 : numel(ParticipantList)
            
            
%% Set Limb ID, Hopping Rate ID            
            
            %Visual 3D kinematic variables are named as RAnkle or LAnkle. For the ATx participants,
            %the data structure labels are Involved and NonInvolved. For indexing into the V3D
            %tables, we need to define whether the Involved limb is Right or Left.
            if strcmp( ParticipantList{n}, 'ATx07'  ) || strcmp( ParticipantList{n}, 'ATx08'  ) || strcmp( ParticipantList{n}, 'ATx10'  ) || strcmp( ParticipantList{n}, 'ATx17'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx18'  ) || strcmp( ParticipantList{n}, 'ATx21'  ) || strcmp( ParticipantList{n}, 'ATx25'  ) || strcmp( ParticipantList{n}, 'ATx36'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx38'  ) || strcmp( ParticipantList{n}, 'ATx39'  ) || strcmp( ParticipantList{n}, 'ATx41'  ) || strcmp( ParticipantList{n}, 'ATx49'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx74'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz' };
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ];
                
                
                

            elseif strcmp( ParticipantList{n}, 'ATx12'  ) || strcmp( ParticipantList{n}, 'ATx24'  ) || 
                
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx12 has 2 hopping rates
                HoppingRate_ID = { 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 2, 2.3 ];




            elseif strcmp( ParticipantList{n}, 'ATx19'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 2, 2.3 ];



            elseif strcmp( ParticipantList{n}, 'ATx27'  ) || strcmp( ParticipantList{n}, 'ATx34'  ) || strcmp( ParticipantList{n}, 'ATx44'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx50'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz' };
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ]; 
                
                



            elseif strcmp( ParticipantList{ n }, 'HC11'  )
                
                %Process only the right limb of HC11
                LimbID = { 'LeftLimb', 'RightLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %HC11 has only the 2.0 and 2.3 Hz hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 2, 2.3 ];
                
                



            elseif strcmp( ParticipantList{ n }, 'HC42'  )
                
                %Process only the right limb of HC11
                LimbID = { 'RightLimb', 'LeftLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %HC42 has only the 2.0 and 2.3 Hz hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 2, 2.3 ];
                
                
                

            elseif strcmp( ParticipantList{ n }, 'HC11'  ) ||  strcmp( ParticipantList{ n }, 'HC17'  ) || strcmp( ParticipantList{ n }, 'HC21'  ) ||...
                    strcmp( ParticipantList{ n }, 'HC32'  ) || strcmp( ParticipantList{ n }, 'HC34'  ) || strcmp( ParticipantList{ n }, 'HC45'  ) || strcmp( ParticipantList{ n }, 'HC48'  )
                
                %LimbIDs for ATx participants
                LimbID = {'LeftLimb', 'RightLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx10 has three hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ];


            else
                
                %For this code, will only process the right limb
                LimbID = { 'RightLimb', 'LeftLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb',  };
                
                %HC01 has three hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 0, 2, 2.3 ];
                
                               
            end
            
            
            
            
            
            %Participants HP08 has MoCap sampling Hz of 150 instead of 250
            if strcmp( ParticipantList{ l }, 'HP08' )
                
                MoCapSampHz = 150;
                
            elseif strcmp( ParticipantList{ l }, 'HP02' )
                
                MoCapSampHz = 300;    
                
            else
                
                MoCapSampHz = 250;
                
            end
            
            
            
            
            
            
            ListofDataCategories_ParticipantL = getfield( ListofParticipants_GroupJ, ParticipantList{l} );
            
            ListofVariables_IndividualHops = getfield( ListofDataCategories_ParticipantL, 'IndividualHops' );
            
            ListofVariables_IndexingInParticipantL = getfield( ListofDataCategories_ParticipantL, 'UseforIndexingIntoData' );

            
            
            
            
            
 %% Begin A For Loop - Create List of Variables for A Given Limb            
            
            for a = 1 : numel(LimbID)
            
                ListofVariables_AthLimbEMG_IndividualHops = getfield( ListofVariables_IndividualHops, LimbID{a} );

                
                IndexingWthinLimbA_IndividualHops = getfield( ListofVariables_IndexingInParticipantL, LimbID{a} );
                
                
                
%% Set Muscle IDs for Involved vs Non-Involved Limb                
                
%% Set Muscle IDs for Involved vs Non-Involved Limb                
                
                     %For ATx07, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                    if strcmp( ParticipantList{ l}, 'ATx07'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l}, 'ATx07'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{ l}, 'ATx08'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l}, 'ATx08'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                        
                         
                     %For ATx10, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l}, 'ATx10'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx10 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        

                    %For ATx10, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx10'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx10 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx12'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx12'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                         
                         

                     %For ATx17, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx17'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx17 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                        
                    %For ATx17, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx17'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')
                         
                         %Set the muscle ID list for ATx18 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                         
                         
                         
                     %For ATx18, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx18'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx18 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                        
                    %For ATx18, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx18'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')
                         
                         %Set the muscle ID list for ATx18 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                         
                     
                        
                        
                    
                         
                         
                     %For ATx19, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx19'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                         %Set the muscle ID list for ATx19 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                    %For ATx18, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx19'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx19 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                         
                         
                     %For ATx21, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx21'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                         %Set the muscle ID list for ATx19 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                    %For ATx18, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx21'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx19 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                         

                         
                         
                     %For ATx21, Non-Involved Limb is LeftLimb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx24'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx19 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                        
                    %For ATx18, Involved Limb is Right Limb. Tell the code that the MuscleID should
                    %use 'R' in front of each muscle 
                     elseif strcmp( ParticipantList{ l }, 'ATx24'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                         %Set the muscle ID list for ATx19 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx25'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx25'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx27'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx27'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx34'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx34'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};




                    elseif strcmp( ParticipantList{ l }, 'ATx36'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx36 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx36, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx36'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx36 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};




                    elseif strcmp( ParticipantList{ l }, 'ATx38'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx38 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx38, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx38'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx38 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{n}, 'ATx39'  ) && strcmp( LimbID{r}, 'InvolvedLimb')

                         %Set the muscle ID list for ATx39 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx39, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{n}, 'ATx39'  ) && strcmp( LimbID{r}, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx41'  ) && strcmp( LimbID{a}, 'InvolvedLimb')

                         %Set the muscle ID list for ATx41 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx41, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx41'  ) && strcmp( LimbID{a}, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx44'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx07 involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                     %For ATx07, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx44'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx07 non-involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};



                    elseif strcmp( ParticipantList{n}, 'ATx49'  ) && strcmp( LimbID{r}, 'InvolvedLimb')

                         %Set the muscle ID list for ATx49 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx49, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{n}, 'ATx49'  ) && strcmp( LimbID{r}, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx49 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};



                    elseif strcmp( ParticipantList{ l }, 'ATx50'  ) && strcmp( LimbID{ a }, 'InvolvedLimb')

                         %Set the muscle ID list for ATx50 involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                     %For ATx50, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{ l }, 'ATx50'  ) && strcmp( LimbID{ a }, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx50 non-involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};



                    elseif strcmp( ParticipantList{n}, 'ATx74'  ) && strcmp( LimbID{r}, 'InvolvedLimb')

                         %Set the muscle ID list for ATx74 involved limb
                         MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                         
                     %For ATx74, Non-Involved Limb is Left Limb. Tell the code that the MuscleID
                    %should use 'L' in front of each muscle    
                     elseif strcmp( ParticipantList{n}, 'ATx74'  ) && strcmp( LimbID{r}, 'NonInvolvedLimb')

                        %Set the muscle ID list for ATx74 non-involved limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};
                         
                         
                         
                    %For the Control group, tell the code that the MuscleID should use 'R' in front
                    %of each muscle for the Right Limb
                    elseif strcmp(LimbID{ a },'RightLimb')

                        %Set the muscle ID list for the control group right limb
                        MuscleID = {'RMGas','RLGas','RSol','RPL','RTA'};
                        
                     %For the Control group, tell the code that the MuscleID should use 'L' in front
                    %of each muscle for the Left Limb
                     else

                        %Set the muscle ID list for the control group left limb
                        MuscleID = {'LMGas','LLGas','LSol','LPL','LTA'};

                     %End the if statement for setting the muscle list   
                     end 
                     
                    
                    


                    ListofVariables_AthLimb_QthMuscle_EMG = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{1} );
                    
                    


                    
%% Begin B For Loop - Hopping Rates                    
                    
                    for b = 1 : numel( HoppingRate_ID )
                    
                        %ListofVariables_AthLimb_BthHoppingRate_EMG =  getfield( ListofVariables_AthLimbEMG_IndividualHops, HoppingRate_ID{b} );

                        
                        ListofVariables_QthMuscle_HoppingRateB_EMG = getfield( ListofVariables_AthLimb_QthMuscle_EMG, HoppingRate_ID{b} );

                        
                        
                        IndexingWthinHoppingRateB = getfield( IndexingWthinLimbA_IndividualHops, HoppingRate_ID{b} );
                        

                        %Find the length of the flight phase. There was an error in saving this data
                        %for the first 7 participants. All flight phases should be the same length.
                        %To fix this, find the minimum flight phase length. Then use repmat() to duplicate
                        %this length for the number of hops for this particular hopping rate
                        LengthofFlightPhase = repmat( min( IndexingWthinHoppingRateB.LengthofFlightPhase_NonTruncated_EMGSamplingHz), numel( IndexingWthinHoppingRateB.LengthofFlightPhase_NonTruncated_EMGSamplingHz ), 1);
                        

                        LengthofContactPhase_EMGSamplingHz = IndexingWthinHoppingRateB.LengthofContactPhase_EMGSamplingHz';         


                        LengthofEntireHopCycle_Truncated_EMGSamplingHz = IndexingWthinHoppingRateB.LengthofEntireHopCycle_Truncated_EMGSamplingHz';
                        
                        
                        %Pull out the frame of the minimum L5-S1 marker vertical position - will use
                        %this to split the braking and propulsive phases
                        FrameofMinL5S1Position_EMGSampHz = IndexingWthinHoppingRateB.FrameofMinL5S1Position_EMGSampHz;
                        
                        
                        %Find length of contact phase in terms of MoCap Samp Hz. Need to convert
                        %LengthofContactPhase_EMGSamplingHz to seconds, then to MoCap frames
                        LengthofContactPhase_MoCapData = ( LengthofContactPhase_EMGSamplingHz ./ EMGSampHz ) .* MoCapSampHz;
                        
                        
                        
                        ListofGasMedVariables_LimbA = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{ 1 } );

                        ListofGasLatVariables_LimbA = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{ 2 } );

                        ListofSolVariables_LimbA = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{ 3 } );

                        ListofPLVariables_LimbA = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{ 4 } );


                        if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                            ListofTAVariables_LimbA = getfield( ListofVariables_AthLimbEMG_IndividualHops, MuscleID{ 5 } );

                        end
                        
                        
                        
                        
                            if strcmp( ParticipantList{l}, 'ATx01'  ) && strcmp( HoppingRate_ID{b}, 'TwoHz' )
                                
                                HoppingTrialNumber = {'Trial1'};
                                

                            elseif strcmp( ParticipantList{l}, 'ATx01'  ) && strcmp( HoppingRate_ID{b}, 'TwoPoint3Hz' )
                                
                                HoppingTrialNumber = {'Trial1','Trial2'};
                                
                                
                            else

                                HoppingTrialNumber = {'Trial1'};
                                
                            end

                        
                        
                    
                   
             
                        
%% Begin N For loop - Hopping Trial Number         

                        for n = 1 : numel( HoppingTrialNumber )

                            
                            
                            %Set the time step between data points, in seconds, for integrating the EMG data
                            TimeInterval_forIntegratingEMG = 1./EMGSampHz;



                            

                            
                            
                            
                            ListofGasMedVariables_HoppingRateB = getfield( ListofGasMedVariables_LimbA, HoppingRate_ID{ b } );

                            ListofGasLatVariables_HoppingRateB = getfield( ListofGasLatVariables_LimbA, HoppingRate_ID{ b } );

                            ListofSolVariables_HoppingRateB = getfield( ListofSolVariables_LimbA, HoppingRate_ID{ b } );

                            ListofPLVariables_HoppingRateB = getfield( ListofPLVariables_LimbA, HoppingRate_ID{ b } );


                            if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                ListofTAVariables_HoppingRateB = getfield( ListofTAVariables_LimbA, HoppingRate_ID{ b } );      
                            end

                            
                            


                            %Create a data structure containing the ankle power data for the contact
                            %phase - data structure will contain list of all trials (bouts) of hopping
%                             AnklePower_TrialN = getfield( ListofPower_AthLimb_MthMTU, HoppingTrialNumber{ n } );
                            
                            

                            ListofGasMedVariables_LimbA_TrialN = getfield( ListofGasMedVariables_HoppingRateB, HoppingTrialNumber{ n } );

                            ListofGasLatVariables_LimbA_TrialN = getfield( ListofGasLatVariables_HoppingRateB, HoppingTrialNumber{ n } );

                            ListofSolVariables_LimbA_TrialN = getfield( ListofSolVariables_HoppingRateB, HoppingTrialNumber{ n } );

                            ListofPLVariables_LimbA_TrialN = getfield( ListofPLVariables_HoppingRateB, HoppingTrialNumber{ n } );


                            if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                ListofTAVariables_LimbA_TrialN = getfield( ListofTAVariables_HoppingRateB, HoppingTrialNumber{ n } );

                            end


%% Pull out EMG from Data Structure



                            GasMed_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN = ListofGasMedVariables_LimbA_TrialN.RectifiedEMG_EntireHop_forCoherence;

                            GasLat_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN = ListofGasLatVariables_LimbA_TrialN.RectifiedEMG_EntireHop_forCoherence;

                            Sol_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN = ListofSolVariables_LimbA_TrialN.RectifiedEMG_EntireHop_forCoherence;

                            PL_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN = ListofPLVariables_LimbA_TrialN.RectifiedEMG_EntireHop_forCoherence;


                            if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                TA_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN = ListofTAVariables_LimbA_TrialN.RectifiedEMG_EntireHop_forCoherence;

                            end





                            GasMed_RectifiedEMG_ContactPhase_LimbA_TrialN = ListofGasMedVariables_LimbA_TrialN.RectifiedEMG_ContactPhase_forCoherence;

                            GasLat_RectifiedEMG_ContactPhase_LimbA_TrialN = ListofGasLatVariables_LimbA_TrialN.RectifiedEMG_ContactPhase_forCoherence;

                            Sol_RectifiedEMG_ContactPhase_LimbA_TrialN = ListofSolVariables_LimbA_TrialN.RectifiedEMG_ContactPhase_forCoherence;

                            PL_RectifiedEMG_ContactPhase_LimbA_TrialN = ListofPLVariables_LimbA_TrialN.RectifiedEMG_ContactPhase_forCoherence;


                            if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                TA_RectifiedEMG_ContactPhase_LimbA_TrialN = ListofTAVariables_LimbA_TrialN.RectifiedEMG_ContactPhase_forCoherence;

                            end



                            LengthofAllTrials =  LengthofEntireHopCycle_Truncated_EMGSamplingHz;

                            LengthofContactPhase = LengthofContactPhase_EMGSamplingHz;

                            NumberofHops = size( GasMed_RectifiedEMG_ContactPhase_LimbA_TrialN, 2 );

                            
%% Initialize Variables                    
        
        
                            %Initalize vector to contain outcomes of coherence analysis
                                
                                %Coherence between the gastroc heads - contact phase, braking phase,
                                %propulsion phase
                            CoherenceGastrocs_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            
                            
                                %Coherence between MedGas and Sol - contact phase, braking phase,
                                %propulsion phase
                            CoherenceMedGasvsSol_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            
                            
                                %Coherence between MedGas and PL- contact phase, braking phase,
                                %propulsion phase
                            CoherenceMedGasvsPL_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );             
                            
                                  %Coherence between MedGas and TA- contact phase, braking phase,
                                %propulsion phase
                            CoherenceMedGasvsTA_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                            
                            
                                %Coherence between LatGas and Sol - contact phase, braking phase,
                                %propulsion phase
                            CoherenceLatGasvsSol_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                            
                             
                            
                                %Coherence between LatGas and PL - contact phase, braking phase,
                                %propulsion phase
                            CoherenceLatGasvsPL_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                                
                              
                            
                                %Coherence between LatGas and TA - contact phase, braking phase,
                                %propulsion phase
                            CoherenceLatGasvsTA_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                             
                            
                                %Coherence between Sol and PL - contact phase, braking phase,
                                %propulsion phase
                            CoherenceSolvsPL_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                            
                            
                                %Coherence between Sol and TA - contact phase, braking phase,
                                %propulsion phase
                            CoherenceSolvsTA_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                            
                            
                                %Coherence between PL and TA - contact phase, braking phase,
                                %propulsion phase
                            CoherencePLvsTA_Flight2BrakingEnd_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );
                            CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected = NaN( 95, NumberofHops );                            
                                                                                    
                                                        
                            %Variables for holding LOW gamma band data
                            CoherenceGastrocs_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceGastrocs_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceGastrocs_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            CoherenceMedGasvsSol_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsSol_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsSol_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            CoherenceMedGasvsPL_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsPL_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsPL_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            CoherenceMedGasvsTA_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsTA_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceMedGasvsTA_PropulsionPhase_LowGamma = NaN( 1, 1 );
                                                        
                            CoherenceLatGasvsSol_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsSol_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsSol_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            CoherenceLatGasvsPL_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsPL_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsPL_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            CoherenceLatGasvsTA_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsTA_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceLatGasvsTA_PropulsionPhase_LowGamma = NaN( 1, 1 );
                                                        
                            
                            CoherenceSolvsPL_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceSolvsPL_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceSolvsPL_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            CoherenceSolvsTA_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherenceSolvsTA_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherenceSolvsTA_PropulsionPhase_LowGamma = NaN( 1, 1 );
                                                       
                            CoherencePLvsTA_Flight2BrakingEnd_LowGamma = NaN( 1, 1 );
                            CoherencePLvsTA_BrakingPhase_LowGamma = NaN( 1, 1 );
                            CoherencePLvsTA_PropulsionPhase_LowGamma = NaN( 1, 1 );
                            
                            
                            
                            %Variables for holding HIGH gamma band data
                            CoherenceGastrocs_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceGastrocs_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceGastrocs_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            CoherenceMedGasvsSol_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsSol_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsSol_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            CoherenceMedGasvsPL_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsPL_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsPL_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            CoherenceMedGasvsTA_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsTA_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceMedGasvsTA_PropulsionPhase_HighGamma = NaN( 1, 1 );
                                                        
                            CoherenceLatGasvsSol_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsSol_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsSol_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            CoherenceLatGasvsPL_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsPL_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsPL_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            CoherenceLatGasvsTA_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsTA_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceLatGasvsTA_PropulsionPhase_HighGamma = NaN( 1, 1 );
                                                        
                            
                            CoherenceSolvsPL_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceSolvsPL_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceSolvsPL_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            CoherenceSolvsTA_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherenceSolvsTA_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherenceSolvsTA_PropulsionPhase_HighGamma = NaN( 1, 1 );
                                                       
                            CoherencePLvsTA_Flight2BrakingEnd_HighGamma = NaN( 1, 1 );
                            CoherencePLvsTA_BrakingPhase_HighGamma = NaN( 1, 1 );
                            CoherencePLvsTA_PropulsionPhase_HighGamma = NaN( 1, 1 );
                            
                            
                            
                            
                            %Variables for holding length of power absorption and generation
                            %phases in EMG and MoCap Sampling Rates
                            LengthofBrakingPhase_MoCapSampHz = NaN( NumberofHops, 1 );
                            AnklePower_OthHop_LastFrameofBraking = NaN( NumberofHops, 1 );

                            LengthofBrakingPhase_EMGSampHz = NaN( NumberofHops, 1 );
                            LastFrameofBraking_EMGSampHz = NaN( NumberofHops, 1 );

                            LengthofPropulsionPhase_EMGSampHz = NaN( NumberofHops, 1 );
                            LengthofPropulsionPhase_MoCapSampHz = NaN( NumberofHops, 1 );

                            
                            
                            
                            %Frequencies to use in fourier transform are 30:100
                            HzofInterest = 6:100;

%% Find Total Number of Hops Per Group, Limb, and Rate
                            
                            
                            %When converting coherence Fisher Z values to standard Z-score, we need
                            %to know how many 'segments' there are. Each hop is one segment. Find
                            %the total number of hops for either the ATx group or Control group
                            if strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                
                                TotalATxInvolvedHops_PreferredHz =  TotalATxInvolvedHops_PreferredHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                
                                TotalATxInvolvedHops_TwoHz =  TotalATxInvolvedHops_TwoHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )    
                                
                                TotalATxInvolvedHops_TwoPoint3Hz =  TotalATxInvolvedHops_TwoPoint3Hz + NumberofHops;
                                
                                
                                
                                
                            elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                
                                TotalATxNonInvolvedHops_PreferredHz =  TotalATxNonInvolvedHops_PreferredHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                
                                TotalATxNonInvolvedHops_TwoHz =  TotalATxNonInvolvedHops_TwoHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )        
                                
                                TotalATxNonInvolvedHops_TwoPoint3Hz =  TotalATxNonInvolvedHops_TwoPoint3Hz + NumberofHops;
                                
                                
                                
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'LeftLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                
                                TotalControlHops_Left_PreferredHz =  TotalControlHops_Left_PreferredHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'LeftLimb' ) &&  strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                
                                TotalControlHops_Left_TwoHz =  TotalControlHops_Left_TwoHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'LeftLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )       
                                
                                TotalControlHops_Left_TwoPoint3Hz =  TotalControlHops_Left_TwoPoint3Hz + NumberofHops;
                                
                                
                                
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'RightLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                
                                TotalControlHops_Right_PreferredHz =  TotalControlHops_Right_PreferredHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'RightLimb' ) &&  strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                
                                TotalControlHops_Right_TwoHz =  TotalControlHops_Right_TwoHz + NumberofHops;
                                
                            elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( LimbID{ a }, 'RightLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )       
                                
                                TotalControlHops_Right_TwoPoint3Hz =  TotalControlHops_Right_TwoPoint3Hz + NumberofHops;
                                
                                
                                
                            end
                            

        %% Begin O For Loop - Run Once for Each Hop

                            for o = 1 : NumberofHops

%                                 %Pull out the ankle power data for a single hop
%                                 AnklePower_OthHop = AnklePower_TrialN( 1: LengthofContactPhase_MoCapData(o), o );
%                                 
%                                 %Find all negative values of the power data - these correspond to
%                                 %power absorption
%                                 BrakingPhaseIndices_MoCapSampHz = find( AnklePower_OthHop < 0 );                             
%                                 
%                                 %How many data points are there in the absorption phase?
%                                 LengthofBrakingPhase_MoCapSampHz(o) = numel( BrakingPhaseIndices_MoCapSampHz );
%                                 %Find the last frame of absorption phase
%                                 AnklePower_OthHop_LastFrameofBraking(o) = BrakingPhaseIndices_MoCapSampHz(end);
                                
                                
                                
                                
                                %Create a vector containing all frames of absorption phase
                                BrakingPhaseIndices_EMGSampHz = round( 1 : FrameofMinL5S1Position_EMGSampHz(o) );
                                
                                %Create a vector containing all frames of generation phase
                                PropulsionPhaseIndices_EMGSampHz = round( FrameofMinL5S1Position_EMGSampHz(o) : LengthofContactPhase(o) );
                                
                                
                                
                                %Convert the last frame of absorption phase from MoCap sampling rate
                                %to EMG sampling rate 
                                LengthofBrakingPhase_EMGSampHz(o) = length(BrakingPhaseIndices_EMGSampHz);
                                
                                LastFrameofBraking_EMGSampHz(o) = BrakingPhaseIndices_EMGSampHz(end);
                                
                                %Find the length of the braking phase in MoCap Samp Hz - convert
                                %from EMG samp Hz to MoCap Samp Hz
                                LengthofBrakingPhase_MoCapSampHz(o) = round( ceil( (LengthofBrakingPhase_EMGSampHz(o) ./ EMGSampHz ) .* MoCapSampHz ) );
                                
                                

                                
                                %How many data points are there in the generation phase? In EMG
                                %Sampling Rate
                                LengthofPropulsionPhase_EMGSampHz(o) = numel( PropulsionPhaseIndices_EMGSampHz );
                                
                                %How many data points are there in the generation phase? In MoCap
                                %Sampling Rate
                                LengthofPropulsionPhase_MoCapSampHz(o) = round( ceil( (LengthofPropulsionPhase_EMGSampHz(o) ./ EMGSampHz ) .* MoCapSampHz ) );
                                
                                
                                
                                
                                %Pull out the normalized EMG data for a single hop - this data
                                %corresponds to the entire hop length (both flight and contact
                                %phase)
                                GasMed_OthHop_Flight2BrakingEnd = GasMed_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) )  , o );

                                GasLat_OthHop_Flight2BrakingEnd = GasLat_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) )  , o );

                                Sol_OthHop_Flight2BrakingEnd = Sol_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) )  , o );

                                PL_OthHop_Flight2BrakingEnd = PL_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) )  , o );


                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                    TA_OthHop_Flight2BrakingEnd = TA_RectifiedEMG_EntireHop_forCoherence_LimbA_TrialN( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) )  , o );

                                end

                                %Find length of data, from beginning flight phase to end of braking phase
                                LengthofFlight2BrakingEnd = numel( ( LengthofFlightPhase( o ) + 1 ) : ( LengthofFlightPhase( o ) + 1 + LastFrameofBraking_EMGSampHz(o) ) );

                                
                                %Pull out the normalized EMG data for a single hop - this data
                                %corresponds to only the contact phase
                                GasMed_OthHop_ContactPhase = GasMed_RectifiedEMG_ContactPhase_LimbA_TrialN( 1:LengthofContactPhase(o) , o );

                                GasLat_OthHop_ContactPhase = GasLat_RectifiedEMG_ContactPhase_LimbA_TrialN( 1:LengthofContactPhase(o) , o );

                                Sol_OthHop_ContactPhase = Sol_RectifiedEMG_ContactPhase_LimbA_TrialN( 1:LengthofContactPhase(o) , o );

                                PL_OthHop_ContactPhase = PL_RectifiedEMG_ContactPhase_LimbA_TrialN( 1:LengthofContactPhase(o) , o );


                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                    TA_OthHop_ContactPhase = TA_RectifiedEMG_ContactPhase_LimbA_TrialN( 1:LengthofContactPhase(o) , o );

                                end
                                
                                
                                
                                
                                %Pull out the normalized EMG data for a single hop - this data
                                %corresponds to only the braking phase
                                GasMed_OthHop_BrakingPhase = GasMed_RectifiedEMG_ContactPhase_LimbA_TrialN( round( BrakingPhaseIndices_EMGSampHz ) , o );

                                GasLat_OthHop_BrakingPhase = GasLat_RectifiedEMG_ContactPhase_LimbA_TrialN( round( BrakingPhaseIndices_EMGSampHz ) , o );

                                Sol_OthHop_BrakingPhase = Sol_RectifiedEMG_ContactPhase_LimbA_TrialN( round( BrakingPhaseIndices_EMGSampHz ) , o );

                                PL_OthHop_BrakingPhase = PL_RectifiedEMG_ContactPhase_LimbA_TrialN( round( BrakingPhaseIndices_EMGSampHz ) , o );


                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                    TA_OthHop_BrakingPhase = TA_RectifiedEMG_ContactPhase_LimbA_TrialN( round( BrakingPhaseIndices_EMGSampHz ) , o );      

                                end
                                


                                
                                
                                %Pull out the normalized EMG data for a single hop - this data
                                %corresponds to only the propulsion phase
                                GasMed_OthHop_PropulsionPhase = GasMed_RectifiedEMG_ContactPhase_LimbA_TrialN( PropulsionPhaseIndices_EMGSampHz , o );

                                GasLat_OthHop_PropulsionPhase = GasLat_RectifiedEMG_ContactPhase_LimbA_TrialN( PropulsionPhaseIndices_EMGSampHz , o );

                                Sol_OthHop_PropulsionPhase = Sol_RectifiedEMG_ContactPhase_LimbA_TrialN( PropulsionPhaseIndices_EMGSampHz , o );

                                PL_OthHop_PropulsionPhase = PL_RectifiedEMG_ContactPhase_LimbA_TrialN( PropulsionPhaseIndices_EMGSampHz , o );


                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )

                                    TA_OthHop_PropulsionPhase = TA_RectifiedEMG_ContactPhase_LimbA_TrialN( PropulsionPhaseIndices_EMGSampHz , o );      

                                end

                                
                                
%% Z-Score the EMG data

                                        %Contact phase
                                MedGas_ZScore_Flight2BrakingEnd = zscore( GasMed_OthHop_Flight2BrakingEnd );
                                LatGas_ZScore_Flight2BrakingEnd = zscore( GasLat_OthHop_Flight2BrakingEnd );
                                Sol_ZScore_Flight2BrakingEnd = zscore( Sol_OthHop_Flight2BrakingEnd );
                                PL_ZScore_Flight2BrakingEnd = zscore( PL_OthHop_Flight2BrakingEnd );

                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    TA_ZScore_Flight2BrakingEnd = zscore( TA_OthHop_Flight2BrakingEnd );
                                end
                                
                                        %Braking phase
                                MedGas_ZScore_BrakingPhase = zscore( GasMed_OthHop_BrakingPhase );
                                LatGas_ZScore_BrakingPhase = zscore( GasLat_OthHop_BrakingPhase );
                                Sol_ZScore_BrakingPhase = zscore( Sol_OthHop_BrakingPhase );
                                PL_ZScore_BrakingPhase = zscore( PL_OthHop_BrakingPhase );

                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    TA_ZScore_BrakingPhase = zscore( TA_OthHop_BrakingPhase );
                                end
                                
                                        %Propulsion phase
                                MedGas_ZScore_PropulsionPhase = zscore( GasMed_OthHop_PropulsionPhase );
                                LatGas_ZScore_PropulsionPhase = zscore( GasLat_OthHop_PropulsionPhase );
                                Sol_ZScore_PropulsionPhase = zscore( Sol_OthHop_PropulsionPhase );
                                PL_ZScore_PropulsionPhase = zscore( PL_OthHop_PropulsionPhase );

                                if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    TA_ZScore_PropulsionPhase = zscore( TA_OthHop_PropulsionPhase );
                                end
                                

                                
                                

                                    
                                    
%% Add EMG Data to Vector For ATx, Involved Limb,  Self-Selected Hz

                                %Execute the indented code if we are processing the first hop of self-selected Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the involved limb.
                                if strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                %Execute the indented code if we are processing the self-selected Hz hopping
                                %for all other participants in the ATx group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.   
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                    
                                      %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = [ MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = [ LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = [ Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = [ PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput = [ TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = [ MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = [ LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = [ Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = [ PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput = [ TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];        

                                    end
                                    
                                    
                                end
                                
                                
                                    
                                
 %% Add EMG Data to Vector For ATx, Involved Limb,  2.0 Hz                      
 
                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the involved limb.
                                if strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    end

                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the ATx group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = [ MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = [ LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = [ Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = [ PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput = [ TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];       

                                    end
                                    
                                end
                                
                                
                                    
%% Add EMG Data to Vector For ATx, Involved Limb,  2.33 Hz                                    
                                    

                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the involved limb.
                                if strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;

                                    end
                                        
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        %Save the complex numbers from the DFT 
                                        TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;

                                    end
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the ATx group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];     

                                    end
                                    
                                end
                                
                                    
                                    
%% Add EMG Data to Vector For ATx, Non-Involved Limb, Self-Selected Hz                                    
                                    
                                %Execute the indented code if we are processing the first hop of self-selected Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the NON-involved limb.
                                if strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;

                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = ComplexOutput;   
                                    
                                    
                                %Execute the indented code if we are processing the self-selected Hz hopping
                                %for all other participants in the ATx group OR all other hops of the first participant. The indented vectors
                                %correspond to the NON-involved limb.   
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput = [ TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = [ MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = [ LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = [ Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = [ PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput = [ TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = [ MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = [ LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = [ Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = [ PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput = [ TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, ComplexOutput]; 

                                    end
                                    
                                    
%% Add EMG Data to Vector For ATx, Non-Involved Limb,  2.0 Hz           


                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the NON-involved limb.
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the NON-involved limb.      
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput = [ TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = [ MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = [ LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = [ Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = [ PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput = [ TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput = [ TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, ComplexOutput];   

                                    end
                                    
                                    
  %% Add EMG Data to Vector For ATx, Non-Involved Limb,  2.33 Hz                                             
                                    
                                    
                                %Execute the indented code if we are processing the first hop of the 2.3 Hz hopping
                                %of the first participant in the Control group. The indented vectors
                                %correspond to the NON-involved limb.
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( ParticipantList{ l }, 'ATx07' ) && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = ComplexOutput; 
                                    
                                    
                                %Execute the indented code if we are processing the 2.3 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the NON-involved limb.      
                                elseif strcmp( GroupList{ k }, 'ATx' )  && strcmp( LimbID{ a }, 'NonInvolvedLimb' ) && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput = [ TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput = [ TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, ComplexOutput];

                                    end
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];

                                    if ~strcmp( ParticipantList{ l }, 'ATx08'  )
                                    
                                        %Perform discrete fourier transform on z-scored TA EMG, for
                                        %contact phase. Use a gaussian windoow 200 ms in length
                                        [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                        
                                        %Add the complex numbers from the DFT to the existing complex
                                        %numbers. Each vector is a new column
                                        TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput = [ TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, ComplexOutput];       

                                    end
                                    
                                    
                                    
  %% Add EMG Data to Vector For Control, Left Limb,  Self-Selected Hz                                    
                                    
                                    
                                %Execute the indented code if we are processing the first hop of self-selected Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'PreferredHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    

                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the self-selected Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.   
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = [ PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput = [ TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput = [ MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput = [ LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput = [ Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Left_BrakingPhase_ComplexOutput = [ PL_ControlPreferred_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Left_BrakingPhase_ComplexOutput = [ TA_ControlPreferred_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput = [ MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput = [ LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput = [ Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput = [ PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput = [ TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput, ComplexOutput];                                    
                                    
                                    
                                    
 %% Add EMG Data to Vector For Control, Left Limb,  2.0 Hz                      
 
                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the Control group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = ComplexOutput;                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = [ PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput = [ TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput = [ MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput = [ LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput = [ Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput = [ PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput = [ TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = [ MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = [ LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = [ Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = [ PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput = [ TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, ComplexOutput];                                    
                                    
                                    
                                    
                                    
%% Add EMG Data to Vector For Control, Left Limb,  2.33 Hz                                    
                                    
                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the Control group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = ComplexOutput; 
                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'LeftLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = [ PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput = [ TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = [ MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = [ LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = [ Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = [ PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput = [ TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = [ MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = [ LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = [ Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = [ PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput = [ TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, ComplexOutput];     





  %% Add EMG Data to Vector For Control, Right Limb,  Self-Selected Hz                                    
                                    
                                    
                                %Execute the indented code if we are processing the first hop of self-selected Hz hopping
                                %of the first participant in the ATx group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'PreferredHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    

                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the self-selected Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.   
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'PreferredHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = [ PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput = [ TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput = [ MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput = [ LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput = [ Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Right_BrakingPhase_ComplexOutput = [ PL_ControlPreferred_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Right_BrakingPhase_ComplexOutput = [ TA_ControlPreferred_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput = [ MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput = [ LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput = [ Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput = [ PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput = [ TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput, ComplexOutput];                                    
                                    
                                    
                                    
 %% Add EMG Data to Vector For Control, Right Limb,  2.0 Hz                      
 
                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the Control group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoHz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = ComplexOutput;                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoHz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = [ PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput = [ TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput = [ MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput = [ LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput = [ Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput = [ PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput = [ TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = [ MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = [ LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = [ Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = [ PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput = [ TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, ComplexOutput];                                    
                                    
                                    
                                    
                                    
%% Add EMG Data to Vector For Control, Right Limb,  2.33 Hz                                    
                                    
                                %Execute the indented code if we are processing the first hop of the 2.0 Hz hopping
                                %of the first participant in the Control group. The indented vectors
                                %correspond to the involved limb.
                                elseif strcmp( GroupList{ k }, 'Control' )  && strcmp( ParticipantList{ l }, 'HC01' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' ) && o == 1
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = ComplexOutput;
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = ComplexOutput;
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    %Save the complex numbers from the DFT 
                                    TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = ComplexOutput; 
                                    
                                    
                                    
                                    
                                %Execute the indented code if we are processing the 2.0 Hz hopping
                                %for all other participants in the Control group OR all other hops of the first participant. The indented vectors
                                %correspond to the involved limb.      
                                elseif strcmp( GroupList{ k }, 'Control' ) && strcmp( LimbID{ a }, 'RightLimb' )  && strcmp( HoppingRate_ID{ b },  'TwoPoint3Hz' )
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = [ MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = [ LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = [ Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = [ PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_Flight2BrakingEnd, gausswin( 0.2 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput = [ TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = [ MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = [ LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = [ Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = [ PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_BrakingPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput = [ TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, ComplexOutput];
                                    
                                    
                                    
                                    
                                    
                                    %Perform discrete fourier transform on z-scored MedGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( MedGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = [ MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored LatGas EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( LatGas_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = [ LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    

                                    %Perform discrete fourier transform on z-scored Sol EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( Sol_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = [ Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored PL EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( PL_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = [ PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, ComplexOutput];
                                    
                                    %Perform discrete fourier transform on z-scored TA EMG, for
                                    %contact phase. Use a gaussian windoow 200 ms in length
                                    [ freqs, ComplexOutput ] = Fspec_ComplexNoOutput( TA_ZScore_PropulsionPhase, gausswin( 0.1 * 1500 ), HzofInterest, EMGSampHz );
                                    
                                    %Add the complex numbers from the DFT to the existing complex
                                    %numbers. Each vector is a new column
                                    TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput = [ TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, ComplexOutput];                                        
                                    


                                end
                                
                                
                                
                                
    %% End O for loop - Individual Hops
                            end %End o for loop


                            

                                    
    %% End n for loop - Hopping Bout
                        end %End n for loop

                        
 
                    
%% END B For Loop - Hopping RATE                                
                    end



 
%% End A For Loop - Limb ID                
            end%End A For Loop - Limb ID
    
            
%% End L for loop - Participant ID  
        end%End l for loop
    
        
%% End K for loop - Group ID
    end %End k for loop
    
    
    
    
%% End j for loop    
end %End j for loop


%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 3',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end






%% SECTION 7 - Calculate Coherence - ATx Involved Limb, Self-Selected Hz


 %Create a prompt so we can manually enter the group of interest
ShowPlotsPrompt = [ 'Show Plots for Coherence?' ];

%Use inputdlg function to create a dialogue box for the prompt created above.
%First arg is prompt, 2nd is title
ShowPlots_Cell = inputdlg( [ '\fontsize{15}' ShowPlotsPrompt ], 'Show Plots?', [1 150], {'No'} ,CreateStruct);



 % Calculate Coherence Between Gastrocs  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )

                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                    
                                end

                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                

                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )
                                


                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                

                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - Involved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - Involved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 7',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                


%% SECTION 8 - Calculate Coherence - ATx Involved Limb, 2.0 Hz


 % Calculate Coherence Between Gastrocs  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end                               
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                

                                 %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - Involved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Contact_ATxInvolved_TwoHz_StandardZ = CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Braking_ATxInvolved_TwoHz_StandardZ = CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ = CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - Involved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 8',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                

%% SECTION 9 - Calculate Coherence - ATx Involved Limb, 2.33 Hz


 % Calculate Coherence Between Gastrocs  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                

                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - Involved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group Involved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - Involved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 9',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                

%% SECTION 10 - Calculate Coherence - ATx NonInvolved Limb, Self-Selected Hz


 % Calculate Coherence Between Gastrocs  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                    %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                

                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - NonInvolved Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedPreferred_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedPreferred_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ = CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - NonInvolved Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxNonInvolved_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 10',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                


%% SECTION 11 - Calculate Coherence - ATx NonInvolved Limb, 2.0 Hz


 % Calculate Coherence Between Gastrocs  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                    %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - NonInvolved Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoHz_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ = CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ = CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoHz_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ = CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - NonInvolved Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 11',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                

%% SECTION 12 - Calculate Coherence - ATx NonInvolved Limb, 2.33 Hz


 % Calculate Coherence Between Gastrocs  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                    %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - ATx - NonInvolved Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ATxNonInvolvedTwoPoint3_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, TA_ATxNonInvolvedTwoPoint3_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the ATx group NonInvolved
                                %limb
                                CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ = CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalATxNonInvolvedHops_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz' )
                                    sgtitle( 'PL vs TA Coherence - ATx Group - NonInvolved Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 12',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                





                                
%% SECTION 13 - Calculate Coherence - Control Left Limb, Self-Selected Hz


 % Calculate Coherence Between Gastrocs  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, PL_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, TA_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               

                                end                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, PL_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_BrakingPhase_ComplexOutput, TA_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Left_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput, PL_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_BrakingPhase_ComplexOutput, TA_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Left_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Left Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Left_BrakingPhase_ComplexOutput, TA_ControlPreferred_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Left_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Left Limb - Self-Selected Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Left Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Left_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 13',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                


%% SECTION 14 - Calculate Coherence - Control Left Limb, 2.0 Hz


 % Calculate Coherence Between Gastrocs  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Left Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Left_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Left Limb - 2.0 Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Left Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 14',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end






                                

%% SECTION 15 - Calculate Coherence - Control Left Limb, 2.33 Hz


 % Calculate Coherence Between Gastrocs  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Left Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Left_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Left_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Left_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Left Limb - 2.33 Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Left Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                



%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 15',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end
                                





%% SECTION 13 - Calculate Coherence - Control Right Limb, Self-Selected Hz


 % Calculate Coherence Between Gastrocs  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, PL_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, TA_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               

                                end                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, PL_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_BrakingPhase_ComplexOutput, TA_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlPreferred_Right_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput, PL_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput, PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_BrakingPhase_ComplexOutput, TA_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlPreferred_Right_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Right Limb - Self-Selected Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlPreferred_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Right_BrakingPhase_ComplexOutput, TA_ControlPreferred_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlPreferred_Right_PropulsionPhase_ComplexOutput, TA_ControlPreferred_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_PreferredHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Right Limb - Self-Selected Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Right Limb - Self-Selected Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Right_SelfSelected, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 13',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



                                


%% SECTION 14 - Calculate Coherence - Control Right Limb, 2.0 Hz


 % Calculate Coherence Between Gastrocs  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput, PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Right Limb - 2.0 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoHz_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Right_BrakingPhase_ComplexOutput, TA_ControlTwoHz_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoHz = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoHz_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoHz ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoHz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Right Limb - 2.0 Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Right Limb - 2.0 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoHz, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoHz,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                

                                
                                
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 14',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end






                                

%% SECTION 15 - Calculate Coherence - Control Right Limb, 2.33 Hz


 % Calculate Coherence Between Gastrocs  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Gastrocnemii Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'Gastrocnemii Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Gastrocnemii Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all
                                end
                                

                                


 % Calculate Coherence Between MedGas vs Sol  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs Sol Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs Sol Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between MedGas vs PL  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs PL Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs PL Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between MedGas vs TA  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for MedGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for MedGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( MedGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'MedGas vs TA Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'MedGas vs TA Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'MedGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs Sol  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Gastrocnemii ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Gastrocnemii', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs Sol Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs Sol Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs Sol Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
  % Calculate Coherence Between LatGas vs PL  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs PL Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs PL Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between LatGas vs TA  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for LatGas vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for LatGas vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( LatGas_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'LatGas vs TA Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'LatGas vs TA Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'LatGas vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end

                                
                                
                                
                                
                                
                                
  % Calculate Coherence Between Sol vs PL  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs PL ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs PL', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs PL Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs PL Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs PL Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between Sol vs TA  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for Sol vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for Sol vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( Sol_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'Sol vs TA Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'Sol vs TA Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    set( gca, 'FontSize', 18 )
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'Sol vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                
                                
 % Calculate Coherence Between PL vs TA  - Control - Right Limb - 2.33 Hz
                                
%                                 %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing contact phase coherence for PL vs TA ', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
 
                                %Coherence between the two gastrocs - contact phase. Inputs are
                                %Signal 1, Signal 2, and frequencies of interest
                                CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput,...
                                    TA_ControlTwoPoint3_Right_Flight2BrakingEnd_ComplexOutput, HzofInterest);
       
                                
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ = CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 %processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing braking phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )
                                
                                %Cohere_AlreadyHighpassedandRectifiednce between the two gastrocs - braking phase
                                CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, TA_ControlTwoPoint3_Right_BrakingPhase_ComplexOutput, HzofInterest );
                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ = CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );


                                
                                
                                

%                                  %Create pop-up dialog box telling us the status of the coherence
%                                 % processing
%                                 MSGBox2 = msgbox( { [ '\fontsize{20} Now processing propulsion phase coherence for PL vs TA', ' of ', ParticipantList{ l }, LimbID{a}, HoppingRate_ID{b}, ' Hop' num2str( o )  ]   }  , CreateStruct);
% 
%                                 %Don't execute the next line of code until user responds to dialog box above
%                                 uiwait( MSGBox2 )

                                %Coherence between the two gastrocs - propulsion phase
                                CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 = CohereNoFT_AlreadyHighpassedandRectified_DTOWDissertation( PL_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, TA_ControlTwoPoint3_Right_PropulsionPhase_ComplexOutput, HzofInterest );

                                
                                
                                %Fisher Z Transform so that coherence is now normally distributed
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ = atanh( sqrt( CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3 ) );
                                
                                
                                %Convert Fisher Z into Standard Z Score. Formula is Fisher Z /
                                %square root ( 1 / ( 2 * number of segments ) ). Number of segments
                                %is the number of 'windows' in the signal. In this case, the number
                                %of segments is the total number of hops for the Control group ControlGroup
                                %limb
                                CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ = CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ ./ sqrt( 1/ (2*TotalControlHops_Left_TwoPoint3Hz) );
                                
                                
                                %Only show plots if we tell the code to
                                if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )
                                    
                                    figure('Color','w','Position',[1 1 1154 946], 'Name', 'PL vs TA Coherence - Control Group - Right Limb - 2.33 Hz' )
                                    sgtitle( 'PL vs TA Coherence - Control Group - Right Limb - 2.33 Hz', 'FontSize', 22)

                                    subplot( 3, 2, 1)
                                    plot( HzofInterest, CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 3)
                                    plot( HzofInterest, CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3, 'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 5)
                                    plot( HzofInterest, CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3,  'LineWidth', 2)
                                    hold on
                                    L = line( [ 15, 15 ], [ 0, 1 ] );
                                    L.Color = 'k';
                                    L.LineWidth = 1;
                                    L2 = line( [ 30, 30 ], [ 0, 1 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 60, 60 ], [ 0, 1 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    hold off
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    ylim( [0, 1 ] );
                                    yticks( [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ] );
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence (Max = 1)', 'FontSize', 20)
                                    title( 'PL vs TA Coherence - Propulsion Phase', 'FontSize', 20 )





                                     subplot( 3, 2, 2)
                                    plot( HzofInterest, CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Contact Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 4)
                                    plot( HzofInterest, CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ, 'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Braking Phase', 'FontSize', 20 )

                                    subplot( 3, 2, 6)
                                    plot( HzofInterest, CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ,  'LineWidth', 2)
                                    xlim( [ min( HzofInterest ), max( HzofInterest ) ] )
                                    hold on
                                    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
                                    L.LineStyle = '--';
                                    L.LineWidth = 2;
                                    L.Color = 'k';
                                    L2 = line( [ 15, 15 ], [ 0, 12 ] );
                                    L2.Color = 'k';
                                    L2.LineWidth = 1;
                                    L3 = line( [ 30, 30 ], [ 0, 12 ] );
                                    L3.Color = 'k';
                                    L3.LineWidth = 1;
                                    L4 = line( [ 60, 60 ], [ 0, 12 ] );
                                    L4.Color = 'k';
                                    L4.LineWidth = 1;
                                    hold off
                                    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
                                    set( gca, 'FontSize', 18 )
                                    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
                                    ylabel( 'Coherence Z-Score', 'FontSize', 20)
                                    title( 'PL vs TA Coherence Z-Score - Propulsion Phase', 'FontSize', 20 )



                                    pause

                                    close all                               
                                end
                                
                                
                                
                                



%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 15',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end
                                






                                
%% SECTION 16 - Calculate Change Score Between ATx Limbs


%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_Preferred_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );














%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_Preferred_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_Preferred_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoHz_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );



















%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_Preferred_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoHz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );







%Only show plots if we tell the code to
if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )

    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Gastrocs Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in Gastrocs Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, GastrocsZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, GastrocsZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, GastrocsZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs Sol Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in MedGasvsSol Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs PL Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in MedGasvsPL Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs TA Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in MedGasvsTA Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs Sol Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in LatGasvsSol Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs PL Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in LatGasvsPL Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs TA Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in LatGasvsTA Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs PL Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in SolvsPL Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsPLZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs TA Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in SolvsTA Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in PL vs TA Coherence - Within ATx - Contact Phase' )
    sgtitle( 'Change in PLvsTA Coherence - Within ATx', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, PLvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, PLvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, PLvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all


end


%% SECTION 16 - Calculate Change Score Between Control Limbs

TotalControlHops_Left_PreferredHz

%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_Preferred_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );














%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_Preferred_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_Preferred_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoHz_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );



















%Change score between ATx Involved and NonInvolved Limbs
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_Preferred_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoHz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Right_TwoPoint3Hz ) ) );







%Only show plots if we tell the code to
if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )

    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Gastrocs Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in Gastrocs Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, GastrocsZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, GastrocsZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, GastrocsZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs Sol Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in MedGasvsSol Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs PL Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in MedGasvsPL Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs TA Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in MedGasvsTA Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs Sol Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in LatGasvsSol Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs PL Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in LatGasvsPL Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs TA Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in LatGasvsTA Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs PL Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in SolvsPL Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsPLZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs TA Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in SolvsTA Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in PL vs TA Coherence - Within Control - Contact Phase' )
    sgtitle( 'Change in PLvsTA Coherence - Within Control', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, PLvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, PLvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, PLvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all









    


%% SECTION 16 - Calculate Change Score Between Groups


%Change score between ATx Involved and Control Group
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );









%Change score between ATx Involved and Control Group
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_Preferred_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );









%Change score between ATx Involved and Control Group
        %Self-Selected Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) );




        %2.0 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );




        %2.3 Hz
                %Gastrocs
GastrocsZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );











    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Gastrocs Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in Gastrocs Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, GastrocsZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, GastrocsZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, GastrocsZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs Sol Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in MedGasvsSol Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs PL Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in MedGasvsPL Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs TA Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in MedGasvsTA Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs Sol Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in LatGasvsSol Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs PL Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in LatGasvsPL Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs TA Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in LatGasvsTA Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs PL Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in SolvsPL Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs TA Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in SolvsTA Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in PL vs TA Coherence - ATx Involved vs Control Left Limb Limb - Contact Phase' )
    sgtitle( 'Change in PLvsTA Coherence - ATx Involved vs Control Left Limb Limb', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, PLvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( 'Self-Selected Hz', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, PLvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.0 Hz', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 4 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 4 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 4 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score', 'FontSize', 20)
    title( '2.33 Hz', 'FontSize', 20 )


    pause
    close all
end


%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 16',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end
                                


%% SECTION 16 - Calculate Change Score Between Hopping Rates


%ATx Involved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );









%ATx NonInvolved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Control Group

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking = ( CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );










%ATx Involved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );









%ATx NonInvolved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase = ( CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Control Group

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwo_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase = ( CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );












%ATx Involved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxInvolvedHops_TwoPoint3Hz ) ) );









%ATx NonInvolved Limb

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_PreferredHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoHz ) ) + ( 1 / ( 2 * TotalATxNonInvolvedHops_TwoPoint3Hz ) ) );








%Control Group

%Change score between Preferred and 2.0 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) );





%Change score between Preferred and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_PreferredHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );








%Change score between 2.0 and 2.3 Hz
                %Gastrocs
GastrocsZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsSol
MedGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsPL
MedGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %MedGasvsTA
MedGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsSol
LatGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsPL
LatGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %LatGasvsTA
LatGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsPL
SolvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %SolvsTA
SolvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );

               %PLvsTA
PLvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase = ( CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ' - CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ' ) ./...
    sqrt( ( 1 / ( 2 * TotalControlHops_Left_TwoHz ) ) + ( 1 / ( 2 * TotalControlHops_Left_TwoPoint3Hz ) ) );



%Only show plots if we tell the code to
if strcmp( cell2mat( ShowPlots_Cell), 'Yes' ) || strcmp( cell2mat( ShowPlots_Cell), 'Y' )

    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Gastrocnemii Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in Gastrocnemii Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, GastrocsZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs Sol Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in MedGas vs Sol Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs PL Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in MedGas vs PL Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in MedGas vs TA Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in MedGas vs TA Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, MedGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs Sol Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in LatGas vs Sol Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs PL Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in LatGas vs PL Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in LatGas vs TA Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in LatGas vs TA Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, LatGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs PL Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in Sol vs PL Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in Sol vs TA Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in Sol vs TA Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, SolvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all





    figure('Color','w','Position',[147 129 1241 702], 'Name', 'Change in PL vs TA Coherence - 2.0 vs 2.3 Hz - Contact Phase' )
    sgtitle( 'Change in PL vs TA Coherence - 2.0 vs 2.3 Hz', 'FontSize', 22)

    subplot( 1, 3, 1 )
    plot( HzofInterest, PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 2 )
    plot( HzofInterest, PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'ATx Non-Involved Limb', 'FontSize', 20 )

    subplot( 1, 3, 3 )
    plot( HzofInterest, PLvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, 'Color', '#7E2F8E', 'LineWidth', 2 );
    hold on
    L = line( [ min( HzofInterest ), max( HzofInterest ) ], [ 1.65, 1.65 ] );
    L.LineStyle = '--';
    L.LineWidth = 2;
    L.Color = 'k';
    L2 = line( [ 15, 15 ], [ -6, 6 ] );
    L2.Color = 'k';
    L2.LineWidth = 1;
    L3 = line( [ 30, 30 ], [ -6, 6 ] );
    L3.Color = 'k';
    L3.LineWidth = 1;
    L4 = line( [ 60, 60 ], [ -6, 6 ] );
    L4.Color = 'k';
    L4.LineWidth = 1;
    L5 = line( [ min( HzofInterest ), max( HzofInterest ) ], [ -1.65, -1.65 ] );
    L5.LineStyle = '--';
    L5.LineWidth = 2;
    hold off
    xlim( [ 5, max( HzofInterest ) ] )
    xticks( [ 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ] );
    set( gca, 'FontSize', 18 )
    xlabel( 'Frequency (Hz)', 'FontSize', 20 )
    ylabel( 'Change in Coherence Z-Score [ - = 2 > 2.3 ]', 'FontSize', 20)
    title( 'Control Group - Left Limb Limb', 'FontSize', 20 )


    pause
    close all

end







%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 16',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end




    %% SECTION 16 -  Store Coherence Data in Data Structure - ATx Group, Involved Limb - Self-Selected Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 16',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 17 -  Store Coherence Data in Data Structure - ATx Group, Involved Limb - 2.0 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_TwoHz_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ATxInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ATxInvolved_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 17',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
    %% SECTION 18 -  Store Coherence Data in Data Structure - ATx Group, Involved Limb - 2.3 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'InvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 18',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                


                                


    %% SECTION 19 -  Store Coherence Data in Data Structure - ATx Group, NonInvolved Limb - Self-Selected Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 19',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 20 -  Store Coherence Data in Data Structure - ATx Group, NonInvolved Limb - 2.0 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 20',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 21 -  Store Coherence Data in Data Structure - ATx Group, NonInvolved Limb - 2.3 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'GroupLevelData', 'NonInvolvedLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 21',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 22 -  Store Coherence Data in Data Structure - Control, Left Limb - Self-Selected Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 22',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 23 -  Store Coherence Data in Data Structure - Control, Left Limb - 2.0 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 23',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 24 -  Store Coherence Data in Data Structure - Control, Left Limb - 2.3 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'LeftLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 24',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                




    %% SECTION 22 -  Store Coherence Data in Data Structure - Control, Right Limb - Self-Selected Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 22',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 23 -  Store Coherence Data in Data Structure - Control, Right Limb - 2.0 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoHz); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoHz);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 23',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                                
                                

    %% SECTION 24 -  Store Coherence Data in Data Structure - Control, Right Limb - 2.3 Hz

    
    
% MedGas vs LatGas     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking', CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                            
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_FisherZ', CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_FisherZ);        
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_StandardZ', CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                                    
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_BrakingPhase', CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_FisherZ', CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_StandardZ', CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsLatGas_PropulsionPhase', CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_FisherZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_StandardZ', CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    

                                    
                                    
% MedGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_Flight2EndBraking', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_FisherZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_BrakingPhase', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_FisherZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsSol_PropulsionPhase', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_FisherZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
 
% MedGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_Flight2EndBraking', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_FisherZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_BrakingPhase', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_FisherZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsPL_PropulsionPhase', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_FisherZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% MedGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_Flight2EndBraking', CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_FisherZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_StandardZ', CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_BrakingPhase', CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_FisherZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_StandardZ', CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'MedGasvsTA_PropulsionPhase', CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_FisherZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_StandardZ', CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);                                       
                                    

                                    
                                    
                                    
 
                                    
% LatGas vs Sol     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_Flight2EndBraking', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_FisherZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_BrakingPhase', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_FisherZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsSol_PropulsionPhase', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_FisherZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
 
% LatGas vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_Flight2EndBraking', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_FisherZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_BrakingPhase', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_FisherZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsPL_PropulsionPhase', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_FisherZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                                    
                                    
                                    
% LatGas vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_Flight2EndBraking', CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_FisherZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_StandardZ', CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_BrakingPhase', CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_FisherZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_StandardZ', CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'LatGasvsTA_PropulsionPhase', CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_FisherZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_StandardZ', CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                                                       
                                                                        
                                    
                                    
                                    
                                    
                                    
% Sol vs PL  

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_Flight2EndBraking', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_FisherZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_BrakingPhase', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_FisherZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsPL_PropulsionPhase', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_FisherZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                                    
                                    
                                    
% Sol vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_Flight2EndBraking', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_FisherZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_BrakingPhase', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_FisherZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'SolvsTA_PropulsionPhase', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3); 
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_FisherZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);   
                                                                       
                                    
                                    
                                    
                                    
                            
 % PL vs TA     

                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_Flight2EndBraking', CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_FisherZ', CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_StandardZ', CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ);   
                                    
                            
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_BrakingPhase', CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_FisherZ', CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_StandardZ', CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ);   
                          
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals','Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz', 'PLvsTA_PropulsionPhase', CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3);
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_FisherZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_FisherZ);          
                                    
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'GroupLevelData', 'RightLimb', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_StandardZ', CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ);                                       
                       
                            
                            
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 24',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                    
                                                                    
                            





                                
%% SECTION 25 - Store Change Scores in Data Structure

% Change Score
            %Within ATx
                    %Self-Selected Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinATx_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinATx_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinATx_Preferred_PropulsionPhase);
                                    
                                    
                                    
                    %2.0 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinATx_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinATx_TwoHz_PropulsionPhase);
                                    
                                    
                                    
                                    
                    %2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase);
                                    
                                    
                                    
              %Within Control
                    %Self-Selected Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinControl_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinControl_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinControl_Preferred_PropulsionPhase);
                                    
                                    
                                    
                    %2.0 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinControl_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinControl_TwoHz_PropulsionPhase);
                                    
                                    
                                    
                                    
                    %2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase);
                                    
                                    



                                    
                                    
            %ATx Involved vs Control
                    %Self-Selected Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_BtwnGrp_Preferred_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'PreferredHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase);
                                    
                                    
                                    
                    %2.0 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase);
                                    
                                    
                                    
                                    
                    %2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'BetweenGroupComparison', 'Coherence', 'TwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase);


 %Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 25',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end                                   
                                    



%% SECTION 26 - Store Rate Comparison Data in Data Structure

%ATx Involved
                    %Self-Selected vs Two
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                                    
                                    
                                    
                                    

                    %Self-Selected vs TwoPoint3
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase);          
                                    
                                    
                                    
                                    
                                    
                                    
                                    

                    %2.0 vs 2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'InvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase);         
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
%ATx NonInvolved
                    %Self-Selected vs Two
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase);
                                    
                                    
                                    
                                    
                                    

                    %Self-Selected vs TwoPoint3
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase);          
                                    
                                    
                                    
                                    
                                    
                                    
                                    

                    %2.0 vs 2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'ATx', 'WithinLimbComparison', 'NonInvolvedLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase);                  
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
%Control Group
                    %Self-Selected vs Two
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_Control_PreferredvsTwo_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoHz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase);
                                    
                                    
                                    
                                    
                                    

                    %Self-Selected vs TwoPoint3
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'SelfSelectedvsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase);          
                                    
                                    
                                    
                                    
                                    
                                    
                                    

                    %2.0 vs 2.3 Hz
                        %Gastroc Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_Flight2EndBraking_ZDiff', GastrocsZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_BrakingPhase_ZDiff', GastrocsZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsLatGas_PropulsionPhase_ZDiff', GastrocsZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_Flight2EndBraking_ZDiff', MedGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_BrakingPhase_ZDiff', MedGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsSol_PropulsionPhase_ZDiff', MedGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_Flight2EndBraking_ZDiff', MedGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_BrakingPhase_ZDiff', MedGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsPL_PropulsionPhase_ZDiff', MedGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %MedGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_Flight2EndBraking_ZDiff', MedGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_BrakingPhase_ZDiff', MedGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'MedGasvsTA_PropulsionPhase_ZDiff', MedGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs Sol Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_Flight2EndBraking_ZDiff', LatGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_BrakingPhase_ZDiff', LatGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsSol_PropulsionPhase_ZDiff', LatGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_Flight2EndBraking_ZDiff', LatGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_BrakingPhase_ZDiff', LatGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsPL_PropulsionPhase_ZDiff', LatGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %LatGas vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_Flight2EndBraking_ZDiff', LatGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_BrakingPhase_ZDiff', LatGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'LatGasvsTA_PropulsionPhase_ZDiff', LatGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs PL Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_Flight2EndBraking_ZDiff', SolvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_BrakingPhase_ZDiff', SolvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsPL_PropulsionPhase_ZDiff', SolvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %Sol vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_Flight2EndBraking_ZDiff', SolvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_BrakingPhase_ZDiff', SolvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'SolvsTA_PropulsionPhase_ZDiff', SolvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase);
                                    
                        %PL vs TA Coherence
                            %Contact Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_Flight2EndBraking_ZDiff', PLvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking);
                            %Braking Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_BrakingPhase_ZDiff', PLvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase);
                            %Propulsion Phase
                            David_DissertationDataStructure =...
                                        setfield(David_DissertationDataStructure,'Post_Quals', 'Control', 'WithinLimbComparison', 'LeftLimb', 'Coherence', 'TwovsTwoPoint3Hz',  'PLvsTA_PropulsionPhase_ZDiff', PLvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase);         
                                    
                                    
                                    
                                    
%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 26',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end

                                    
    %% SECTION 26 -  Create Coherence Matrix for Exporting - Frequency Series, Groups Separated
    
    %Create vectors for Group ID (1 = ATx, 2 = Control), Limb ID (1 = Involved or Matched Control, 2 = NonInvolved), Hopping Rate ID (0 = Self-Selected, 2 = 2 Hz, 2.3 = 2.3 Hz, 
    %Phase ID (1 = Contact, 2 = Braking, 3 = Propulsion). These should be the same length as the
    %coherence data
    
    
            %Vectors for ATx, Involved Limb, Contact Phase, Preferred Hz
    ATxInvolvedIDVector_Contact_Preferred = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedLimbIDVector_Contact_Preferred = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedHoppingRateIDVector_Contact_Preferred = zeros( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    Flight2EndBrakingVector_ATxInvolved_Preferred = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    
    %Create matrix of coherence data. Start with ATx, Involved Limb, Contact Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ ATxInvolvedIDVector_Contact_Preferred, ATxInvolvedLimbIDVector_Contact_Preferred, ATxInvolvedHoppingRateIDVector_Contact_Preferred, Flight2EndBrakingVector_ATxInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceGastrocs_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Contact_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Contact_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Contact_ATxInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Contact_ATxInvolved_SelfSelected_StandardZ' ];
    
    
    
    
            %Vectors for ATx, Involved Limb, Braking Phase, Preferred Hz
    ATxInvolvedIDVector_Braking_Preferred = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedLimbIDVector_Braking_Preferred = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedHoppingRateIDVector_Braking_Preferred = zeros( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected' ), 1 );
    BrakingPhaseVector_ATxInvolved_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected' ), 1 );
    
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Braking_Preferred, ATxInvolvedLimbIDVector_Braking_Preferred, ATxInvolvedHoppingRateIDVector_Braking_Preferred, BrakingPhaseVector_ATxInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxInvolved_SelfSelected', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_SelfSelected', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_SelfSelected',...
        CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_SelfSelected', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_SelfSelected', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_SelfSelected',...
        CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_SelfSelected', CoherenceSolvsPL_BrakingPhase_ATxInvolved_SelfSelected', CoherenceSolvsTA_BrakingPhase_ATxInvolved_SelfSelected',...
        CoherencePLvsTA_BrakingPhase_ATxInvolved_SelfSelected',...
        CoherenceGastrocs_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Braking_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Braking_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Braking_ATxInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Braking_ATxInvolved_SelfSelected_StandardZ' ];
    
    
    
    
    
     %Vectors for ATx, Involved Limb, Propulsion Phase, Preferred Hz
    ATxInvolvedIDVector_Propulsion_Preferred = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedLimbIDVector_Propulsion_Preferred = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected' ), 1 );
    ATxInvolvedHoppingRateIDVector_Propulsion_Preferred = zeros( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected' ), 1 );
    PropulsionPhaseVector_ATxInvolved_Preferred = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected' ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Propulsion_Preferred, ATxInvolvedLimbIDVector_Propulsion_Preferred, ATxInvolvedHoppingRateIDVector_Propulsion_Preferred, PropulsionPhaseVector_ATxInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected',...
        CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_SelfSelected',...
        CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_SelfSelected', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_SelfSelected',...
        CoherencePLvsTA_PropulsionPhase_ATxInvolved_SelfSelected',...
        CoherenceGastrocs_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Propulsion_ATxInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxInvolved_SelfSelected_StandardZ' ];
    
    
    
    
    
    
    
    
    
%Vectors for ATx, Involved Limb, Contact Phase, 2 Hz
    ATxInvolvedIDVector_Contact_Two = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedLimbIDVector_Contact_Two = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedHoppingRateIDVector_Contact_Two = repmat( 2, numel( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    Flight2EndBrakingVector_ATxInvolved_Two = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Contact_Two, ATxInvolvedLimbIDVector_Contact_Two, ATxInvolvedHoppingRateIDVector_Contact_Two, Flight2EndBrakingVector_ATxInvolved_Two, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceGastrocs_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Contact_ATxInvolved_TwoHz_StandardZ' ];
    
    
    
    
    %Vectors for ATx, Involved Limb, Braking Phase, 2 Hz
    ATxInvolvedIDVector_Braking_Two = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedLimbIDVector_Braking_Two = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedHoppingRateIDVector_Braking_Two = repmat( 2, numel( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz ), 1 );
    BrakingPhaseVector_ATxInvolved_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Braking_Two, ATxInvolvedLimbIDVector_Braking_Two, ATxInvolvedHoppingRateIDVector_Braking_Two, BrakingPhaseVector_ATxInvolved_Two, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoHz', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoHz', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoHz',... 
        CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoHz', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoHz', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoHz',... 
        CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoHz', CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoHz', CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoHz',... 
        CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoHz',... 
        CoherenceGastrocs_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Braking_ATxInvolved_TwoHz_StandardZ' ];
    
    
    %Vectors for ATx, Involved Limb, Propulsion Phase, 2 Hz
    ATxInvolvedIDVector_Propulsion_Two = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedLimbIDVector_Propulsion_Two = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz ), 1 );
    ATxInvolvedHoppingRateIDVector_Propulsion_Two = repmat( 2, numel( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz ), 1 );
    PropulsionPhaseVector_ATxInvolved_Two = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Two Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Propulsion_Two, ATxInvolvedLimbIDVector_Propulsion_Two, ATxInvolvedHoppingRateIDVector_Propulsion_Two, PropulsionPhaseVector_ATxInvolved_Two, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoHz', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoHz', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoHz',... 
        CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoHz', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoHz', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoHz',... 
        CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoHz', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoHz', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoHz',... 
        CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoHz',... 
        CoherenceGastrocs_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxInvolved_TwoHz_StandardZ' ];
    
    
    
    
    
    
    
    
    
    %Vectors for ATx, Involved Limb, Contact Phase, 2.3 Hz
    ATxInvolvedIDVector_Contact = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedLimbIDVector_Contact = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedHoppingRateIDVector_Contact = repmat( 2.3, numel( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    Flight2EndBrakingVector_ATxInvolved_TwoPoint3 = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Contact, ATxInvolvedLimbIDVector_Contact, ATxInvolvedHoppingRateIDVector_Contact, Flight2EndBrakingVector_ATxInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceGastrocs_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Contact_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Contact_ATxInvolved_TwoPoint3_StandardZ' ];
    
    
    %Vectors for ATx, Involved Limb, Braking Phase, 2.3 Hz
    ATxInvolvedIDVector_Braking = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedLimbIDVector_Braking = ones( length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedHoppingRateIDVector_Braking = repmat( 2.3, numel( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 ), 1 );
    BrakingPhaseVector_ATxInvolved_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3 ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Braking, ATxInvolvedLimbIDVector_Braking, ATxInvolvedHoppingRateIDVector_Braking, BrakingPhaseVector_ATxInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceMedGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceMedGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceLatGasvsSol_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceLatGasvsPL_BrakingPhase_ATxInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceSolvsPL_BrakingPhase_ATxInvolved_TwoPoint3', CoherenceSolvsTA_BrakingPhase_ATxInvolved_TwoPoint3',...
        CoherencePLvsTA_BrakingPhase_ATxInvolved_TwoPoint3',...
        CoherenceGastrocs_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Braking_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Braking_ATxInvolved_TwoPoint3_StandardZ' ];
    
    
    %Vectors for ATx, Involved Limb, Propulsion Phase, 2.3 Hz
    ATxInvolvedIDVector_Propulsion_TwoPoint3 = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedLimbIDVector_Propulsion_TwoPoint3 = ones( length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 ), 1 );
    ATxInvolvedHoppingRateIDVector_Propulsion_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 ), 1 );
    PropulsionPhaseVector_ATxInvolved_TwoPoint3 = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3 ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxInvolvedIDVector_Propulsion_TwoPoint3, ATxInvolvedLimbIDVector_Propulsion_TwoPoint3, ATxInvolvedHoppingRateIDVector_Propulsion_TwoPoint3, PropulsionPhaseVector_ATxInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceMedGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceMedGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceLatGasvsSol_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceLatGasvsPL_PropulsionPhase_ATxInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceSolvsPL_PropulsionPhase_ATxInvolved_TwoPoint3', CoherenceSolvsTA_PropulsionPhase_ATxInvolved_TwoPoint3',...
        CoherencePLvsTA_PropulsionPhase_ATxInvolved_TwoPoint3',...
        CoherenceGastrocs_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Propulsion_ATxInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxInvolved_TwoPoint3_StandardZ' ];
    
    
    
    
    
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Contact Phase, Preferred Hz
        ATxNonInvolvedIDVector_Contact_Preferred = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedLimbIDVector_Contact_Preferred = repmat(2, length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Contact_Preferred = zeros( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
        Flight2EndBrakingVector_ATxNonInvolved_Preferred = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected' ), 1 );
        
        %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Contact_Preferred, ATxNonInvolvedLimbIDVector_Contact_Preferred, ATxNonInvolvedHoppingRateIDVector_Contact_Preferred, Flight2EndBrakingVector_ATxNonInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_SelfSelected', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_SelfSelected',...
        CoherenceGastrocs_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Contact_ATxNonInvolved_SelfSelected_StandardZ' ];
    
    
    
    
        
        
    
    %Vectors for ATx, NonInvolved Limb, Braking Phase, Preferred Hz
    ATxNonInvolvedIDVector_Braking_Preferred = ones( length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedLimbIDVector_Braking_Preferred = repmat(2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Braking_Preferred = zeros( length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected' ), 1 );
    BrakingPhaseVector_ATxNonInvolved_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected' ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, Self-Selected Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Braking_Preferred, ATxNonInvolvedLimbIDVector_Braking_Preferred, ATxNonInvolvedHoppingRateIDVector_Braking_Preferred, BrakingPhaseVector_ATxNonInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected',...
        CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_SelfSelected',...
        CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_SelfSelected', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_SelfSelected',...
        CoherencePLvsTA_BrakingPhase_ATxNonInvolved_SelfSelected',...
        CoherenceGastrocs_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Braking_ATxNonInvolved_SelfSelected_StandardZ' ];
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Propulsion Phase, Preferred Hz
    ATxNonInvolvedIDVector_Propulsion_Preferred = ones( length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedLimbIDVector_Propulsion_Preferred = repmat(2, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected' ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Propulsion_Preferred = zeros( length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected' ), 1 );
    PropulsionPhaseVector_ATxNonInvolved_Preferred = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected' ), 1 );    
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Propulsion_Preferred, ATxNonInvolvedLimbIDVector_Propulsion_Preferred, ATxNonInvolvedHoppingRateIDVector_Propulsion_Preferred, PropulsionPhaseVector_ATxNonInvolved_Preferred, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected',...
        CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected',...
        CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_SelfSelected', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected',...
        CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_SelfSelected',...
        CoherenceGastrocs_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_SelfSelected_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxNonInvolved_SelfSelected_StandardZ' ];
    
    
    
    
    
    
    
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Contact Phase, 2 Hz
    ATxNonInvolvedIDVector_Contact_Two = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    ATxNonInvolvedLimbIDVector_Contact_Two = repmat(2, length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Contact_Two = repmat( 2, numel( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    Flight2EndBrakingVector_ATxNonInvolved_Two = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Contact_Two, ATxNonInvolvedLimbIDVector_Contact_Two, ATxNonInvolvedHoppingRateIDVector_Contact_Two, Flight2EndBrakingVector_ATxNonInvolved_Two, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoHz', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoHz',... 
        CoherenceGastrocs_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Contact_ATxNonInvolved_TwoHz_StandardZ' ];
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Braking Phase, 2 Hz
    ATxNonInvolvedIDVector_Braking_Two = ones( length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz ), 1 );
    ATxNonInvolvedLimbIDVector_Braking_Two = repmat(2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Braking_Two = repmat( 2, numel( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz ), 1 );
    BrakingPhaseVector_ATxNonInvolved_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Braking_Two, ATxNonInvolvedLimbIDVector_Braking_Two, ATxNonInvolvedHoppingRateIDVector_Braking_Two, BrakingPhaseVector_ATxNonInvolved_Two, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz',... 
        CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoHz',... 
        CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoHz', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoHz',... 
        CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoHz',... 
        CoherenceGastrocs_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Braking_ATxNonInvolved_TwoHz_StandardZ' ];
    
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Propulsion Phase, 2 Hz
    ATxNonInvolvedIDVector_Propulsion_Two = ones( length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz ), 1 );
    ATxNonInvolvedLimbIDVector_Propulsion_Two = repmat(2, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Propulsion_Two =repmat( 2, numel( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz ), 1 );
    PropulsionPhaseVector_ATxNonInvolved_Two = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Two Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Propulsion_Two, ATxNonInvolvedLimbIDVector_Propulsion_Two, ATxNonInvolvedHoppingRateIDVector_Propulsion_Two, PropulsionPhaseVector_ATxNonInvolved_Two, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz',... 
        CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoHz',... 
        CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoHz', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoHz',... 
        CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoHz',... 
        CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoHz_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoHz_StandardZ' ];
    
    
    
    
    
    
    
    %Vectors for ATx, NonInvolved Limb, Contact Phase, 2.3 Hz
    ATxNonInvolvedIDVector_Contact_TwoPoint3 = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedLimbIDVector_Contact_TwoPoint3 = repmat(2, length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Contact_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
     Flight2EndBrakingVector_ATxNonInvolved_TwoPoint3 = ones( length( CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3 ), 1 );
     
     %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Contact_TwoPoint3, ATxNonInvolvedLimbIDVector_Contact_TwoPoint3, ATxNonInvolvedHoppingRateIDVector_Contact_TwoPoint3, Flight2EndBrakingVector_ATxNonInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceMedGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceMedGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceLatGasvsSol_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceLatGasvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceSolvsPL_Fligh2EndBraking_ATxInvolved_TwoPoint3', CoherenceSolvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherencePLvsTA_Fligh2EndBraking_ATxInvolved_TwoPoint3',...
        CoherenceGastrocs_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Contact_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Contact_ATxNonInvolved_TwoPoint3_StandardZ' ];
    
    
    
    
    
      %Vectors for ATx, NonInvolved Limb, Braking Phase, 2.3 Hz
    ATxNonInvolvedIDVector_Braking_TwoPoint3 = ones( length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedLimbIDVector_Braking_TwoPoint3 = repmat(2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Braking_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    BrakingPhaseVector_ATxNonInvolved_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Braking_TwoPoint3, ATxNonInvolvedLimbIDVector_Braking_TwoPoint3, ATxNonInvolvedHoppingRateIDVector_Braking_TwoPoint3, BrakingPhaseVector_ATxNonInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceMedGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceMedGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceLatGasvsSol_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceLatGasvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceSolvsPL_BrakingPhase_ATxNonInvolved_TwoPoint3', CoherenceSolvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3',...
        CoherencePLvsTA_BrakingPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceGastrocs_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Braking_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Braking_ATxNonInvolved_TwoPoint3_StandardZ' ];
    
    
    
    
    
    
    
    
     %Vectors for ATx, NonInvolved Limb, Propulsion Phase, 2.3 Hz
    ATxNonInvolvedIDVector_Propulsion_TwoPoint3 = ones( length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedLimbIDVector_Propulsion_TwoPoint3 = repmat(2, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    ATxNonInvolvedHoppingRateIDVector_Propulsion_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    PropulsionPhaseVector_ATxNonInvolved_TwoPoint3 = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3 ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Two Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ATxNonInvolvedIDVector_Propulsion_TwoPoint3, ATxNonInvolvedLimbIDVector_Propulsion_TwoPoint3, ATxNonInvolvedHoppingRateIDVector_Propulsion_TwoPoint3, PropulsionPhaseVector_ATxNonInvolved_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceMedGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceMedGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceMedGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceLatGasvsSol_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceLatGasvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceLatGasvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceSolvsPL_PropulsionPhase_ATxNonInvolved_TwoPoint3', CoherenceSolvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3',...
        CoherencePLvsTA_PropulsionPhase_ATxNonInvolved_TwoPoint3',...
        CoherenceGastrocs_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsPL_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ', CoherenceSolvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Propulsion_ATxNonInvolved_TwoPoint3_StandardZ' ];
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, Preferred Hz
    ControlGroupIDVector_Contact_Preferred = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected' ), 1 );
    ControlLimbIDVector_Contact_Left_Preferred = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected' ), 1 );
    HoppingRateIDVector_Contact_Preferred = zeros( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected' ), 1 );
    Flight2EndBrakingVector_ControlGroup_Preferred = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected' ), 1 );
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_Preferred, ControlLimbIDVector_Contact_Left_Preferred, HoppingRateIDVector_Contact_Preferred, Flight2EndBrakingVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected',...
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected',...
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_SelfSelected', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected',...
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_SelfSelected',...
        CoherenceGastrocs_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherencePLvsTA_Contact_ControlGroup_Left_SelfSelected_StandardZ' ];
    
     %Vectors for Control group, Braking Phase, Preferred Hz
    ControlGroupIDVector_Braking_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected' ), 1 );
    ControlLimbIDVector_Braking_Left_Preferred = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected' ), 1 );
    HoppingRateIDVector_Braking_Preferred = zeros( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected' ), 1 );
    BrakingPhaseVector_ControlGroup_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected' ), 1 );
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_Preferred, ControlLimbIDVector_Braking_Left_Preferred, HoppingRateIDVector_Braking_Preferred, BrakingPhaseVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected',...
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_SelfSelected',...
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_SelfSelected', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_SelfSelected',...
        CoherencePLvsTA_BrakingPhase_ControlGroup_Left_SelfSelected',...
        CoherenceGastrocs_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherencePLvsTA_Braking_ControlGroup_Left_SelfSelected_StandardZ' ];
    
    %Vectors for Control group, Propulsion Phase, Preferred Hz
    ControlGroupIDVector_Propulsion_Preferred = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected' ), 1 );
    ControlLimbIDVector_Propulsion_Left_Preferred = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected' ), 1 );
    HoppingRateIDVector_Propulsion_Preferred = zeros( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected' ), 1  );
    PropulsionPhaseVector_ControlGroup_Preferred = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected' ), 1 );    
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_Preferred, ControlLimbIDVector_Propulsion_Left_Preferred, HoppingRateIDVector_Propulsion_Preferred, PropulsionPhaseVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected',...
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected',...
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_SelfSelected', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected',...
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_SelfSelected',...
        CoherenceGastrocs_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_SelfSelected_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ',...
        CoherencePLvsTA_Propulsion_ControlGroup_Left_SelfSelected_StandardZ' ];
    
    
    
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, 2 Hz
    ControlGroupIDVector_Contact_Two = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz ), 1 );
    ControlLimbIDVector_Contact_Left_Two = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz ), 1 );
    HoppingRateIDVector_Contact_Two = repmat( 2, numel( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz ), 1 );
    Flight2EndBrakingVector_ControlGroup_Two = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_Two, ControlLimbIDVector_Contact_Left_Two, HoppingRateIDVector_Contact_Two, Flight2EndBrakingVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz',... 
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz',... 
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoHz', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz',... 
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoHz',... 
    CoherenceGastrocs_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ',...
    CoherencePLvsTA_Contact_ControlGroup_Left_TwoHz_StandardZ' ];
    

    %Vectors for Control Group, Braking Phase, 2 Hz
    ControlGroupIDVector_Braking_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz ), 1 );
    ControlLimbIDVector_Braking_Left_Two = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz ), 1 );
    HoppingRateIDVector_Braking_Two = repmat( 2, numel( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz ), 1 );
    BrakingPhaseVector_ControlGroup_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_Two, ControlLimbIDVector_Braking_Left_Two, HoppingRateIDVector_Braking_Two, BrakingPhaseVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz',... 
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoHz',... 
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoHz', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoHz',... 
        CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoHz',... 
    CoherenceGastrocs_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ',...
    CoherencePLvsTA_Braking_ControlGroup_Left_TwoHz_StandardZ' ];
    
    %Vectors for Control Group, Propulsion Phase, 2 Hz
    ControlGroupIDVector_Propulsion_Two = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz ), 1 );
    ControlLimbIDVector_Propulsion_Left_Two = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz ), 1 );
    HoppingRateIDVector_Propulsion_Two =repmat( 2, numel( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz ), 1 );
    PropulsionPhaseVector_ControlGroup_Two = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_Two, ControlLimbIDVector_Propulsion_Left_Two, HoppingRateIDVector_Propulsion_Two, PropulsionPhaseVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz',... 
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoHz',... 
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoHz', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoHz',... 
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoHz',... 
    CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoHz_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ',...
    CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoHz_StandardZ' ];
    
    
    
    
    
    
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, 2.3 Hz
    ControlGroupIDVector_Contact_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ), 1 );
    ControlLimbIDVector_Contact_Left_TwoPoint3 = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ), 1 );
    HoppingRateIDVector_Contact_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ), 1 );
     Flight2EndBrakingVector_ControlGroup_Left_TwoPoint3 = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3 ), 1 );
     
     
     
     %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_TwoPoint3, ControlLimbIDVector_Contact_Left_TwoPoint3, HoppingRateIDVector_Contact_TwoPoint3, Flight2EndBrakingVector_ControlGroup_Left_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3',...
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3',...
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Left_TwoPoint3', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3',...
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Left_TwoPoint3',...
    CoherenceGastrocs_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherenceMedGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherenceLatGasvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherencePLvsTA_Contact_ControlGroup_Left_TwoPoint3_StandardZ' ];
    
    
    
     %Vectors for Control group, Braking Phase, 2.3 Hz
    ControlGroupIDVector_Braking_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    ControlLimbIDVector_Braking_Left_TwoPoint3 = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    HoppingRateIDVector_Braking_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    BrakingPhaseVector_ControlGroup_Left_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    
         %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_TwoPoint3, ControlLimbIDVector_Braking_Left_TwoPoint3, HoppingRateIDVector_Braking_TwoPoint3, BrakingPhaseVector_ControlGroup_Left_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3',...
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3',...
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceSolvsPL_BrakingPhase_ControlGroup_Left_TwoPoint3', CoherenceSolvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3',...
        CoherencePLvsTA_BrakingPhase_ControlGroup_Left_TwoPoint3',...
    CoherenceGastrocs_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherenceMedGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherenceLatGasvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ',...
    CoherencePLvsTA_Braking_ControlGroup_Left_TwoPoint3_StandardZ' ];
    
    
    


    %Vectors for Control group, Propulsion Phase, 2.3 Hz
    ControlGroupIDVector_Propulsion_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    ControlLimbIDVector_Propulsion_Left_TwoPoint3 = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    HoppingRateIDVector_Propulsion_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    PropulsionPhaseVector_ControlGroup_Left_TwoPoint3 = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3 ), 1 );
    
         %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_TwoPoint3, ControlLimbIDVector_Propulsion_Left_TwoPoint3, HoppingRateIDVector_Propulsion_TwoPoint3, PropulsionPhaseVector_ControlGroup_Left_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3',...
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3',...
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Left_TwoPoint3', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3',...
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Left_TwoPoint3',...
        CoherenceGastrocs_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Propulsion_ControlGroup_Left_TwoPoint3_StandardZ' ];
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, Preferred Hz
    ControlGroupIDVector_Contact_Preferred = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected' ), 1 );
    ControlLimbIDVector_Contact_Right_Preferred = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected' ), 2 );
    HoppingRateIDVector_Contact_Preferred = zeros( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected' ), 1 );
    Flight2EndBrakingVector_ControlGroup_Preferred = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected' ), 1 );
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_Preferred, ControlLimbIDVector_Contact_Right_Preferred, HoppingRateIDVector_Contact_Preferred, Flight2EndBrakingVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected',...
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected',...
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_SelfSelected', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected',...
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_SelfSelected',...
        CoherenceGastrocs_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherencePLvsTA_Contact_ControlGroup_Right_SelfSelected_StandardZ' ];
    
     %Vectors for Control group, Braking Phase, Preferred Hz
    ControlGroupIDVector_Braking_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected' ), 1 );
    ControlLimbIDVector_Braking_Right_Preferred = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected' ), 2 );
    HoppingRateIDVector_Braking_Preferred = zeros( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected' ), 1 );
    BrakingPhaseVector_ControlGroup_Preferred = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected' ), 1 );
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_Preferred, ControlLimbIDVector_Braking_Right_Preferred, HoppingRateIDVector_Braking_Preferred, BrakingPhaseVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected',...
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_SelfSelected',...
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_SelfSelected', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_SelfSelected',...
        CoherencePLvsTA_BrakingPhase_ControlGroup_Right_SelfSelected',...
        CoherenceGastrocs_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherencePLvsTA_Braking_ControlGroup_Right_SelfSelected_StandardZ' ];
    
    %Vectors for Control group, Propulsion Phase, Preferred Hz
    ControlGroupIDVector_Propulsion_Preferred = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected' ), 1 );
    ControlLimbIDVector_Propulsion_Right_Preferred = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected' ), 2 );
    HoppingRateIDVector_Propulsion_Preferred = zeros( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected' ), 1  );
    PropulsionPhaseVector_ControlGroup_Preferred = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected' ), 1 );    
    
        %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, Preferred Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_Preferred, ControlLimbIDVector_Propulsion_Right_Preferred, HoppingRateIDVector_Propulsion_Preferred, PropulsionPhaseVector_ControlGroup_Preferred, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected',...
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected',...
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_SelfSelected', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected',...
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_SelfSelected',...
        CoherenceGastrocs_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_SelfSelected_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ',...
        CoherencePLvsTA_Propulsion_ControlGroup_Right_SelfSelected_StandardZ' ];
    
    
    
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, 2 Hz
    ControlGroupIDVector_Contact_Two = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz ), 1 );
    ControlLimbIDVector_Contact_Right_Two = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz ), 2 );
    HoppingRateIDVector_Contact_Two = repmat( 2, numel( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz ), 1 );
    Flight2EndBrakingVector_ControlGroup_Two = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_Two, ControlLimbIDVector_Contact_Right_Two, HoppingRateIDVector_Contact_Two, Flight2EndBrakingVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz',... 
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz',... 
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoHz', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz',... 
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoHz',... 
    CoherenceGastrocs_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ',...
    CoherencePLvsTA_Contact_ControlGroup_Right_TwoHz_StandardZ' ];
    

    %Vectors for Control Group, Braking Phase, 2 Hz
    ControlGroupIDVector_Braking_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz ), 1 );
    ControlLimbIDVector_Braking_Right_Two = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz ), 2 );
    HoppingRateIDVector_Braking_Two = repmat( 2, numel( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz ), 1 );
    BrakingPhaseVector_ControlGroup_Two = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_Two, ControlLimbIDVector_Braking_Right_Two, HoppingRateIDVector_Braking_Two, BrakingPhaseVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz',... 
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoHz',... 
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoHz', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoHz',... 
        CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoHz',... 
    CoherenceGastrocs_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ',...
    CoherencePLvsTA_Braking_ControlGroup_Right_TwoHz_StandardZ' ];
    
    %Vectors for Control Group, Propulsion Phase, 2 Hz
    ControlGroupIDVector_Propulsion_Two = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz ), 1 );
    ControlLimbIDVector_Propulsion_Right_Two = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz ), 2 );
    HoppingRateIDVector_Propulsion_Two =repmat( 2, numel( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz ), 1 );
    PropulsionPhaseVector_ControlGroup_Two = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz ), 1 );
    
    %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, 2 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_Two, ControlLimbIDVector_Propulsion_Right_Two, HoppingRateIDVector_Propulsion_Two, PropulsionPhaseVector_ControlGroup_Two, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz',... 
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoHz',... 
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoHz', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoHz',... 
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoHz',... 
    CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ',...
    CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoHz_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ',...
    CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoHz_StandardZ' ];
    
    
    
    
    
    
    
    
    
    
    
    
    
    %Vectors for Control group, Contact Phase, 2.3 Hz
    ControlGroupIDVector_Contact_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ), 1 );
    ControlLimbIDVector_Contact_Right_TwoPoint3 = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ), 2 );
    HoppingRateIDVector_Contact_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ), 1 );
     Flight2EndBrakingVector_ControlGroup_Right_TwoPoint3 = ones( length( CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3 ), 1 );
     
     
     
     %Add on to the matrix of coherence data. ATx, Involved Limb, Contact Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Contact_TwoPoint3, ControlLimbIDVector_Contact_Right_TwoPoint3, HoppingRateIDVector_Contact_TwoPoint3, Flight2EndBrakingVector_ControlGroup_Right_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3',...
        CoherenceMedGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsSol_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3',...
        CoherenceLatGasvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceSolvsPL_Flight2EndBraking_ControlGroup_Right_TwoPoint3', CoherenceSolvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3',...
        CoherencePLvsTA_Flight2EndBraking_ControlGroup_Right_TwoPoint3',...
    CoherenceGastrocs_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherenceMedGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherenceLatGasvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsPL_Contact_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherencePLvsTA_Contact_ControlGroup_Right_TwoPoint3_StandardZ' ];
    
    
    
     %Vectors for Control group, Braking Phase, 2.3 Hz
    ControlGroupIDVector_Braking_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    ControlLimbIDVector_Braking_Right_TwoPoint3 = ones( length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 ), 2 );
    HoppingRateIDVector_Braking_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    BrakingPhaseVector_ControlGroup_Right_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    
         %Add on to the matrix of coherence data. ATx, Involved Limb, Braking Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Braking_TwoPoint3, ControlLimbIDVector_Braking_Right_TwoPoint3, HoppingRateIDVector_Braking_TwoPoint3, BrakingPhaseVector_ControlGroup_Right_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3',...
        CoherenceMedGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsSol_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3',...
        CoherenceLatGasvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceSolvsPL_BrakingPhase_ControlGroup_Right_TwoPoint3', CoherenceSolvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3',...
        CoherencePLvsTA_BrakingPhase_ControlGroup_Right_TwoPoint3',...
    CoherenceGastrocs_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherenceMedGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherenceLatGasvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsPL_Braking_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ',...
    CoherencePLvsTA_Braking_ControlGroup_Right_TwoPoint3_StandardZ' ];
    
    
    


    %Vectors for Control group, Propulsion Phase, 2.3 Hz
    ControlGroupIDVector_Propulsion_TwoPoint3 = repmat( 2, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    ControlLimbIDVector_Propulsion_Right_TwoPoint3 = ones( length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 ), 2 );
    HoppingRateIDVector_Propulsion_TwoPoint3 = repmat( 2.3, numel( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    PropulsionPhaseVector_ControlGroup_Right_TwoPoint3 = repmat( 3, length( CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3 ), 1 );
    
         %Add on to the matrix of coherence data. ATx, Involved Limb, Propulsion Phase, 2.3 Hz.
    %First 4 columns are the categorical variables created above.
    CoherenceData_FrequencySeries = [ CoherenceData_FrequencySeries; ControlGroupIDVector_Propulsion_TwoPoint3, ControlLimbIDVector_Propulsion_Right_TwoPoint3, HoppingRateIDVector_Propulsion_TwoPoint3, PropulsionPhaseVector_ControlGroup_Right_TwoPoint3, HzofInterest',...
        CoherenceGastrocs_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceMedGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3',...
        CoherenceMedGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsSol_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceLatGasvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3',...
        CoherenceLatGasvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceSolvsPL_PropulsionPhase_ControlGroup_Right_TwoPoint3', CoherenceSolvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3',...
        CoherencePLvsTA_PropulsionPhase_ControlGroup_Right_TwoPoint3',...
        CoherenceGastrocs_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceMedGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ',...
        CoherenceMedGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsSol_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceLatGasvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ',...
        CoherenceLatGasvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsPL_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ', CoherenceSolvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ',...
        CoherencePLvsTA_Propulsion_ControlGroup_Right_TwoPoint3_StandardZ' ];

    
    

    %Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 25',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



%% SECTION 27 - Create Matrix for Holding Change Score Data

%Create a matrix holding the change in coherence scores.

    %Start with self-selected hopping rate for ATx Involved vs NonInvolved comparison

        %Also start with contact phase
    
%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Create the matrix
ChangeScoreMatrix = [ ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_Preferred_Flight2EndBraking, MedGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking, MedGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, LatGasvsSolZDiff_WithinATx_Preferred_Flight2EndBraking, LatGasvsPLZDiff_WithinATx_Preferred_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinATx_Preferred_Flight2EndBraking, SolvsPLZDiff_WithinATx_Preferred_Flight2EndBraking, SolvsTAZDiff_WithinATx_Preferred_Flight2EndBraking,...
    PLvsTAZDiff_WithinATx_Preferred_Flight2EndBraking];

        %Add data for braking phase

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_Preferred_BrakingPhase, MedGasvsSolZDiff_WithinATx_Preferred_BrakingPhase, MedGasvsPLZDiff_WithinATx_Preferred_BrakingPhase,...
    MedGasvsTAZDiff_WithinATx_Preferred_BrakingPhase, LatGasvsSolZDiff_WithinATx_Preferred_BrakingPhase, LatGasvsPLZDiff_WithinATx_Preferred_BrakingPhase,...
    LatGasvsTAZDiff_WithinATx_Preferred_BrakingPhase, SolvsPLZDiff_WithinATx_Preferred_BrakingPhase, SolvsTAZDiff_WithinATx_Preferred_BrakingPhase,...
    PLvsTAZDiff_WithinATx_Preferred_BrakingPhase ];

        %Add data for propulsion phase

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_Preferred_PropulsionPhase, MedGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase, MedGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase,...
    MedGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase, LatGasvsSolZDiff_WithinATx_Preferred_PropulsionPhase, LatGasvsPLZDiff_WithinATx_Preferred_PropulsionPhase,...
    LatGasvsTAZDiff_WithinATx_Preferred_PropulsionPhase, SolvsPLZDiff_WithinATx_Preferred_PropulsionPhase, SolvsTAZDiff_WithinATx_Preferred_PropulsionPhase,...
    PLvsTAZDiff_WithinATx_Preferred_PropulsionPhase];







%Add 2 Hz hopping data for ATx Involved vs NonInvolved comparison

    %Contact phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoHz_Flight2EndBraking, MedGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking, MedGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, LatGasvsSolZDiff_WithinATx_TwoHz_Flight2EndBraking, LatGasvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking, SolvsPLZDiff_WithinATx_TwoHz_Flight2EndBraking, SolvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking,...
    PLvsTAZDiff_WithinATx_TwoHz_Flight2EndBraking];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoHz_BrakingPhase, MedGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase, MedGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase,...
    MedGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase, LatGasvsSolZDiff_WithinATx_TwoHz_BrakingPhase, LatGasvsPLZDiff_WithinATx_TwoHz_BrakingPhase,...
    LatGasvsTAZDiff_WithinATx_TwoHz_BrakingPhase, SolvsPLZDiff_WithinATx_TwoHz_BrakingPhase, SolvsTAZDiff_WithinATx_TwoHz_BrakingPhase,...
    PLvsTAZDiff_WithinATx_TwoHz_BrakingPhase];


        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoHz_PropulsionPhase, MedGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase, MedGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase,...
    MedGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase, LatGasvsSolZDiff_WithinATx_TwoHz_PropulsionPhase, LatGasvsPLZDiff_WithinATx_TwoHz_PropulsionPhase,...
    LatGasvsTAZDiff_WithinATx_TwoHz_PropulsionPhase, SolvsPLZDiff_WithinATx_TwoHz_PropulsionPhase, SolvsTAZDiff_WithinATx_TwoHz_PropulsionPhase,...
    PLvsTAZDiff_WithinATx_TwoHz_PropulsionPhase];








%Add 2.3 Hz hopping data for ATx Involved vs NonInvolved comparison

    %Contact phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, SolvsPLZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking, SolvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking,...
    PLvsTAZDiff_WithinATx_TwoPoint3Hz_Flight2EndBraking];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase,...
    MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase,...
    LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, SolvsPLZDiff_WithinATx_TwoPoint3Hz_BrakingPhase, SolvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase,...
    PLvsTAZDiff_WithinATx_TwoPoint3Hz_BrakingPhase];


        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 );
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, MedGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, MedGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase,...
    MedGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, LatGasvsSolZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, LatGasvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase,...
    LatGasvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, SolvsPLZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase, SolvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase,...
    PLvsTAZDiff_WithinATx_TwoPoint3Hz_PropulsionPhase];










    %Start with self-selected hopping rate for Control Involved vs NonInvolved comparison

        %Also start with contact phase
    
%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Create the matrix
ChangeScoreMatrix = [ ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_Preferred_Flight2EndBraking, MedGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking, MedGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, LatGasvsSolZDiff_WithinControl_Preferred_Flight2EndBraking, LatGasvsPLZDiff_WithinControl_Preferred_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinControl_Preferred_Flight2EndBraking, SolvsPLZDiff_WithinControl_Preferred_Flight2EndBraking, SolvsTAZDiff_WithinControl_Preferred_Flight2EndBraking,...
    PLvsTAZDiff_WithinControl_Preferred_Flight2EndBraking];

        %Add data for braking phase


%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_Preferred_BrakingPhase, MedGasvsSolZDiff_WithinControl_Preferred_BrakingPhase, MedGasvsPLZDiff_WithinControl_Preferred_BrakingPhase,...
    MedGasvsTAZDiff_WithinControl_Preferred_BrakingPhase, LatGasvsSolZDiff_WithinControl_Preferred_BrakingPhase, LatGasvsPLZDiff_WithinControl_Preferred_BrakingPhase,...
    LatGasvsTAZDiff_WithinControl_Preferred_BrakingPhase, SolvsPLZDiff_WithinControl_Preferred_BrakingPhase, SolvsTAZDiff_WithinControl_Preferred_BrakingPhase,...
    PLvsTAZDiff_WithinControl_Preferred_BrakingPhase ];

        %Add data for propulsion phase



%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_Preferred_PropulsionPhase, MedGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase, MedGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase,...
    MedGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase, LatGasvsSolZDiff_WithinControl_Preferred_PropulsionPhase, LatGasvsPLZDiff_WithinControl_Preferred_PropulsionPhase,...
    LatGasvsTAZDiff_WithinControl_Preferred_PropulsionPhase, SolvsPLZDiff_WithinControl_Preferred_PropulsionPhase, SolvsTAZDiff_WithinControl_Preferred_PropulsionPhase,...
    PLvsTAZDiff_WithinControl_Preferred_PropulsionPhase];







%Add 2 Hz hopping data for Control Involved vs NonInvolved comparison

    %Contact phase data


%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoHz_Flight2EndBraking, MedGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking, MedGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, LatGasvsSolZDiff_WithinControl_TwoHz_Flight2EndBraking, LatGasvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking, SolvsPLZDiff_WithinControl_TwoHz_Flight2EndBraking, SolvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking,...
    PLvsTAZDiff_WithinControl_TwoHz_Flight2EndBraking];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoHz_BrakingPhase, MedGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase, MedGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase,...
    MedGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase, LatGasvsSolZDiff_WithinControl_TwoHz_BrakingPhase, LatGasvsPLZDiff_WithinControl_TwoHz_BrakingPhase,...
    LatGasvsTAZDiff_WithinControl_TwoHz_BrakingPhase, SolvsPLZDiff_WithinControl_TwoHz_BrakingPhase, SolvsTAZDiff_WithinControl_TwoHz_BrakingPhase,...
    PLvsTAZDiff_WithinControl_TwoHz_BrakingPhase];




        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoHz_PropulsionPhase, MedGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase, MedGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase,...
    MedGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase, LatGasvsSolZDiff_WithinControl_TwoHz_PropulsionPhase, LatGasvsPLZDiff_WithinControl_TwoHz_PropulsionPhase,...
    LatGasvsTAZDiff_WithinControl_TwoHz_PropulsionPhase, SolvsPLZDiff_WithinControl_TwoHz_PropulsionPhase, SolvsTAZDiff_WithinControl_TwoHz_PropulsionPhase,...
    PLvsTAZDiff_WithinControl_TwoHz_PropulsionPhase];








%Add 2.3 Hz hopping data for Control Involved vs NonInvolved comparison

    %Contact phase data

%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking,...
    MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking,...
    LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, SolvsPLZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking, SolvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking,...
    PLvsTAZDiff_WithinControl_TwoPoint3Hz_Flight2EndBraking];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase,...
    MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase,...
    LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, SolvsPLZDiff_WithinControl_TwoPoint3Hz_BrakingPhase, SolvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase,...
    PLvsTAZDiff_WithinControl_TwoPoint3Hz_BrakingPhase];


        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within Control, 2 = Within Control, 
% 3 = Involved vs Control
ComparisonVector = ones( numel( HzofInterest ), 1 ) .* 2;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, MedGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, MedGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase,...
    MedGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, LatGasvsSolZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, LatGasvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase,...
    LatGasvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, SolvsPLZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase, SolvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase,...
    PLvsTAZDiff_WithinControl_TwoPoint3Hz_PropulsionPhase];










   





    %Now add in data for ATx Involved vs Matched Control comparison

        %Contact phase
    
%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Create the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_Preferred_Flight2EndBraking, MedGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking, MedGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking,...
    MedGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, LatGasvsSolZDiff_BtwnGrp_Preferred_Flight2EndBraking, LatGasvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking,...
    LatGasvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking, SolvsPLZDiff_BtwnGrp_Preferred_Flight2EndBraking, SolvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking,...
    PLvsTAZDiff_BtwnGrp_Preferred_Flight2EndBraking];

        %Add data for braking phase

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_Preferred_BrakingPhase, MedGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase, MedGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase,...
    MedGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase, LatGasvsSolZDiff_BtwnGrp_Preferred_BrakingPhase, LatGasvsPLZDiff_BtwnGrp_Preferred_BrakingPhase,...
    LatGasvsTAZDiff_BtwnGrp_Preferred_BrakingPhase, SolvsPLZDiff_BtwnGrp_Preferred_BrakingPhase, SolvsTAZDiff_BtwnGrp_Preferred_BrakingPhase,...
    PLvsTAZDiff_BtwnGrp_Preferred_BrakingPhase];

        %Add data for propulsion phase

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = zeros( numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_Preferred_PropulsionPhase, MedGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase, MedGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase,...
    MedGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase, LatGasvsSolZDiff_BtwnGrp_Preferred_PropulsionPhase, LatGasvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase,...
    LatGasvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase, SolvsPLZDiff_BtwnGrp_Preferred_PropulsionPhase, SolvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase,...
    PLvsTAZDiff_BtwnGrp_Preferred_PropulsionPhase];







%Add 2 Hz hopping data for ATx Involved vs Matched Control comparison

    %Contact phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoHz_Flight2EndBraking, MedGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking, MedGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking,...
    MedGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, LatGasvsSolZDiff_BtwnGrp_TwoHz_Flight2EndBraking, LatGasvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking,...
    LatGasvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking, SolvsPLZDiff_BtwnGrp_TwoHz_Flight2EndBraking, SolvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking,...
    PLvsTAZDiff_BtwnGrp_TwoHz_Flight2EndBraking];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoHz_BrakingPhase, MedGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase, MedGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase,...
    MedGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase, LatGasvsSolZDiff_BtwnGrp_TwoHz_BrakingPhase, LatGasvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase,...
    LatGasvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase, SolvsPLZDiff_BtwnGrp_TwoHz_BrakingPhase, SolvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase,...
    PLvsTAZDiff_BtwnGrp_TwoHz_BrakingPhase];


        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoHz_PropulsionPhase, MedGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase, MedGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase,...
    MedGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase, LatGasvsSolZDiff_BtwnGrp_TwoHz_PropulsionPhase, LatGasvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase,...
    LatGasvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase, SolvsPLZDiff_BtwnGrp_TwoHz_PropulsionPhase, SolvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase,...
    PLvsTAZDiff_BtwnGrp_TwoHz_PropulsionPhase];








%Add 2.3 Hz hopping data for ATx Involved vs Matched Control comparison

    %Contact phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 );

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking,...
    MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking,...
    LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking, SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking,... 
    PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_Flight2EndBraking ];



    %Braking phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 2;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase,...
    MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase,...
    LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase, SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase,... 
    PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_BrakingPhase ];


        %Propulsion phase data

%Create a vector saying which comparison is in a given row. 1 = Within ATx, 2 = ATx Involved vs
%Control
ComparisonVector = ones( numel( HzofInterest ), 1 ).*3;
%Create a vector saying which hopping rate is in a given row. 0 = Self-Selected Hz, 2 and 2.3 are
%self-explanatory
HoppingRate_ID = repmat( 2.3, numel( HzofInterest ), 1 );
%Create a vector saying which phase is in a given row. 1 = Contact, 2 = Braking,  3 = Propulsion.
Phase_ID = ones( numel( HzofInterest ), 1 ) .* 3;

%Add data to the matrix
ChangeScoreMatrix = [ ChangeScoreMatrix; ComparisonVector, HoppingRate_ID, Phase_ID, HzofInterest',...
    GastrocsZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, MedGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, MedGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase,...
    MedGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, LatGasvsSolZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, LatGasvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase,...
    LatGasvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, SolvsPLZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase, SolvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase,... 
    PLvsTAZDiff_BtwnGrp_TwoPoint3Hz_PropulsionPhase ];



%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 27',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end


%% SECTION 29 - Create Matrix for Rate Comparison Data                                    
                                    
                                    
%Create vector of ones to represent ATx group                                    
GroupID_Vector = ones( numel( HzofInterest ), 1 );                                    

%Create vector of ones to represent Involved Limb
LimbID_Vector = ones( numel( HzofInterest ), 1 );
                                    
%Create vector of ones to represent Self-Selected vs 2 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 );

%Create vector of ones to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );
 
 
 %Begin creating matrix holding rate comparison data
 Coherence_RateComparisonMatrix = [ GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, SolvsPLZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking, SolvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwo_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, SolvsPLZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase, SolvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwo_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, SolvsPLZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase, SolvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwo_PropulsionPhase];          
     
     







%Create vector of 2s to represent Self-Selected vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );
 

 %Add ATx Involved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase, SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, SolvsPLZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase, SolvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_ATxInvolved_PreferredvsTwoPoint3_PropulsionPhase];  








%Create vector of 3s to represent 2 vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );

 %Add ATx Involved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase, SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, SolvsPLZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase, SolvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_ATxInvolved_TwovsTwoPoint3_PropulsionPhase];  














%Create vector of 2s to represent NonInvolved Limb
LimbID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

%Create vector of ones to represent Self-Selected vs 2 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 );

%Create vector of ones to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );
 
 
 %Begin creating matrix holding rate comparison data
 Coherence_RateComparisonMatrix = [  Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwo_PropulsionPhase];          
     
     







%Create vector of 2s to represent Self-Selected vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );


 %Add ATx NonInvolved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, SolvsPLZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase, SolvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_ATxNonInvolved_PreferredvsTwoPoint3_PropulsionPhase];  








%Create vector of 3s to represent 2 vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );


 %Add ATx NonInvolved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking,...
    LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase, SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx NonInvolved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, SolvsPLZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase, SolvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_ATxNonInvolved_TwovsTwoPoint3_PropulsionPhase];  















%Create vector of 2s to represent Control group                                    
GroupID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;                                    

%Create vector of ones to represent Matched Limb
LimbID_Vector = ones( numel( HzofInterest ), 1 );
                                    
%Create vector of ones to represent Self-Selected vs 2 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 );

%Create vector of ones to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );
 
 
 %Begin creating matrix holding rate comparison data
 Coherence_RateComparisonMatrix = [  Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwo_Flight2EndBraking, MedGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking, MedGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking,...
     MedGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking, LatGasvsSolZDiff_Control_PreferredvsTwo_Flight2EndBraking, LatGasvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking,...
    LatGasvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking, SolvsPLZDiff_Control_PreferredvsTwo_Flight2EndBraking, SolvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking,...
    PLvsTAZDiff_Control_PreferredvsTwo_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwo_BrakingPhase, MedGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase, MedGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase,...
     MedGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase, LatGasvsSolZDiff_Control_PreferredvsTwo_BrakingPhase, LatGasvsPLZDiff_Control_PreferredvsTwo_BrakingPhase,...
    LatGasvsTAZDiff_Control_PreferredvsTwo_BrakingPhase, SolvsPLZDiff_Control_PreferredvsTwo_BrakingPhase, SolvsTAZDiff_Control_PreferredvsTwo_BrakingPhase,...
    PLvsTAZDiff_Control_PreferredvsTwo_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwo_PropulsionPhase, MedGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase, MedGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase,...
     MedGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase, LatGasvsSolZDiff_Control_PreferredvsTwo_PropulsionPhase, LatGasvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase,...
    LatGasvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase, SolvsPLZDiff_Control_PreferredvsTwo_PropulsionPhase, SolvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase,...
    PLvsTAZDiff_Control_PreferredvsTwo_PropulsionPhase];          
     
     







%Create vector of 2s to represent Self-Selected vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );

 %Add ATx Involved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking,...
    LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_Control_PreferredvsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, SolvsPLZDiff_Control_PreferredvsTwoPoint3_BrakingPhase, SolvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_Control_PreferredvsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, SolvsPLZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase, SolvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_Control_PreferredvsTwoPoint3_PropulsionPhase];  








%Create vector of 3s to represent 2 vs 2.3 Hz comparison
ComparisonID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

%Create vector of 1s to represent contact phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 );

 %Add ATx Involved Limb, Contact Phase, Self-Selected vs 2.3 Hz to the matrix
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking,...
     MedGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, MedGasvsSolZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, MedGasvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking,...
    MedGasvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, SolvsPLZDiff_Control_TwovsTwoPoint3_Flight2EndBraking, SolvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking,...
    PLvsTAZDiff_Control_TwovsTwoPoint3_Flight2EndBraking];
     


%Create vector of 2s to represent braking phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 2;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_TwovsTwoPoint3_BrakingPhase, MedGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase, MedGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase,...
     MedGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase, LatGasvsSolZDiff_Control_TwovsTwoPoint3_BrakingPhase, LatGasvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase,...
    LatGasvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase, SolvsPLZDiff_Control_TwovsTwoPoint3_BrakingPhase, SolvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase,...
    PLvsTAZDiff_Control_TwovsTwoPoint3_BrakingPhase];     
     
     
     
     
%Create vector of 3s to represent propulsion phase
 PhaseID_Vector = ones( numel( HzofInterest ), 1 ) .* 3;

     
%Add ATx Involved Limb, Braking Phase, Self-Selected vs 2.3 Hz to the matrix     
 Coherence_RateComparisonMatrix = [ Coherence_RateComparisonMatrix; GroupID_Vector, LimbID_Vector, ComparisonID_Vector,  PhaseID_Vector, HzofInterest',...
     GastrocsZDiff_Control_TwovsTwoPoint3_PropulsionPhase, MedGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase, MedGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase,...
     MedGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase, LatGasvsSolZDiff_Control_TwovsTwoPoint3_PropulsionPhase, LatGasvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase,...
    LatGasvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase, SolvsPLZDiff_Control_TwovsTwoPoint3_PropulsionPhase, SolvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase,...
    PLvsTAZDiff_Control_TwovsTwoPoint3_PropulsionPhase];  





%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 29',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end


uiwait( msgbox );




%% SECTION 30 - Export Matrices



%Want to clear the errors for the new section
lasterror = [];

%Create cell array of column names, for table
VariableNames = { 'Group_ID', 'Limb_ID', 'HoppingRate_ID', 'Phase_ID', 'HzofInterest',...
    'GastrocnemiiCoherence',  'MedGasvsSolCoherence',  'MedGasvsPLCoherence',  'MedGasvsTACoherence',...
    'LatGasvsSolCoherence',  'LatGasvsPLCoherence',  'LatGasvsTACoherence', 'SolvsPLCoherence',...
    'SolvsTACoherence',  'PLvsTACoherence',...
    'GastrocnemiiCoherence_StandardZScore',  'MedGasvsSolCoherence_StandardZScore',  'MedGasvsPLCoherence_StandardZScore',  'MedGasvsTACoherence_StandardZScore',...
    'LatGasvsSolCoherence_StandardZScore',  'LatGasvsPLCoherence_StandardZScore',  'LatGasvsTACoherence_StandardZScore', 'SolvsPLCoherence_StandardZScore',...
    'SolvsTACoherence_StandardZScore',  'PLvsTACoherence_StandardZScore' };

writetable( array2table( CoherenceData_FrequencySeries, 'VariableNames', VariableNames ), 'DissertationCoherenceData_FrequencySeries.xlsx' )



%Create cell array of column names, for table
VariableNames = { 'Comparison_ID', 'HoppingRate_ID', 'Phase_ID', 'HzofInterest',...
    'GastrocnemiiCoherence_ZScoreDiff',  'MedGasvsSolCoherence_ZScoreDiff',  'MedGasvsPLCoherence_ZScoreDiff',  'MedGasvsTACoherence_ZScoreDiff',...
    'LatGasvsSolCoherence_ZScoreDiff',  'LatGasvsPLCoherence_ZScoreDiff',  'LatGasvsTACoherence_ZScoreDiff', 'SolvsPLCoherence_ZScoreDiff',...
    'SolvsTACoherence_ZScoreDiff',  'PLvsTACoherence_ZScoreDiff' };

writetable( array2table( ChangeScoreMatrix, 'VariableNames', VariableNames ), 'DissertationCoherenceData_DiffInZScore.xlsx' )







VariableNames = { 'Group_ID', 'Limb_ID', 'Comparison_ID',  'Phase_ID', 'HzofInterest',...
    'GastrocnemiiCoherence_ZScoreDiff',  'MedGasvsSolCoherence_ZScoreDiff',  'MedGasvsPLCoherence_ZScoreDiff',  'MedGasvsTACoherence_ZScoreDiff',...
    'LatGasvsSolCoherence_ZScoreDiff',  'LatGasvsPLCoherence_ZScoreDiff',  'LatGasvsTACoherence_ZScoreDiff', 'SolvsPLCoherence_ZScoreDiff',...
    'SolvsTACoherence_ZScoreDiff',  'PLvsTACoherence_ZScoreDiff' };



writetable( array2table(  Coherence_RateComparisonMatrix, 'VariableNames', VariableNames ), 'Coherence_RateComparison.xlsx' );






clearvars -except David_DissertationDataStructure QualvsPostQualData GroupList_DialogueBox GroupList ATxParticipantList ControlParticipantList DataCategories_HoppingKinematicsKinetics ControlLimbID ATxLimbID GRFSampHz EMGSampHz MoCapSampHz ATxParticipantMass ControlParticipantMass CreateStruct

clc



%Pop up a prompt stating there are no errors in this section, if all code was run
if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 30',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end