%% SECTION 1 - Load Data Structure
load( 'Post-Quals Data/Data Structure/Current Version/David_DissertationDataStructure_17_Apr_2024.mat');


CreateStruct.Interpreter = 'tex';
CreateStruct.Resize = 'on';
CreateStruct.WindowStyle = 'modal';


lasterror = [];


if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 1',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



%% SECTION 2 - Create Field Variables

%First field within data structure = data for quals versus for remainder of dissertation
QualvsPostQualData = {'Post_Quals'};
%Second field = group list
% GroupList = {'ATx','Control'};
GroupList = { 'ATx', 'Control' };


% % Third field = participant list 
ATxParticipantList = { 'ATx07', 'ATx08', 'ATx10', 'ATx12', 'ATx17', 'ATx18', 'ATx19', 'ATx21', 'ATx24', 'ATx25', 'ATx27', 'ATx34', 'ATx38', 'ATx41', 'ATx44', 'ATx50', 'ATx36', 'ATx49', 'ATx39', 'ATx74' };
ControlParticipantList = { 'HC01', 'HC05', 'HC06', 'HC08', 'HC11', 'HC12', 'HC17', 'HC18', 'HC19', 'HC20', 'HC21', 'HC25' };
ControlParticipantList_NoHC08 = { 'HC01', 'HC05', 'HC06', 'HC11', 'HC12', 'HC17', 'HC18', 'HC19', 'HC20', 'HC21', 'HC25', 'HC42', 'HC45', 'HC53', 'HC44', 'HC48', 'HC65' };

% ControlParticipantList = {'HP03','HP08'};

%4th field = data type
DataCategories_HoppingKinematicsKinetics = {'HoppingKinematicsKinetics'};
DataCategories_IndividualHops = {'IndividualHops'};

%5th field = limb ID
ControlLimbID = {'LeftLimb','RightLimb'};
ATxLimbID = {'InvolvedLimb','NonInvolvedLimb'};

%Specify sampling rates for GRF, EMG, kinematics/kinetics
GRFSampHz = 1500;
EMGSampHz = 1500;
MoCapSampHz = 250;

%Set the number of seconds per MoCap frame.
MoCapTimeStep = 1 ./ 250;

% %Create vector of participant masses
ATxParticipantMass = [ 69.90, 64.66, 107.47, 84.35, 83.07, 68.80, 84.39, 81.96, 90.30, 79.08, 79.67, 87.51, 58.12, 61.82, 90.18, 80.99, 67.28, 70.30, 71.72, 57.66 ]; 
%ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44,
%ATx50, ATx36, ATx49
ControlParticipantMass = [ 57.24, 83.50, 61.37, 80.99, 105.01, 61.66, 77.14, 82.00, 75.66, 79.75, 68.08, 75.28, 65.44, 82.52, 50.40, 60.45, 91.25, 60.39 ]; 
%HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25, HC42, HC45, HC53, HC44, HC48
ControlParticipantMass_NoHC08 = [ 57.24, 83.50, 61.37, 105.01, 61.66, 77.14, 82.00, 75.66, 79.75, 68.08, 75.28, 65.44, 82.52, 50.40, 60.45, 91.25, 60.39 ]; 
%HC01, HC05, HC06, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25, HC42, HC45, HC53, HC44, HC48

%Create a vector of participant segment lengths
    %ATx foot length - Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24,
    %ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxInvolvedFootLength = [ 0.126385, 0.123808, 0.146776, 0.133547, 0.136025, 0.1211, 0.143167, 0.152918, 0.12875, 0.139623, 0.129104, 0.1409, 0.118757, 0.128581, 0.153601, 0.139501, 0.121217, 0.126295 ]; 
    %ATx foot length - Non-Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxNonInvolvedFootLength = [ 0.127136, 0.126925, 0.16447, 0.120616, 0.13741, 0.125209, 0.142884, 0.15476, 0.127891, 0.159367, 0.124944, 0.138974, 0.124146, 0.124404, 0.154188, 0.149344, 0.116242, 0.128501 ]; 

    %ATx Shank length - Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxInvolvedShankLength = [ 0.402781, 0.378445, 0.480907, 0.379233, 0.398272, 0.394882, 0.442735, 0.445849, 0.396216, 0.443254, 0.406688, 0.412933, 0.374694, 0.368472, 0.437198, 0.381662, 0.36238, 0.399914 ]; 
    %ATx Shank length - Non-Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxNonInvolvedShankLength = [ 0.40613, 0.373726, 0.477604, 0.388157, 0.402231, 0.402365, 0.443625, 0.438427, 0.403292, 0.437259, 0.404221, 0.412035, 0.374368, 0.365548, 0.441555, 0.384685, 0.36849, 0.405772 ]; 

    %ATx Thigh length - Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxInvolvedThighLength = [ 0.425292, 0.361168, 0.454392, 0.383416, 0.444702, 0.389206, 0.422992, 0.424498, 0.480226, 0.406013, 0.408446, 0.418261, 0.364765, 0.423881, 0.418817, 0.408219, 0.395743, 0.392352 ];
    %ATx Thigh length - Non-Involved Limb - ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34, ATx38, ATx41, ATx44, ATx50
ATxNonInvolvedThighLength = [ 0.430101, 0.371055, 0.47383, 0.383821, 0.451319, 0.383113, 0.430899,  0.43167, 0.468063, 0.41673, 0.406566, 0.402099, 0.366944, 0.414055, 0.40956, 0.411235, 0.408741, 0.373571 ];






    %Control foot length - Left Limb
ControlLeftFootLength = [ 0.125221, 0.135212, 0.126866, NaN, 0.166622, 0.12096, 0.113707, 0.140328, 0.135434, 0.156568, 0.132273, 0.132618 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlLeftFootLength_NoHC08 = [ 0.125221, 0.135212, 0.126866, 0.166622, 0.12096, 0.113707, 0.140328, 0.135434, 0.156568, 0.132273, 0.132618 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
    %Control foot length - Right Limb
ControlRightFootLength = [ 0.119155, 0.133069, 0.128084, NaN, 0.154155, 0.118371, 0.114508, 0.14815, 0.128678, 0.146966, 0.130493, 0.130225 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlRightFootLength_NoHC08 = [ 0.119155, 0.133069, 0.128084, 0.154155, 0.118371, 0.114508, 0.14815, 0.128678, 0.146966, 0.130493, 0.130225 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25

    %Control Shank length - Left Limb
ControlLeftShankLength = [ 0.388484, 0.410077, 0.383747, NaN, 0.448216, 0.393432, 0.352289, 0.420083, 0.420005, 0.45084, 0.38966, 0.39791 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlLeftShankLength_NoHC08 = [ 0.388484, 0.410077, 0.383747, 0.448216, 0.393432, 0.352289, 0.420083, 0.420005, 0.45084, 0.38966, 0.39791 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
    %Control Shank length - Right Limb
ControlRightShankLength = [ 0.383465, 0.412963, 0.383744, NaN, 0.452817, 0.391212, 0.354833, 0.413949, 0.413899, 0.442075, 0.389489, 0.401694 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlRightShankLength_NoHC08 = [ 0.383465, 0.412963, 0.383744, 0.452817, 0.391212, 0.354833, 0.413949, 0.413899, 0.442075, 0.389489, 0.401694 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25

    %Control Thigh length - Left Limb
ControlLeftThighLength = [ 0.379649, 0.397896, 0.394051, NaN, 0.427003, 0.410466, 0.415912, 0.404007, 0.410905, 0.423281, 0.387445, 0.377641 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlLeftThighLength_NoHC08 = [ 0.379649, 0.397896, 0.394051, 0.427003, 0.410466, 0.415912, 0.404007, 0.410905, 0.423281, 0.387445, 0.377641 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
    %Control Thigh length - Right Limb
ControlRightThighLength = [ 0.383514, 0.38048, 0.377263, NaN, 0.418788, 0.403164, 0.399152, 0.411004, 0.410795, 0.410338, 0.377765, 0.383808 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25
ControlRightThighLength_NoHC08 = [ 0.383514, 0.38048, 0.377263, 0.418788, 0.403164, 0.399152, 0.411004, 0.410795, 0.410338, 0.377765, 0.383808 ]; %HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25



   %Set vectors containing between-limb difference in tendon thickness for each participant
    %ATx Group - %ATx07, ATx08, ATx10, ATx12, ATx17, ATx18, ATx19, ATx21, ATx24, ATx25, ATx27, ATx34,
    %ATx38, ATx41, ATx44, ATx50, ATx36, ATx49
ATxMorphology = [ 0.75, 2.41, 1.4, 0.5, 1.57, 3.69, 2.58, 1.21, 1.94, 1.84, 2.84, 1.9, 0.43,  1.4, 3.18, 0.94, 1.09, 0.82  ];
    %Control Group - HC01, HC05, HC06, HC08, HC11, HC12, HC17, HC18, HC19, HC20, HC21, HC25, HC42
ControlMorphology = [ 0.55, 0.55, 0.35, 0.55, 0.63, 0.55, 0.55, 0.62, 0.55, 0.55, 0.55, 0.55, 0.5 ];



%Set vectors containing visual analog scale rating after each hopping bout, for each participant
    %ATx Group
        %Involved Limb
            %Preferred Hz
ATxVAS_Involved_PreferredHz = [ 0, 2, 0, 0, 4, 1, 2.5, 0, 0, 0, 3, 3, 0, 0, 1.5, 0, 0, 0 ];
            %2.0 Hz
ATxVAS_Involved_TwoHz = [ 0, 1, 0, 6.5, 4, 1, 3, 0, 0, 0, 1, 1, 0, 0, 1.5, 0, 0, 0 ];
            %2.3 Hz
ATxVAS_Involved_TwoPoint3Hz = [ 0, 0, 0, 6, 3, 1, 3, 0, 0, 0, 0, 2, 0, 0, 1.5, 0, 0, 0 ];
        %Non-Involved Limb
            %Preferred Hz
ATxVAS_NonInvolved_PreferredHz = [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 ];
            %2.0 Hz
ATxVAS_NonInvolved_TwoHz = [ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 ];
            %2.3 hz
ATxVAS_NonInvolved_TwoPoint3Hz = [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 ];
    %Control Group
ControlVAS = 0;



%We only have one trial of data for each hopping rate, for now
 HoppingTrialNumber = {'Trial1'};


if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 2',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end












  %% SECTION 3 - Energy Flow Calculations
  
  %Set some of the RowtoFill variables equal to 1 - these will be used to fill in the matrices
  %initialized in the next three lines
  RowtoFill_JointBehaviorIndex_RateMeans = 1;
  
  


    %Create a prompt so we can tell the code whether we've added any new participants
    ReprocessingDatPrompt =  'Are You Reprocessing Data?' ;

    %Use inputdlg function to create a dialogue box for the prompt created above.
    %First arg is prompt, 2nd is title
    ReprocessingData_Cell = inputdlg( [ '\fontsize{15}' ReprocessingDatPrompt ], 'Are You Reprocessing Data?', [1 150], {'No'} ,CreateStruct);






    %If we are NOT reprocessing data, access JointBehaviorIndex and EnergyFlow from the
    %data structure
    if strcmp( cell2mat( ReprocessingData_Cell ), 'No' ) || strcmp( cell2mat( ReprocessingData_Cell ), 'N' )

        
        %Pull out the Energy Flow matrix from the data table
        EnergyFlow = David_DissertationDataStructure.Post_Quals.AllGroups.EnergyFlow_Matrix;

        %RowtoFill for EnergyFlow = current number of rows in EnergyFlow
        RowtoFill_EnergyFlow = size( EnergyFlow, 1 );

        %Pull out the JointReactionForceAndLinearVel matrix from the data table
        JointReactionForceAndLinearVel =  David_DissertationDataStructure.Post_Quals.AllGroups.JointReactionForceAndLinearVel_Matrix;

        %RowtoFill for JointReactionForceAndLinearVel = current number of rows in JointReactionForceAndLinearVel
        RowtoFill_JointReactionForceAndLinearVel = size( JointReactionForceAndLinearVel, 1 );


    %If we ARE reprocessing data, initialize JointBehaviorIndex and EnergyFlow
    else

      %Initialize matrices to hold energy flow data from the entire cohort
      EnergyFlow = NaN(1, 44);
    
      %Initial row to fill in EnergyFlow is Row 1
      RowtoFill_EnergyFlow = 1;
      
      %Initialize matrices to hold joint reaction force and joint linear velocity data from the entire cohort]
      JointReactionForceAndLinearVel = NaN(1, 19);
      
      %Initial row to fill in  JointReactionForceAndLinearVel is Row 1
      RowtoFill_JointReactionForceAndLinearVel = 1;

    end





    %If you are NOT reprocessing data, ask whether we have added any new participants
    if strcmp( cell2mat( ReprocessingData_Cell ), 'No' ) || strcmp( cell2mat( ReprocessingData_Cell ), 'N' )
    
        
        %Create a prompt so we can tell the code whether we've added any new participants
        AddedNewParticipantPrompt =  'Have You Added A New Participant?' ;
    
        %Use inputdlg function to create a dialogue box for the prompt created above.
        %First arg is prompt, 2nd is title
        AddedNewParticipant_Cell = inputdlg( [ '\fontsize{15}' AddedNewParticipantPrompt ], 'Have You Added A New Participant?', [1 150], {'Yes'} ,CreateStruct);


    %If you ARE reprocessing data, AddedParticipantNData_Cell is set to 'No' - automatically add each
    %participant's data to table for exporting
    else

       AddedParticipantNData_Cell = {'No'};

       AddedNewParticipant_Cell = {'No'};
    
    end



    %Create a prompt so we can manually enter the group of interest
    ShowAnyPlotsPrompt =  'Show Any Plots ?' ;

    %Use inputdlg function to create a dialogue box for the prompt created above.
    %First arg is prompt, 2nd is title
    ShowAnyPlots_Cell = inputdlg( [ '\fontsize{15}' ShowAnyPlotsPrompt ], 'Show Any Plots?', [1 150], {'No'} ,CreateStruct);



%Run this loop once per overarching category of data (data from before Quals versus after Quals)
for l = 1 : numel(QualvsPostQualData)
    
    %Use get field to create a new data structure containing the list of groups. List of groups is
    %stored under the first field of the structure, QualvsPostQualData
    GroupListDataStructure = getfield(David_DissertationDataStructure,QualvsPostQualData{l});
 
    
    
    
 %% Begin M For Loop - Loop Through Groups    
    for m = 1 : numel(GroupList)
        
        %Use get field to create a new data structure containing the list of participants. List of participants is
        %stored under the second field of the structure (the list of groups)
        ParticipantListDataStructure = getfield(GroupListDataStructure,GroupList{m});
        
        %If Group being processed is ATx, set Participant List, ParticipantMass, LimbID, and HoppingRate_ID_forTable to correspond to the ATx group.  
        %If Group being processed is Controls, set those some variables to the values corresponding
        %to the Control group
        if strcmp( GroupList{m}, 'ATx' )
            
            ParticipantList = ATxParticipantList;
            
            ParticipantMass = ATxParticipantMass;

            LimbID = {'InvolvedLimb','NonInvolvedLimb'};
            
            HoppingRate_ID_forTable = [0, 2, 2.3];

            
        else
            
            ParticipantList = ControlParticipantList_NoHC08;
            
            ParticipantMass = ControlParticipantMass_NoHC08;
            
            LimbID = {'LeftLimb','RightLimb'};

            HoppingRate_ID_forTable = [0, 2, 2.3];
            
        end
        
        


        
%% Begin N For Loop - Loop Through Participants

        for n = 1 : numel(ParticipantList)
            

            %If you HAVE added a new participant, ask whether we have added the current participant
            if strcmp( cell2mat( AddedNewParticipant_Cell ), 'Yes' ) || strcmp( cell2mat( AddedNewParticipant_Cell ), 'Y' )
            
            
                %Create a prompt so we can tell the code whether we've added any new participants
                AddParticipantNDataPrompt = [ 'Have You Added ', ParticipantList{ n }, 's Data?' ];
                
                %Use inputdlg function to create a dialogue box for the prompt created above.
                %First arg is prompt, 2nd is title
                AddedParticipantNData_Cell = inputdlg( [ '\fontsize{15}' AddParticipantNDataPrompt ], [ 'Have You Added ', ParticipantList{ n }, 's Data?' ], [1 150], {'Yes'} ,CreateStruct);
            
            end


            
            if strcmp( cell2mat( AddedParticipantNData_Cell ), 'No' ) || strcmp( cell2mat( AddedParticipantNData_Cell ), 'N' )
                
                %Create a prompt so we can manually enter the group of interest
                ShowPlotsPrompt = [ 'Show Plots for  ', ParticipantList{ n }, '?' ];
    
                %Use inputdlg function to create a dialogue box for the prompt created above.
                %First arg is prompt, 2nd is title
                ShowPlots_Cell = inputdlg( [ '\fontsize{15}' ShowPlotsPrompt ], 'Show Plots?', [1 150], {'No'} ,CreateStruct);


            elseif strcmp( cell2mat( AddedParticipantNData_Cell ), 'Yes' ) || strcmp( cell2mat( AddedParticipantNData_Cell ), 'Y' ) || strcmp( cell2mat( ShowAnyPlots_Cell ), 'No' ) || strcmp( cell2mat( ShowAnyPlots_Cell ), 'N' )
                    
                %Set ShowPlots_Cell to 'No', so that we don't show the current participant's plots since
                %that participant has already been added to the outcome matrices.
                ShowPlots_Cell = { 'No' };

            end
            

            %If you have NOT added Participant N Data, add it to the data structure
            if strcmp( cell2mat( AddedParticipantNData_Cell ), 'No' ) || strcmp( cell2mat( AddedParticipantNData_Cell ), 'N' )
            
            %Use get field to create a new data structure containing the list of data categories. Stored under the 3rd field of the structure (the list of participants)
            ListofDataTypes_DataStructure = getfield(ParticipantListDataStructure,ParticipantList{ n });
            
            
            
            %Visual 3D kinematic variables are named as RAnkle or LAnkle. For the ATx participants,
            %the data structure labels are Involved and NonInvolved. For indexing into the V3D
            %tables, we need to define whether the Involved limb is Right or Left.
            if strcmp( ParticipantList{n}, 'ATx07'  ) || strcmp( ParticipantList{n}, 'ATx08'  ) || strcmp( ParticipantList{n}, 'ATx10'  ) || strcmp( ParticipantList{n}, 'ATx17'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx18'  ) || strcmp( ParticipantList{n}, 'ATx21'  ) || strcmp( ParticipantList{n}, 'ATx25'  ) || strcmp( ParticipantList{n}, 'ATx36'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx38'  ) || strcmp( ParticipantList{n}, 'ATx39'  ) || strcmp( ParticipantList{n}, 'ATx41'  ) || strcmp( ParticipantList{n}, 'ATx49'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx74'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz' };
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ];
                
                
                

            elseif strcmp( ParticipantList{n}, 'ATx12'  ) || strcmp( ParticipantList{n}, 'ATx24'  ) || 
                
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx12 has 2 hopping rates
                HoppingRate_ID = { 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 2, 2.3 ];




            elseif strcmp( ParticipantList{n}, 'ATx19'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 2, 2.3 ];



            elseif strcmp( ParticipantList{n}, 'ATx27'  ) || strcmp( ParticipantList{n}, 'ATx34'  ) || strcmp( ParticipantList{n}, 'ATx44'  ) ||...
                    strcmp( ParticipantList{n}, 'ATx50'  )
             
                %LimbIDs for ATx participants
                LimbID = {'InvolvedLimb','NonInvolvedLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx07 has 2 hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz' };
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ]; 
                
                



            elseif strcmp( ParticipantList{ n }, 'HC11'  )
                
                %Process only the right limb of HC11
                LimbID = { 'LeftLimb', 'RightLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %HC11 has only the 2.0 and 2.3 Hz hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 2, 2.3 ];
                
                



            elseif strcmp( ParticipantList{ n }, 'HC42'  )
                
                %Process only the right limb of HC11
                LimbID = { 'RightLimb', 'LeftLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb' };
                
                %HC42 has only the 2.0 and 2.3 Hz hopping rates
                HoppingRate_ID = {'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 2, 2.3 ];
                
                
                

            elseif strcmp( ParticipantList{ n }, 'HC11'  ) ||  strcmp( ParticipantList{ n }, 'HC17'  ) || strcmp( ParticipantList{ n }, 'HC21'  ) ||...
                    strcmp( ParticipantList{ n }, 'HC32'  ) || strcmp( ParticipantList{ n }, 'HC34'  ) || strcmp( ParticipantList{ n }, 'HC45'  ) || strcmp( ParticipantList{ n }, 'HC48'  )
                
                %LimbIDs for ATx participants
                LimbID = {'LeftLimb', 'RightLimb'};
                
                %The first limb is the involved limb. Output from V3D is labeled as right or left,
                %not as involved and noninvolved. This variable will help us pull out the joint
                %level data
                LimbID_forV3DOutput = { 'LeftLimb', 'RightLimb' };
                
                %ATx10 has three hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                HoppingRate_ID_forTable = [ 0, 2, 2.3 ];


            else
                
                %For this code, will only process the right limb
                LimbID = { 'RightLimb', 'LeftLimb' };
                
                %Will use this variable to pull out the joint data from the Visual 3D output. Need
                %to set this variable because the values may differ from the ATx group. If we don't
                %set it differently for HC01, the values may be wrong
                LimbID_forV3DOutput = { 'RightLimb', 'LeftLimb',  };
                
                %HC01 has three hopping rates
                HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};
                
                %These are numeric values of the hopping rates, for filling in the matrices
                %containing data from all participants. Here, 0 = preferred Hz
                 HoppingRate_ID_forTable = [ 0, 2, 2.3 ];
                
                               
            end
            
            
            %Set ParticipantNMass to be the mass for Participant N
            ParticipantNMass = ParticipantMass(n);
            
            %Calculate weight for Participant N
            ParticipantNWeight = ParticipantNMass.*9.81;
                
             
           
            %Participants HP08 has MoCap sampling Hz of 150 instead of 250
            if strcmp( ParticipantList{ n }, 'HP08' )
                
                MoCapSampHz = 150;
                
                
            elseif strcmp( ParticipantList{ n }, 'HP02' )
                
                MoCapSampHz = 300;    
                
            else
                
                MoCapSampHz = 250;
                
            end
                
                
                
%% Begin A For Loop - Loop Through Limbs

            for a = 1 : numel( LimbID )
                


                
                %Use get field to create a new data structure containing the list of limbs. Stored under the 4th field of the structure (the list of data categories)
                Listof_LimbIDsforIndexing_DataStructure = getfield(ListofDataTypes_DataStructure,'UseforIndexingIntoData');

                %Index into same data structure, but want to pull out the original data table
                Listof_LimbIDsforOriginalDataTable_DataStructure = getfield(ListofDataTypes_DataStructure,'HoppingKinematicsKinetics');
                
                %Index into same data structure, but want to pull out the individual hops
                Listof_LimbIDsforIndividualHops_DataStructure = getfield(ListofDataTypes_DataStructure,'IndividualHops');
                    
                %Create a new data structure containing data for indexing into variables. The data
                %structure contains all data corresponding to Limb A
                VariablesInHoppingRates_DataStructure = getfield(Listof_LimbIDsforIndexing_DataStructure,LimbID{ a });
                
                %Create a new data structure containing the Visual 3D data tables for Limb A
                VariablesInHoppingRates_forOriginalDataTable_DataStructure = getfield(Listof_LimbIDsforOriginalDataTable_DataStructure,LimbID{ a });
                
                %Create a new data structure containing the data separated into individual hops, for
                %Limb A
                VariablesInHoppingRates_forIndividualHops_DataStructure = getfield(Listof_LimbIDsforIndividualHops_DataStructure,LimbID{ a });



                        %How long are the flight and contact phases? In terms of GRF sampling
                        %frequency. One row per hop
                        LengthofFlightPhase_GRFSamplingHz = NaN(4, 1);
                        LengthofContactPhase_GRFSamplingHz = NaN(4, 1);

                        %How many data points are there per hop? In terms of motion capture sampling
                        %Hz then EMG sampling Hz. One row per hop
                        NumEl_SthHop_MoCapSamplingHz = NaN(4, 1);
                        NumEl_SthHop_EMGSamplingHz = NaN(4, 1);

                        %What are the frame numbers corresponding to the beginning and end of the
                        %ground contact phase? In terms of motion capture sampling Hz
                        GContactBegin_MoCapFrameNumbers = NaN(4, 1);
                        GContactEnd_forContactPhase_MoCapFrameNumbers = NaN(4, 1);

                        %What are the frame numbers corresponding to the beginning and end of the
                        %ground contact phase? In terms of motion capture sampling Hz
                        GContactBegin_EMGFrameNumbers = NaN(4, 1);
                        GContactEnd_EMGFrameNumbers = NaN(4, 1);

                        %Find the first data point of each hop - this corresponds to beginning of flight phase. In terms of motion capture sampling
                        %Hz, then EMG sampling Hz. Will use this to create a vector containing the
                        %time points for  each hop
                        FirstDataPoint_SthHop_MoCapSamplingHz = NaN(4, 1);
                        FirstDataPoint_SthHop_EMGSamplingHz = NaN(4, 1);

                        %Find the last data point of each hop - this corresponds to the end of the ground contact phase. In terms
                        %of motion capture, EMG, and GRF sampling Hz. Will use this to create a vector containing the
                        %time points for the ground contact phase of each hop
                        LastDataPoint_SthHop_MoCapSamplingHz = NaN(4, 1);
                        LastDataPoint_SthHop_EMGSamplingHz = NaN(4, 1);
                        LastDataPoint_SthHop_GRFSamplingHz = NaN(4, 1);

                        %How many data points are there for the ground contact phase of each hop?
                        NumEl_SthHopContactPhase_MoCapSamplingHz = NaN(4, 1);
                        NumEl_SthHopContactPhase_EMGSamplingHz = NaN(4, 1);
                        NumEl_SthHopContactPhase_GRFSamplingHz = NaN(4, 1);

                        
                        PeakvGRF = NaN(4, 1);
                        PeakvGRF_FrameNumber = NaN(4, 1);
                        PeakvGRF_MoCapFrameNumber = NaN(4, 1);

                        
                        MinL5S1 = NaN(4,1);

                        MinCOGvertical = NaN(4,1);
                        
                        


                        %Set the foot, shank, thigh lengths for ATx group, Involved limb
                        if strcmp( LimbID{ a } , 'InvolvedLimb' )

                            %Set foot length for current participant
                            FootLength = ATxInvolvedFootLength( n );

                            %Set shanklength for current participant
                            ShankLength = ATxInvolvedShankLength( n );

                            %Set thigh length for current participant
                            ThighLength = ATxInvolvedThighLength( n );


                        %Set the foot, shank, thigh lengths for ATx group, Involved limb    
                        elseif strcmp( LimbID{ a } , 'NonInvolvedLimb' )

                            %Set foot length for current participant
                            FootLength = ATxNonInvolvedFootLength( n );

                            %Set shanklength for current participant
                            ShankLength = ATxNonInvolvedShankLength( n );

                            %Set thigh length for current participant
                            ThighLength = ATxNonInvolvedThighLength( n );


                        %Set the foot, shank, thigh lengths for Control group, Left limb    
                        elseif strcmp( LimbID{ a } , 'LeftLimb' )

                            %Set foot length for current participant
                            FootLength = ControlLeftFootLength_NoHC08( n );

                            %Set shanklength for current participant
                            ShankLength = ControlLeftShankLength_NoHC08( n );

                            %Set thigh length for current participant
                            ThighLength = ControlLeftThighLength_NoHC08( n );


                        %Set the foot, shank, thigh lengths for Control group, Right limb    
                        elseif strcmp( LimbID{ a } , 'RightLimb' )

                            %Set foot length for current participant
                            FootLength = ControlRightFootLength_NoHC08( n );

                            %Set shanklength for current participant
                            ShankLength = ControlRightShankLength_NoHC08( n );

                            %Set thigh length for current participant
                            ThighLength = ControlRightThighLength_NoHC08( n );

                        end




                        
     
%% Begin B For Loop - Loop Through Hopping Rates      

                        for b = 1 : numel( HoppingRate_ID)
                    
                            
                            %Create a new data structure containing data for indexing into variables. The data
                            %structure contains all data corresponding to Hopping Rate B
                            IndexingDataWithinHoppingRateB_DataStructure =  getfield( VariablesInHoppingRates_DataStructure, HoppingRate_ID{ b } );

                            %Create a new data structure containing the Visual 3D data tables for
                            %Hopping Rate B
                            DataWithinMTU_IDforOriginalDataTable_DataStructure =  getfield( VariablesInHoppingRates_forOriginalDataTable_DataStructure, HoppingRate_ID{ b } );

                            %Create a new data structure containing the data separated into individual hops, for
                            %Hopping Rate B
                            DataWithinMTU_IDforIndividualHops_DataStructure =   VariablesInHoppingRates_forIndividualHops_DataStructure;




     %% Begin Q For Loop - Loop Through Hopping Bouts                      

                            for q = 1 : numel(HoppingTrialNumber)


%% Initialize Variables For Each Hop

                                %Initialize variable to hold the length of each hop - entire hop cycle,
                                %including flight phase
                                NumEl_SthHop_MoCap= NaN( 2, 1 );

                                %Initialize varible to hold the length of the entire hop cycle, in
                                %seconds, for each hop. Includes flight phase
                                LengthofHopCycle_sec = NaN( 1 );

                                %Initialize varible to hold L5-S1 marker vertical position for each
                                %individual hop
                                L5S1VerticalPosition_IndividualHops = NaN(1,1);

                                %Initialize varible to hold CoM vertical position for each
                                %individual hop, contact phase only
                                CoMVerticalPosition_IndividualHopsContactPhase = NaN(3,numel(HoppingTrialNumber));

                                %Initialize varible to hold L5-S1 marker vertical position for each
                                %individual hop, contact phase only
                                L5S1VerticalPosition_IndividualHopsContactPhase = NaN(3,numel(HoppingTrialNumber));

                                %Initialize varible to hold length of braking phase for each
                                %individual hop
                                LengthofBrakingPhase = NaN(3,numel(HoppingTrialNumber));

                                %Initialize varible to hold length of propulsion phase for each
                                %individual hop
                                LengthofPropulsionPhase = NaN(3,numel(HoppingTrialNumber));

                                    
                                %Initialize varible to hold length of braking phase in seconds for each
                                %individual hop
                                LengthofBrakingPhase_Seconds = NaN(3,numel(HoppingTrialNumber));

                                %Initialize varible to hold length of propulsion phase in seconds for each
                                %individual hop
                                LengthofPropulsionPhase_Seconds = NaN(3,numel(HoppingTrialNumber));
                                     

                                %Initialize varible to hold the frame at which L5-S1 marker reaches its minimum vertical position for each
                                %individual hop
                                    %Use this to define when propulsion phase begins
                                 FrameofMinL5S1Position_BeginPropulsion = NaN( 2, 1 );
                                    %Use this to define when braking phase ends
                                FrameofMinL5S1Position_EndBraking = NaN( 2, 1);
                                    %Use this to define when braking phase ends, in GRF sampling Hz
                                FrameofMinL5S1Position_EndBraking_GRFSampHz = NaN( 2, 1);
                                %Use this to define when propulsion phase begins, in GRF sampling Hz
                                FrameofMinL5S1Position_BeginPropulsion_GRFSampHz = NaN( 2, 1);

                                %Initialize varible to hold the number of frames for the contact phase of
                                %each hop, in GRF sampling Hz
                                LengthofContactPhase_Frames_GRFSampHz = NaN( 1);


                                %Initialize variables to hold time series for joint reaction force
                                %variables - BRAKING phase
                                    %Ankle
                                        %X-axis
                                AnkleJRF_DistalSegment_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                AnkleJRF_DistalSegment_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                AnkleJRF_DistalSegment_Z_Braking = NaN( 1, 2 );

                                    %Knee
                                        %X-axis
                                KneeJRF_DistalSegment_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                KneeJRF_DistalSegment_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                KneeJRF_DistalSegment_Z_Braking = NaN( 1, 2 );

                                    %Hip
                                        %X-axis
                                HipJRF_DistalSegment_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                HipJRF_DistalSegment_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                HipJRF_DistalSegment_Z_Braking = NaN( 1, 2 );


                                %Initialize variables to hold time series for joint reaction force
                                %variables - PROPULSION phase
                                    %Ankle
                                        %X-axis
                                AnkleJRF_DistalSegment_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                AnkleJRF_DistalSegment_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                AnkleJRF_DistalSegment_Z_Propulsion = NaN( 1, 2 );

                                    %Knee
                                        %X-axis
                                KneeJRF_DistalSegment_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                KneeJRF_DistalSegment_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                KneeJRF_DistalSegment_Z_Propulsion = NaN( 1, 2 );

                                    %Hip
                                        %X-axis
                                HipJRF_DistalSegment_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                HipJRF_DistalSegment_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                HipJRF_DistalSegment_Z_Propulsion = NaN( 1, 2 );
                                



                                %Initialize variables to hold time series for joint linear velocity
                                %variables - BRAKING phase
                                    %Ankle
                                        %X-axis
                                AnkleJointLinearVel_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                AnkleJointLinearVel_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                AnkleJointLinearVel_Z_Braking = NaN( 1, 2 );

                                    %Knee
                                        %X-axis
                                KneeJointLinearVel_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                KneeJointLinearVel_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                KneeJointLinearVel_Z_Braking = NaN( 1, 2 );
                                
                                    %Hip
                                        %X-axis
                                HipJointLinearVel_X_Braking = NaN( 1, 2 );
                                        %Y-axis
                                HipJointLinearVel_Y_Braking = NaN( 1, 2 );
                                        %Z-axis
                                HipJointLinearVel_Z_Braking = NaN( 1, 2 );
                                

                                

                                %Initialize variables to hold time series for joint linear velocity
                                %variables - PROPULSION phase
                                    %Ankle
                                        %X-axis
                                AnkleJointLinearVel_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                AnkleJointLinearVel_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                AnkleJointLinearVel_Z_Propulsion = NaN( 1, 2 );

                                    %Knee
                                        %X-axis
                                KneeJointLinearVel_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                KneeJointLinearVel_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                KneeJointLinearVel_Z_Propulsion = NaN( 1, 2 );
                                
                                    %Hip
                                        %X-axis
                                HipJointLinearVel_X_Propulsion = NaN( 1, 2 );
                                        %Y-axis
                                HipJointLinearVel_Y_Propulsion = NaN( 1, 2 );
                                        %Z-axis
                                HipJointLinearVel_Z_Propulsion = NaN( 1, 2 );



                                 %Initialize variables to hold time series for ankle power variables -
                                 %braking phase
                                AnkleActivePower_Foot_Braking = NaN( 1, 2 );
                                AnkleActivePower_Shank_Braking = NaN( 1, 2 );
                                AnklePassivePower_Foot_Braking = NaN( 1, 2 );
                                AnklePassivePower_Shank_Braking = NaN( 1, 2 );
                                AnkleActiveEnergyTransfer_Braking = NaN( 1, 2 );
                                TotalAnkleEnergyTransfer_Braking = NaN( 1, 2 );
                                AnkleJointPowerScalar_Calculated_Braking = NaN( 1, 2 );
                            
                                %Initialize variables to hold time series for ankle power variables -
                                 %propulsion phase
                                AnkleActivePower_Foot_Propulsion = NaN( 1, 2 );
                                AnkleActivePower_Shank_Propulsion = NaN( 1, 2 );
                                AnklePassivePower_Foot_Propulsion = NaN( 1, 2 );
                                AnklePassivePower_Shank_Propulsion = NaN( 1, 2 );
                                AnkleActiveEnergyTransfer_Propulsion = NaN( 1, 2 );
                                TotalAnkleEnergyTransfer_Propulsion = NaN( 1, 2 );
                                AnkleJointPowerScalar_Calculated_Propulsion = NaN( 1, 2 );
                            
                                %Initialize variables to hold values for ankle work variables - braking
                                %phase
                                AnkleActiveSegmentWork_Foot_Braking = NaN( 2, 1 );
                                AnkleActiveSegmentWork_Shank_Braking = NaN( 2, 1 );
                                AnklePassiveSegmentWork_Foot_Braking = NaN( 2, 1 );
                                AnklePassiveSegmentWork_Shank_Braking = NaN( 2, 1 );
                                AnkleActiveSegmentWorkTransfer_Braking = NaN( 2, 1 );
                                AnkleTotalWorkTransfer_Braking = NaN( 2, 1 );
                                AnkleJointWorkScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for ankle work variables -
                                %propulsion phase
                                AnkleActiveSegmentWork_Foot_Propulsion = NaN( 2, 1 );
                                AnkleActiveSegmentWork_Shank_Propulsion = NaN( 2, 1 );
                                AnklePassiveSegmentWork_Foot_Propulsion = NaN( 2, 1 );
                                AnklePassiveSegmentWork_Shank_Propulsion = NaN( 2, 1 );
                                AnkleActiveSegmentWorkTransfer_Propulsion = NaN( 2, 1 );
                                AnkleTotalWorkTransfer_Propulsion = NaN( 2, 1 );
                                AnkleJointWorkScalar_Propulsion = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for ankle average power variables -
                                %braking phase
                                AnkleAverageActivePower_Foot_Braking = NaN( 2, 1 );
                                AnkleAverageActivePower_Shank_Braking = NaN( 2, 1 );
                                AnkleAveragePassivePower_Foot_Braking = NaN( 2, 1 );
                                AnkleAveragePassivePower_Shank_Braking = NaN( 2, 1 );
                                AnkleAverageActiveEnergyTransfer_Braking = NaN( 2, 1 );
                                AnkleAverageTotalEnergyTransfer_Braking = NaN( 2, 1 );
                                AnkleAverageJointPowerScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for ankle average power variables -
                                %propulsion phase
                                AnkleAverageActivePower_Foot_Propulsion = NaN( 2, 1 );
                                AnkleAverageActivePower_Shank_Propulsion = NaN( 2, 1 );
                                AnkleAveragePassivePower_Foot_Propulsion = NaN( 2, 1 );
                                AnkleAveragePassivePower_Shank_Propulsion = NaN( 2, 1 );
                                AnkleAverageActiveEnergyTransfer_Propulsion = NaN( 2, 1 );
                                AnkleAverageTotalEnergyTransfer_Propulsion = NaN( 2, 1 );
                                AnkleAverageJointPowerScalar_Propulsion = NaN( 2, 1 );
                            
                                
                            
                            
                            
                                %Initialize variables to hold time series for knee power variables -
                                 %braking phase
                                KneeActivePower_Thigh_Braking = NaN( 1, 2 );
                                KneeActivePower_Shank_Braking = NaN( 1, 2 );
                                KneePassivePower_Thigh_Braking = NaN( 1, 2 );
                                KneePassivePower_Shank_Braking = NaN( 1, 2 );
                                KneeActiveEnergyTransfer_Braking = NaN( 1, 2 );
                                TotalKneeEnergyTransfer_Braking = NaN( 1, 2 );
                                KneeJointPowerScalar_Calculated_Braking = NaN( 1, 2 );
                            
                                %Initialize variables to hold time series for knee power variables -
                                 %propulsion phase
                                KneeActivePower_Thigh_Propulsion = NaN( 1, 2 );
                                KneeActivePower_Shank_Propulsion = NaN( 1, 2 );
                                KneePassivePower_Thigh_Propulsion = NaN( 1, 2 );
                                KneePassivePower_Shank_Propulsion = NaN( 1, 2 );
                                KneeActiveEnergyTransfer_Propulsion = NaN( 1, 2 );
                                TotalKneeEnergyTransfer_Propulsion = NaN( 1, 2 );
                                KneeJointPowerScalar_Calculated_Propulsion = NaN( 1, 2 );
                            
                                
                                %Initialize variables to hold values for knee work variables - braking
                                %phase
                                KneeActiveSegmentWork_Thigh_Braking = NaN( 2, 1 );
                                KneeActiveSegmentWork_Shank_Braking = NaN( 2, 1 );
                                KneePassiveSegmentWork_Thigh_Braking = NaN( 2, 1 );
                                KneePassiveSegmentWork_Shank_Braking = NaN( 2, 1 );
                                KneeActiveSegmentWorkTransfer_Braking = NaN( 2, 1 );
                                KneeTotalWorkTransfer_Braking = NaN( 2, 1 );
                                KneeJointWorkScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for knee work variables - propulsion
                                %phase
                                KneeActiveSegmentWork_Thigh_Propulsion = NaN( 2, 1 );
                                KneeActiveSegmentWork_Shank_Propulsion = NaN( 2, 1 );
                                KneePassiveSegmentWork_Thigh_Propulsion = NaN( 2, 1 );
                                KneePassiveSegmentWork_Shank_Propulsion = NaN( 2, 1 );
                                KneeActiveSegmentWorkTransfer_Propulsion = NaN( 2, 1 );
                                KneeTotalWorkTransfer_Propulsion = NaN( 2, 1 );
                                KneeJointWorkScalar_Propulsion = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for knee average power variables -
                                %braking phase
                                KneeAverageActivePower_Thigh_Braking = NaN( 2, 1 );
                                KneeAverageActivePower_Shank_Braking = NaN( 2, 1 );
                                KneeAveragePassivePower_Thigh_Braking = NaN( 2, 1 );
                                KneeAveragePassivePower_Shank_Braking = NaN( 2, 1 );
                                KneeAverageActiveEnergyTransfer_Braking = NaN( 2, 1 );
                                KneeAverageTotalEnergyTransfer_Braking = NaN( 2, 1 );
                                KneeAverageJointPowerScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for knee average power variables -
                                %propulsion phase
                                KneeAverageActivePower_Thigh_Propulsion = NaN( 2, 1 );
                                KneeAverageActivePower_Shank_Propulsion = NaN( 2, 1 );
                                KneeAveragePassivePower_Thigh_Propulsion = NaN( 2, 1 );
                                KneeAveragePassivePower_Shank_Propulsion = NaN( 2, 1 );
                                KneeAverageActiveEnergyTransfer_Propulsion = NaN( 2, 1 );
                                KneeAverageTotalEnergyTransfer_Propulsion = NaN( 2, 1 );
                                KneeAverageJointPowerScalar_Propulsion = NaN( 2, 1 );
                            
                            
                            
                            
                                %Initialize variables to hold time series for hip power variables -
                                 %braking phase
                                HipActivePower_Thigh_Braking = NaN( 1, 2 );
                                HipActivePower_Pelvis_Braking = NaN( 1, 2 );
                                HipPassivePower_Thigh_Braking = NaN( 1, 2 );
                                HipPassivePower_Pelvis_Braking = NaN( 1, 2 );
                                HipActiveEnergyTransfer_Braking = NaN( 1, 2 );
                                TotalHipEnergyTransfer_Braking = NaN( 1, 2 );
                                HipJointPowerScalar_Calculated_Braking = NaN( 1, 2 );
                            
                                %Initialize variables to hold time series for hip power variables -
                                 %propulsion phase
                                HipActivePower_Thigh_Propulsion = NaN( 1, 2 );
                                HipActivePower_Pelvis_Propulsion = NaN( 1, 2 );
                                HipPassivePower_Thigh_Propulsion = NaN( 1, 2 );
                                HipPassivePower_Pelvis_Propulsion = NaN( 1, 2 );
                                HipActiveEnergyTransfer_Propulsion = NaN( 1, 2 );
                                TotalHipEnergyTransfer_Propulsion = NaN( 1, 2 );
                                HipJointPowerScalar_Calculated_Propulsion = NaN( 1, 2 );
                            
                                %Initialize variables to hold values for hip work variables - braking
                                %phase
                                HipActiveSegmentWork_Thigh_Braking = NaN( 2, 1 );
                                HipActiveSegmentWork_Pelvis_Braking = NaN( 2, 1 );
                                HipPassiveSegmentWork_Thigh_Braking = NaN( 2, 1 );
                                HipPassiveSegmentWork_Pelvis_Braking = NaN( 2, 1 );
                                HipActiveSegmentWorkTransfer_Braking = NaN( 2, 1 );
                                HipTotalWorkTransfer_Braking = NaN( 2, 1 );
                                HipJointWorkScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for hip work variables - propulsion
                                %phase
                                HipActiveSegmentWork_Thigh_Propulsion = NaN( 2, 1 );
                                HipActiveSegmentWork_Pelvis_Propulsion = NaN( 2, 1 );
                                HipPassiveSegmentWork_Thigh_Propulsion = NaN( 2, 1 );
                                HipPassiveSegmentWork_Pelvis_Propulsion = NaN( 2, 1 );
                                HipActiveSegmentWorkTransfer_Propulsion = NaN( 2, 1 );
                                HipTotalWorkTransfer_Propulsion = NaN( 2, 1 );
                                HipJointWorkScalar_Propulsion = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for hip average power variables -
                                %braking phase
                                HipAverageActivePower_Thigh_Braking = NaN( 2, 1 );
                                HipAverageActivePower_Pelvis_Braking = NaN( 2, 1 );
                                HipAveragePassivePower_Thigh_Braking = NaN( 2, 1 );
                                HipAveragePassivePower_Pelvis_Braking = NaN( 2, 1 );
                                HipAverageActiveEnergyTransfer_Braking = NaN( 2, 1 );
                                HipAverageTotalEnergyTransfer_Braking = NaN( 2, 1 );
                                HipAverageJointPowerScalar_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for hip average power variables -
                                %propulsion phase
                                HipAverageActivePower_Thigh_Propulsion = NaN( 2, 1 );
                                HipAverageActivePower_Pelvis_Propulsion = NaN( 2, 1 );
                                HipAveragePassivePower_Thigh_Propulsion = NaN( 2, 1 );
                                HipAveragePassivePower_Pelvis_Propulsion = NaN( 2, 1 );
                                HipAverageActiveEnergyTransfer_Propulsion = NaN( 2, 1 );
                                HipAverageTotalEnergyTransfer_Propulsion = NaN( 2, 1 );
                                HipAverageJointPowerScalar_Propulsion = NaN( 2, 1 );
                            



                                
                                
                                %Initialize variables to hold time series for segment total power variables -
                                %braking phase
                                TotalFootEnergy_Braking = NaN( 2, 1 );
                                TotalShankEnergy_Braking = NaN( 2, 1 );
                                TotalThighEnergy_Braking = NaN( 2, 1 );
                                TotalPelvisEnergy_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold time series for segment total power variables -
                                %propulsion phase
                                TotalFootEnergy_Propulsion = NaN( 2, 1 );
                                TotalShankEnergy_Propulsion = NaN( 2, 1 );
                                TotalThighEnergy_Propulsion = NaN( 2, 1 );
                                TotalPelvisEnergy_Propulsion = NaN( 2, 1 );


                                %Initialize variables to hold initial power for each segment - power at
                                %beginning of braking and propulsion phases
                                    %Braking phase
                                        %Foot
                                InitialFootEnergy_Braking = NaN( 2, 1 );
                                        %Shank
                                InitialShankEnergy_Braking = NaN( 2, 1 );
                                        %Thigh
                                InitialThighEnergy_Braking = NaN( 2, 1 );
                                        %Pelvis
                                InitialPelvisEnergy_Braking = NaN( 2, 1 );

                                    %Propulsion phase
                                        %Foot
                                InitialFootEnergy_Propulsion = NaN( 2, 1 );
                                        %Shank
                                InitialShankEnergy_Propulsion = NaN( 2, 1 );
                                        %Thigh
                                InitialThighEnergy_Propulsion = NaN( 2, 1 );
                                        %Pelvis
                                InitialPelvisEnergy_Propulsion = NaN( 2, 1 );
                            
                            
                                %Initialize variables to hold values for segment average power variables -
                                %braking phase
                                FootAverageEnergy_Braking = NaN( 2, 1 );
                                ShankAverageEnergy_Braking = NaN( 2, 1 );
                                ThighAverageEnergy_Braking = NaN( 2, 1 );
                                PelvisAverageEnergy_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for segment average power variables -
                                %propulsion phase
                                FootAverageEnergy_Propulsion = NaN( 2, 1 );
                                ShankAverageEnergy_Propulsion = NaN( 2, 1 );
                                ThighAverageEnergy_Propulsion = NaN( 2, 1 );
                                PelvisAverageEnergy_Propulsion = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for segment work variables -
                                %braking phase
                                FootWork_Braking = NaN( 2, 1 );
                                ShankWork_Braking = NaN( 2, 1 );
                                ThighWork_Braking = NaN( 2, 1 );
                                PelvisWork_Braking = NaN( 2, 1 );
                            
                                %Initialize variables to hold values for segment work variables -
                                %propulsion phase
                                FootWork_Propulsion = NaN( 2, 1 );
                                ShankWork_Propulsion = NaN( 2, 1 );
                                ThighWork_Propulsion = NaN( 2, 1 );
                                PelvisWork_Propulsion = NaN( 2, 1 );


                            
                                %Initialize variables to hold peak joint reaction force - BRAKING phase
                                    %Ankle - X, Y, then Z-axes
                                PeakAnkleJRF_X_Braking = NaN( 2, 1 );
                                PeakAnkleJRF_Y_Braking = NaN( 2, 1 );
                                PeakAnkleJRF_Z_Braking = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                                PeakKneeJRF_X_Braking = NaN( 2, 1 );
                                PeakKneeJRF_Y_Braking = NaN( 2, 1 );
                                PeakKneeJRF_Z_Braking = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                                PeakHipJRF_X_Braking = NaN( 2, 1 );
                                PeakHipJRF_Y_Braking = NaN( 2, 1 );
                                PeakHipJRF_Z_Braking = NaN( 2, 1 );


                            
                                %Initialize variables to hold peak joint reaction force - PROPULSION phase
                                    %Ankle - X, Y, then Z-axes
                                PeakAnkleJRF_X_Propulsion = NaN( 2, 1 );
                                PeakAnkleJRF_Y_Propulsion = NaN( 2, 1 );
                                PeakAnkleJRF_Z_Propulsion = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                                PeakKneeJRF_X_Propulsion = NaN( 2, 1 );
                                PeakKneeJRF_Y_Propulsion = NaN( 2, 1 );
                                PeakKneeJRF_Z_Propulsion = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                                PeakHipJRF_X_Propulsion = NaN( 2, 1 );
                                PeakHipJRF_Y_Propulsion = NaN( 2, 1 );
                                PeakHipJRF_Z_Propulsion = NaN( 2, 1 );




                                %Initialize variables to hold peak joint linear velocity - BRAKING phase
                                    %Ankle - X, Y, then Z-axes
                               PeakAnkleJointLinearVel_X_Braking = NaN( 2, 1 );
                               PeakAnkleJointLinearVel_Y_Braking = NaN( 2, 1 );
                               PeakAnkleJointLinearVel_Z_Braking = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               PeakKneeJointLinearVel_X_Braking = NaN( 2, 1 );
                               PeakKneeJointLinearVel_Y_Braking = NaN( 2, 1 );
                               PeakKneeJointLinearVel_Z_Braking = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               PeakHipJointLinearVel_X_Braking = NaN( 2, 1 );
                               PeakHipJointLinearVel_Y_Braking = NaN( 2, 1 );
                               PeakHipJointLinearVel_Z_Braking = NaN( 2, 1 );




                                %Initialize variables to hold peak joint linear velocity - PROPULSION phase
                                    %Ankle - X, Y, then Z-axes
                               PeakAnkleJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               PeakAnkleJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               PeakAnkleJointLinearVel_Z_Propulsion = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               PeakKneeJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               PeakKneeJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               PeakKneeJointLinearVel_Z_Propulsion = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               PeakHipJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               PeakHipJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               PeakHipJointLinearVel_Z_Propulsion = NaN( 2, 1 );




                               %Initialize variables to hold average joint reaction force - BRAKING phase
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJRF_X_Braking = NaN( 2, 1 );
                               AverageAnkleJRF_Y_Braking = NaN( 2, 1 );
                               AverageAnkleJRF_Z_Braking = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJRF_X_Braking = NaN( 2, 1 );
                               AverageKneeJRF_Y_Braking = NaN( 2, 1 );
                               AverageKneeJRF_Z_Braking = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJRF_X_Braking = NaN( 2, 1 );
                               AverageHipJRF_Y_Braking = NaN( 2, 1 );
                               AverageHipJRF_Z_Braking = NaN( 2, 1 );




                               %Initialize variables to hold average joint reaction force - PROPULSION phase
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJRF_X_Propulsion = NaN( 2, 1 );
                               AverageAnkleJRF_Y_Propulsion = NaN( 2, 1 );
                               AverageAnkleJRF_Z_Propulsion = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJRF_X_Propulsion = NaN( 2, 1 );
                               AverageKneeJRF_Y_Propulsion = NaN( 2, 1 );
                               AverageKneeJRF_Z_Propulsion = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJRF_X_Propulsion = NaN( 2, 1 );
                               AverageHipJRF_Y_Propulsion = NaN( 2, 1 );
                               AverageHipJRF_Z_Propulsion = NaN( 2, 1 );
                               
                               
                               
                               %Initialize variables to hold average joint linear velocity - BRAKING phase
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJointLinearVel_X_Braking = NaN( 2, 1 );
                               AverageAnkleJointLinearVel_Y_Braking = NaN( 2, 1 );
                               AverageAnkleJointLinearVel_Z_Braking = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJointLinearVel_X_Braking = NaN( 2, 1 );
                               AverageKneeJointLinearVel_Y_Braking = NaN( 2, 1 );
                               AverageKneeJointLinearVel_Z_Braking = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJointLinearVel_X_Braking = NaN( 2, 1 );
                               AverageHipJointLinearVel_Y_Braking = NaN( 2, 1 );
                               AverageHipJointLinearVel_Z_Braking = NaN( 2, 1 );
                               
                               
                               
                               %Initialize variables to hold average joint linear velocity - PROPULSION phase
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               AverageAnkleJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               AverageAnkleJointLinearVel_Z_Propulsion = NaN( 2, 1 );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               AverageKneeJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               AverageKneeJointLinearVel_Z_Propulsion = NaN( 2, 1 );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJointLinearVel_X_Propulsion = NaN( 2, 1 );
                               AverageHipJointLinearVel_Y_Propulsion = NaN( 2, 1 );
                               AverageHipJointLinearVel_Z_Propulsion = NaN( 2, 1 );


                                
%                                 
%                                     %Initialize variables to hold marker coordinates - entire contact phase
% 
%                                             %Left greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         LGTMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LGTMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LGTMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );
%                                         
%                                             %Right greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         RGTMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         RGTMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         RGTMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );
%                                         
%                                             %Left medial femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         MeFECMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         MeFECMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         MeFECMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );
%                                         
%                                             %Left lateral femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         LatFECMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LatFECMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LatFECMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );
%                                         
%                                             %Left medial malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         MeMalMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         MeMalMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         MeMalMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );
%                                         
%                                             %Left lateral malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                         LatMalMarker_X_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LatMalMarker_Y_IndividualHopsContactPhase= NaN(3, 2 );
%                                         LatMalMarker_Z_IndividualHopsContactPhase= NaN(3, 2 );


                                        %Initialize variables to hold joint torque for energy transfer - entire contact phase
                                            %Ankle torque - Sagittal, then Frontal, then Transverse planes.
                                        AnkleTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleTorque_Frontal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleTorque_Transverse_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                            %Knee torque - Sagittal, then Frontal, then Transverse planes.
                                        KneeTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeTorque_Frontal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeTorque_Transverse_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                            %Hip torque - Sagittal, then Frontal, then Transverse planes.
                                        HipTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipTorque_Frontal_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipTorque_Transverse_EnergyFlow_IndividualHopsContactPhase= NaN(3, 2 );


                                        %Initialize variables to hold segmenl angles - entire contact phase
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                        FootAngleSagittal_IndividualHopsContactPhase= NaN(3, 2 );
                                        FootAngleFrontal_IndividualHopsContactPhase= NaN(3, 2 );
                                        FootAngleTransverse_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                        ShankAngleSagittal_IndividualHopsContactPhase= NaN(3, 2 );
                                        ShankAngleFrontal_IndividualHopsContactPhase= NaN(3, 2 );
                                        ShankAngleTransverse_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                        ThighAngleSagittal_IndividualHopsContactPhase= NaN(3, 2 );
                                        ThighAngleFrontal_IndividualHopsContactPhase= NaN(3, 2 );
                                        ThighAngleTransverse_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                        PelvisAngleSagittal_IndividualHopsContactPhase= NaN(3, 2 );
                                        PelvisAngleFrontal_IndividualHopsContactPhase= NaN(3, 2 );
                                        PelvisAngleTransverse_IndividualHopsContactPhase= NaN(3, 2 );


                                         %Initialize variables to hold segmental angular velocity, for
                                        %energy flow - entire contact phase
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                        FootAngVelSagittal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        FootAngVelFrontal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        FootAngVelTransverse_EFlow_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                        ShankAngVelSagittal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        ShankAngVelFrontal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        ShankAngVelTransverse_EFlow_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                        ThighAngVelSagittal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        ThighAngVelFrontal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        ThighAngVelTransverse_EFlow_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                        PelvisAngVelSagittal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        PelvisAngVelFrontal_EFlow_IndividualHopsContactPhase= NaN(3, 2 );
                                        PelvisAngVelTransverse_EFlow_IndividualHopsContactPhase= NaN(3, 2 );



                                        %Initialize variables to hold joint reaction force - entire contact phase
                                            %Ankle JRF - Sagittal, then Frontal, then Transverse planes.
                                                %Next 3 lines are for the distal segment (foot).
                                        AnkleJRF_DistalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                                %Next 3 lines are for the proximal segment (shank). N
                                        AnkleJRF_ProximalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJRF_ProximalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJRF_ProximalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                        
                                        
                                            %Knee JRF - Sagittal, then Frontal, then Transverse planes.
                                                %Next 3 lines are for the distal segment (shank).
                                        KneeJRF_DistalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeJRF_DistalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeJRF_DistalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                                %Next 3 lines are for the proximal segment (thigh). 
                                        KneeJRF_ProximalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeJRF_ProximalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        KneeJRF_ProximalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );



                                            %Hip JRF - Sagittal, then Frontal, then Transverse planes.
                                                %Next 3 lines are for the distal segment (thigh).
                                        HipJRF_DistalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipJRF_DistalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipJRF_DistalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );
                                        
                                                %Next 3 lines are for the proximal segment (pelvis). 
                                        HipJRF_ProximalSegment_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipJRF_ProximalSegment_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        HipJRF_ProximalSegment_Z_IndividualHopsContactPhase= NaN(3, 2 );

                                        %Initialize variables to hold joint center coordinates
                                            %Ankle - X, Y, Z coordinates
                                         AnkleJtCenter_X_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJtCenter_Y_IndividualHopsContactPhase= NaN(3, 2 );
                                        AnkleJtCenter_Z_IndividualHopsContactPhase= NaN(3, 2 );

                                            %Knee - X, Y, Z coordinates
                                        KneeJtCenter_X_IndividualHopsContactPhase = NaN(3, 2 );
                                        KneeJtCenter_Y_IndividualHopsContactPhase = NaN(3, 2 );
                                        KneeJtCenter_Z_IndividualHopsContactPhase = NaN(3, 2 );

                                            %Hip - X, Y, Z coordinates
                                        HipJtCenter_X_IndividualHopsContactPhase = NaN(3, 2 );
                                        HipJtCenter_Y_IndividualHopsContactPhase = NaN(3, 2 );
                                        HipJtCenter_Z_IndividualHopsContactPhase = NaN(3, 2 );


                                        %Initialize variables to hold segment power
                                            %Foot active power from the ankle jiont
                                        AnkleActivePower_Foot_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Shank active power from the ankle joint
                                        AnkleActivePower_Shank_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Foot passive power from the ankle joint
                                        AnklePassivePower_Foot_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Shank passive power from the ankle joint
                                        AnklePassivePower_Shank_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Ankle joint power scalar
                                        AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase = NaN(3, 2 );
                                             %Ankle joint power scalar - from V3D
                                        AnklePowerScalar_V3D_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Shank active power from the knee joint
                                        KneeActivePower_Shank_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Thigh active power from the knee joint
                                        KneeActivePower_Thigh_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Shank passive power from the knee joint
                                        KneePassivePower_Shank_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Thigh passive power from the knee joint
                                        KneePassivePower_Thigh_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Kneejoint power scalar
                                        KneeJointPowerScalar_Calculated_IndividualHopsContactPhase = NaN(3, 2 );
                                             %Knee joint power scalar - from V3D
                                        KneePowerScalar_V3D_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Thigh active power from the hip joint
                                        HipActivePower_Thigh_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Pelvis active power from the hip joint
                                        HipActivePower_Pelvis_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Thigh passive power from the hip joint
                                        HipPassivePower_Thigh_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Pelvis passive power from the hip joint
                                        HipPassivePower_Pelvis_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Hip joint power scalar - calculated
                                        HipJointPowerScalar_Calculated_IndividualHopsContactPhase = NaN(3, 2 );
                                             %Hip joint power scalar - from V3D
                                        HipPowerScalar_V3D_IndividualHopsContactPhase = NaN(3, 2 );


                                        %Initialize variables to hold joint linear velocity vectors for
                                        %the contact phase
                                            %Ankle - X, Y, Z directions
                                        AnkleJointLinearVel_X_IndividualHopsContactPhase = NaN(3, 2 );
                                        AnkleJointLinearVel_Y_IndividualHopsContactPhase = NaN(3, 2 );
                                        AnkleJointLinearVel_Z_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Knee - X, Y, Z directions
                                        KneeJointLinearVel_X_IndividualHopsContactPhase = NaN(3, 2 );
                                        KneeJointLinearVel_Y_IndividualHopsContactPhase = NaN(3, 2 );
                                        KneeJointLinearVel_Z_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Hip - X, Y, Z directions
                                        HipJointLinearVel_X_IndividualHopsContactPhase = NaN(3, 2 );
                                        HipJointLinearVel_Y_IndividualHopsContactPhase = NaN(3, 2 );
                                        HipJointLinearVel_Z_IndividualHopsContactPhase = NaN(3, 2 );


                                        %Initialize variables to hold total segment energy vectors for
                                        %the contact phase
                                            %Foot
                                        TotalFootEnergy_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Shank
                                        TotalShankEnergy_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Thigh
                                        TotalThighEnergy_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Pelvis
                                        TotalPelvisEnergy_IndividualHopsContactPhase = NaN(3, 2 );

                                        %Initialize variables to hold joint energy transfer vectors for
                                        %the contact phase
                                            %Ankle active energy transfer
                                        AnkleActiveEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Ankle total energy transfer
                                        TotalAnkleEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Knee active energy transfer
                                        KneeActiveEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Knee total energy transfer
                                        TotalKneeEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Hip active energy transfer
                                        HipActiveEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );
                                            %Hip total energy transfer
                                        TotalHipEnergyTransfer_IndividualHopsContactPhase = NaN(3, 2 );


                                        %Initialize variables to hold segment angles to horizontal and segment
                                        %vertical lengths
                                            %Foot angle to horizontal and vertical length
                                        FootAngletoHorizontal = NaN(3, 2 );
                                        FootVerticalLength = NaN(3, 2 );
                                            %Shank angle to horizontal and vertical length
                                        ShankAngletoHorizontal = NaN(3, 2 );
                                        ShankVerticalLength = NaN(3, 2 );
                                            %Thigh angle to horizontal and vertical length
                                        ThighAngletoHorizontal = NaN(3, 2 );
                                        ThighVerticalLength = NaN(3, 2 );


                                    %Initialize vector to hold vertical limb length time series
                                    LimbVerticalLength_IndividualHopsContactPhase = NaN(3, 2 );

                                    %Initialize vector to hold limb stiffness time series
                                        %Contact Phase
                                    LimbStiffness_IndividualHopsContactPhase = NaN(3, 2 );
                                        %Braking Phase
                                    LimbStiffness_Braking = NaN(3, 2 );
                                        %Propulsion Phase
                                    LimbStiffness_Propulsion = NaN(3, 2 );


                                    %Initialize variable to hold peak and average limb stiffness
                                        %Peak Limb Stiffness
                                            %Contact Phase
                                    PeakLimbStiffness_ContactPhase = NaN( 2, 1 );
                                            %Braking Phase
                                    PeakLimbStiffness_BrakingPhase = NaN( 2, 1 );
                                            %Propulsion Phase
                                    PeakLimbStiffness_PropulsionPhase = NaN( 2, 1 );
                                        %Average Limb Stiffness
                                            %Contact Phase
                                    AverageLimbStiffness_ContactPhase = NaN( 2, 1 );
                                            %Braking Phase
                                    AverageLimbStiffness_BrakingPhase = NaN( 2, 1 );
                                            %Propulsion Phase
                                    AverageLimbStiffness_PropulsionPhase = NaN( 2, 1 );
                                 

                                %Create variables containing the tables for the pth trial
                                HoppingTrialP_OriginalDataTable = getfield(DataWithinMTU_IDforOriginalDataTable_DataStructure,HoppingTrialNumber{ q });
                                %LLimb_HoppingTrialP = getfield(LLimb_HoppingTrialNumbers,HoppingTrialNumber{p});



                             
                                  
%% Extract GContactEnd and GContactBegin                                 

                                  %Extract the frame number corresponding to the beginning of ground
                                  %contact - this was stored in the data structure. The frames we
                                  %are extracting are in the motion capture sampling Hz
                                  GContactBegin_MoCapFrameNumbers = IndexingDataWithinHoppingRateB_DataStructure.BeginGroundContact_MoCapFrames;
                                  
                                %Extract the frame number corresponding to the end of ground
                                %contact - this was stored in the data structure. The frames we
                                %are extracting are in the motion capture sampling Hz
                                GContactEnd_forContactPhase_MoCapFrameNumbers = IndexingDataWithinHoppingRateB_DataStructure.EndGroundContact_forContactPhase_MoCapFrames;
                                  
                                  
                                  
                                  
                                %Find the first data point of each hop, for the entire hop
                                %cycle. We classify beginning of hop cycle as first frame of
                                %flight phase. Use tranpose because the vector is currently a row
                                %vector, but our indexing requires a column vector
                                FirstDataPoint_SthHop_MoCapSamplingHz = IndexingDataWithinHoppingRateB_DataStructure.FirstDataPointofSthHop_Truncated_MoCapSamplingHz';



 
                                 %Extract the frame number corresponding to the beginning of ground
                                  %contact - this was stored in the data structure. The frames we
                                  %are extracting are in the motion capture sampling Hz
                                  GContactBegin_GRFFrameNumbers = IndexingDataWithinHoppingRateB_DataStructure.BeginGroundContact_GRFFrames;
                                  
                                %Extract the frame number corresponding to the end of ground
                                %contact - this was stored in the data structure. The frames we
                                %are extracting are in the motion capture sampling Hz
                                GContactEnd_forContactPhase_GRFFrameNumbers = IndexingDataWithinHoppingRateB_DataStructure.EndGroundContact_forContactPhase_GRFFrames;
                                  
                                
                                %Extract the frame number corresponding to the end of ground
                                %contact, for the beginning of flight phase - this was stored in the data structure. The frames we
                                %are extracting are in the motion capture sampling Hz
                                GContactEnd_forFlightPhase_GRFFrameNumbers = IndexingDataWithinHoppingRateB_DataStructure.EndGroundContact_forFlightPhase_GRFFrames;
                                
                                
                                

         %% BEGIN S For Loop for Running Through Each Individual Hop                         
                                %Run loop once for each element within the Qth row of RLimb_GContactBegin_Frames
                                for s = 1 : numel( GContactBegin_MoCapFrameNumbers(:,q) )


                                    

                                    %Create a vector containing all Frames for the Sth hop, from the
                                    %beginning of one flight phase and the beginning of the next. Subtract
                                    %one from the GContactEnd frame number since the frame number is the
                                    %first frame of flight phase. Want to end at the last frame of contact
                                    %phase
                                    AllFrames_SthHop_MoCap = FirstDataPoint_SthHop_MoCapSamplingHz(s,q) : (GContactEnd_forContactPhase_MoCapFrameNumbers(s,q)-1);

                                    %The last data point of each hop is the last frame of the ground
                                    %contact phase. Subtract 1 from GContactEnd since GContactEnd is
                                    %actually the first frame of the flight phase
                                    LastDataPoint_SthHop_MoCapSamplingHz(s,q) = (GContactEnd_forContactPhase_MoCapFrameNumbers(s,q)-1);
                                    

                                    %Find the number of elements of the Sth hop.
                                    NumEl_SthHop_MoCap( s ) = numel(AllFrames_SthHop_MoCap);


                                    %Create a vector containing all Frames of the contact phase for the Sth hop Subtract
                                    %one from the GContactEnd frame number since the frame number is the
                                    %first frame of flight phase. Want to end at the last frame of contact
                                    %phase
                                    AllFrames_SthHopContactPhase_GRF = GContactBegin_GRFFrameNumbers( s, q ) : ( GContactEnd_forContactPhase_GRFFrameNumbers( s, q ) - 1 );


                                    %Find the length of the contact phase in frames, GRF sampling rate
                                    LengthofContactPhase_Frames_GRFSampHz( s ) = numel( AllFrames_SthHopContactPhase_GRF );



                                    %Length of entire hop
                                    LengthofHopCycle_sec( s ) = numel( GContactEnd_forFlightPhase_GRFFrameNumbers( s ) : (GContactEnd_forContactPhase_GRFFrameNumbers(s,q)-1) ) ./ GRFSampHz;


                                    %We'll start pulling out variables from the Visual 3D tables.
                                    %The joints are labeled LAnkle or Rankle - will need to use an
                                    %If statement to make sure we pull out the correct limb
                                     if strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')



                                        
                                        %Split the L5-S1 vertical position data into individual hops
                                         L5S1VerticalPosition_IndividualHops(1:NumEl_SthHop_MoCap( s ),s) =...
                                            HoppingTrialP_OriginalDataTable.L5S1_2(AllFrames_SthHop_MoCap);

                                        %%Create variables containing the kinematics and kinetics for ground
                                        %%contact phase ONLY
                                        AllFrames_SthHopContactPhase_MoCap = GContactBegin_MoCapFrameNumbers(s,q):(GContactEnd_forContactPhase_MoCapFrameNumbers(s,q)-1);

                                        %Find the number of elements of the Sth hop contact phase.
                                        NumEl_SthHopContactPhase_MoCapSamplingHz(s,q) = numel(AllFrames_SthHopContactPhase_MoCap);



%% LEFT LIMB - Split Markers into the contact phase of individual hops                                        
                                        
                                        %L5-S1 vertical position
                                        L5S1VerticalPosition_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) =...
                                            HoppingTrialP_OriginalDataTable.L5S1_2(AllFrames_SthHopContactPhase_MoCap);


%                                           %Left greater trochanter is missing for HC11, HC25. Therefore, if we are NOT processing HC11 or HC25, can pull out the LGT marker. 
%                                           %If we ARE processing HC11 or HC25, leave LGT marker as NaNs
%                                           if ~strcmp( ParticipantList{ n }, 'HC11' ) && ~strcmp( ParticipantList{ n }, 'HC25' )
%     
%                                             %Left greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             LGTMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_1(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_2(AllFrames_SthHopContactPhase_MoCap);
%     
%                                           end
% 
% 
%                                           %Left medial femoral epicondyle is missing for HC20. Therefore,
%                                           %if we are NOT processing HC20, can pull out the LMeFEC marker.
%                                           %If we ARE processing HC20, leave LMeFEC
%                                           %marker as NaNs
%                                           if ~strcmp( ParticipantList{ n }, 'HC20' ) 
%                                         
%                                                 %Left medial femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                                 %positions
%                                                 MeFECMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeFEC(AllFrames_SthHopContactPhase_MoCap);
%                                                 MeFECMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeFEC_1(AllFrames_SthHopContactPhase_MoCap);
%                                                 MeFECMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeFEC_2(AllFrames_SthHopContactPhase_MoCap);
% 
%                                           end
% 
%                                           
%                                           %HC20 is missing left medial malleolus ONLY for 2.33 Hz Hopping is missing for HC20.
%                                           %If we ARE processing 2.33 Hz for HC20, leave LMeMAL
%                                           %marker as NaNs
%                                           if strcmp( ParticipantList{ n }, 'HC20' )  && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz' )
%                                         
%                                             %Left medial malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             MeMalMarker_X_IndividualHopsContactPhase = MeMalMarker_X_IndividualHopsContactPhase;
%                                             MeMalMarker_Y_IndividualHopsContactPhase = MeMalMarker_Y_IndividualHopsContactPhase;
%                                             MeMalMarker_Z_IndividualHopsContactPhase = MeMalMarker_Z_IndividualHopsContactPhase;
% 
%                                           %If we are NOT processing 2.33 Hz for HC20, can pull out the LMeMAL marker.
%                                           else
% 
%                                         
%                                             %Left medial malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             MeMalMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeMAL(AllFrames_SthHopContactPhase_MoCap);
%                                             MeMalMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeMAL_1(AllFrames_SthHopContactPhase_MoCap);
%                                             MeMalMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LMeMAL_2(AllFrames_SthHopContactPhase_MoCap);
% 
%                                           end
% 
% 
%                                         %Right greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         RGTMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT(AllFrames_SthHopContactPhase_MoCap);
%                                         RGTMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT_1(AllFrames_SthHopContactPhase_MoCap);
%                                         RGTMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT_2(AllFrames_SthHopContactPhase_MoCap);
% 
%                                         %Left lateral femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         LatFECMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaFEC(AllFrames_SthHopContactPhase_MoCap);
%                                         LatFECMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaFEC_1(AllFrames_SthHopContactPhase_MoCap);
%                                         LatFECMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaFEC_2(AllFrames_SthHopContactPhase_MoCap);
%                                         
%                                         %Left lateral malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         LatMalMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaMAL(AllFrames_SthHopContactPhase_MoCap);
%                                         LatMalMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaMAL_1(AllFrames_SthHopContactPhase_MoCap);
%                                         LatMalMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LLaMAL_2(AllFrames_SthHopContactPhase_MoCap);





%% LEFT LIMB - Split Joint Torque Data (for Energy Transfer) into the contact phase of individual hops   

                                        %Ankle torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        AnkleTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow .*ParticipantNMass;
                                        AnkleTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        AnkleTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        AnkleTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        AnkleTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        AnkleTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkle_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        
                                        %Knee torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        KneeTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow .*ParticipantNMass;
                                        KneeTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        KneeTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        KneeTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        KneeTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        KneeTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKnee_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        
                                        %Hip torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        HipTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow .*ParticipantNMass;
                                        HipTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        HipTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        HipTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        HipTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        HipTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHip_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;



                                        


%% LEFT LIMB - Split Joint Reaction Force Data (for Energy Transfer) into the contact phase of individual hops              

                                        %Ankle JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (foot).
                                            %Time series for the entire trial
                                        AnkleJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.LAnkleJRF .* ParticipantNMass;
                                        AnkleJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.LAnkleJRF_1 .* ParticipantNMass;
                                        AnkleJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.LAnkleJRF_2 .* ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        AnkleJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJRF(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                            %Next 3 lines are for the proximal segment (shank). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        AnkleJRF_ProximalSegment_X = AnkleJRF_DistalSegment_X .* (-1);
                                        AnkleJRF_ProximalSegment_Y = AnkleJRF_DistalSegment_Y .* (-1);
                                        AnkleJRF_ProximalSegment_Z = AnkleJRF_DistalSegment_Z .* (-1);
                                        
                                        %Time series for the contact phase of individual hops. Normalize by dividing by
                                        %body mass
                                        AnkleJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        AnkleJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        AnkleJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        
                                        
                                        

                                        
                                        %Knee JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (shank).
                                            %Time series for the entire trial
                                        KneeJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.LKneeJRF .*ParticipantNMass;
                                        KneeJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.LKneeJRF_1 .*ParticipantNMass;
                                        KneeJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.LKneeJRF_2 .*ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        KneeJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJRF(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                            %Next 3 lines are for the proximal segment (thigh). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        KneeJRF_ProximalSegment_X = KneeJRF_DistalSegment_X .* (-1);
                                        KneeJRF_ProximalSegment_Y = KneeJRF_DistalSegment_Y .* (-1);
                                        KneeJRF_ProximalSegment_Z = KneeJRF_DistalSegment_Z .* (-1);

                                        %Time series for the contact phase of individual hops
                                        KneeJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        KneeJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        KneeJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;



                                        %Hip JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (thigh).
                                            %Time series for the entire trial
                                        HipJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.LHipJRF .*ParticipantNMass;
                                        HipJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.LHipJRF_1 .*ParticipantNMass;
                                        HipJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.LHipJRF_2 .*ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        HipJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJRF(AllFrames_SthHopContactPhase_MoCap);
                                        HipJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                            %Next 3 lines are for the proximal segment (pelvis). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        HipJRF_ProximalSegment_X = HipJRF_DistalSegment_X .* (-1);
                                        HipJRF_ProximalSegment_Y = HipJRF_DistalSegment_Y .* (-1);
                                        HipJRF_ProximalSegment_Z = HipJRF_DistalSegment_Z .* (-1);

                                        %Time series for the contact phase of individual hops
                                        HipJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        HipJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        HipJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;





                                        

%% LEFT LIMB - Split Segment Angles into the contact phase of Individual Hops
                                        
                                           
                                        %Splice out the segment angle data for the contact phase of the Sth hop by using the Frames for the Sth hop
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                        FootAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                        ShankAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                        ThighAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                        PelvisAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle_2(AllFrames_SthHopContactPhase_MoCap);
          


                                        

%% LEFT LIMB - Split Segment Angular Velocities (for energy flow) into the contact phase of Individual Hops

                                        %Splice out the segment angular velocity data for the contact phase of the Sth hop by using the Frames for the Sth hop
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        FootAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow;
                                        FootAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow_1;
                                        FootAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        FootAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LFoot_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        ShankAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow;
                                        ShankAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow_1;
                                        ShankAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        ShankAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LShank_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        ThighAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow;
                                        ThighAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow_1;
                                        ThighAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        ThighAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LThigh_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        PelvisAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow;
                                        PelvisAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_1;
                                        PelvisAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        PelvisAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);



%% LEFT Limb - Pull Out Joint Power Scalar, from V3D

                                        %Ankle Power scalar
                                            %Entire Time Series
                                        AnklePowerScalar_V3D = HoppingTrialP_OriginalDataTable.LAnkle_PowerScalar;
                                            %Individual Hops
                                        AnklePowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkle_PowerScalar(AllFrames_SthHopContactPhase_MoCap);

                                        %Knee Power scalar
                                            %Entire Time Series
                                        KneePowerScalar_V3D = HoppingTrialP_OriginalDataTable.LKnee_PowerScalar;
                                            %Individual Hops
                                        KneePowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKnee_PowerScalar(AllFrames_SthHopContactPhase_MoCap);

                                        %Hip Power scalar
                                            %Entire Time Series
                                        HipPowerScalar_V3D = HoppingTrialP_OriginalDataTable.LHip_PowerScalar;
                                            %Individual Hops
                                        HipPowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHip_PowerScalar(AllFrames_SthHopContactPhase_MoCap);



                                        

                                     elseif strcmp( LimbID_forV3DOutput{ a },'RightLimb')






                                        %%Create variables containing the kinematics and kinetics for ground
                                        %%contact phase ONLY
                                        AllFrames_SthHopContactPhase_MoCap = GContactBegin_MoCapFrameNumbers(s,q):(GContactEnd_forContactPhase_MoCapFrameNumbers(s,q)-1);

                                        %Find the number of elements of the Sth hop contact phase.
                                        NumEl_SthHopContactPhase_MoCapSamplingHz(s,q) = numel(AllFrames_SthHopContactPhase_MoCap);


                    
  

%% RIGHT LIMB - Split Markers into the contact phase of individual hops                                        
                                        


                                         %L5-S1 vertical position
                                            %ATx25 is missing L5-S1 marker for Involved Limb, 2.3 Hz. Use LPSIS
                                            %instead
                                        if strcmp( ParticipantList{ n }, 'ATx25' ) && strcmp( LimbID{ a }, 'InvolvedLimb' ) && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz' )
                                            
                                             L5S1VerticalPosition_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) =...
                                                HoppingTrialP_OriginalDataTable.LPSIS_2(AllFrames_SthHopContactPhase_MoCap);

                                        else

                                            L5S1VerticalPosition_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) =...
                                                HoppingTrialP_OriginalDataTable.L5S1_2(AllFrames_SthHopContactPhase_MoCap);

                                        end
% 
%                                           %Left greater trochanter is missing for HC11. Therefore, if we are NOT processing HC11 or HC25, can pull out the LGT marker. 
%                                           % If we ARE processing HC11 or HC25, leave LGT marker as NaNs
%                                           if ~strcmp( ParticipantList{ n }, 'HC11' )
%     
%                                             %Left greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             LGTMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_1(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_2(AllFrames_SthHopContactPhase_MoCap);
%                                             
%                                           end
% 
%                                           %Left greater trochanter is missing for HC11 and HC25. Therefore, if we are NOT processing HC11 or HC25, can pull out the LGT marker. 
%                                           % If we ARE processing HC11 or HC25, leave LGT marker as NaNs
%                                           if ~strcmp( ParticipantList{ n }, 'HC11' )  && ~strcmp( ParticipantList{ n }, 'HC25' )
%     
%                                             %Left greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             LGTMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_1(AllFrames_SthHopContactPhase_MoCap);
%                                             LGTMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LGT_2(AllFrames_SthHopContactPhase_MoCap);
% 
%                                           %RLaMAL is missing for ATx12. Therefore, if we are NOT processing ATx12, can pull out the RLaMAL marker. 
%                                           % If we ARE processing ATx12, leave RLaMAL marker as NaNs
%                                           elseif ~strcmp( ParticipantList{ n }, 'ATx12' )
%                                             
%                                             %Left lateral malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                             %positions
%                                             LatMalMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaMAL(AllFrames_SthHopContactPhase_MoCap);
%                                             LatMalMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaMAL_1(AllFrames_SthHopContactPhase_MoCap);
%                                             LatMalMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaMAL_2(AllFrames_SthHopContactPhase_MoCap);
% 
% 
%                                           end
% 
%                                         %Right greater trochanter - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         RGTMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT(AllFrames_SthHopContactPhase_MoCap);
%                                         RGTMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT_1(AllFrames_SthHopContactPhase_MoCap);
%                                         RGTMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RGT_2(AllFrames_SthHopContactPhase_MoCap);
%                                         
%                                         %Left medial femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         MeFECMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeFEC(AllFrames_SthHopContactPhase_MoCap);
%                                         MeFECMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeFEC_1(AllFrames_SthHopContactPhase_MoCap);
%                                         MeFECMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeFEC_2(AllFrames_SthHopContactPhase_MoCap);
%                                         
%                                         %Left lateral femoral epicondyle - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         LatFECMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaFEC(AllFrames_SthHopContactPhase_MoCap);
%                                         LatFECMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaFEC_1(AllFrames_SthHopContactPhase_MoCap);
%                                         LatFECMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RLaFEC_2(AllFrames_SthHopContactPhase_MoCap);
%                                         
%                                         %Left medial malleolus - X, Y, Z coordinates - M-L/A-P/vertical
%                                         %positions
%                                         MeMalMarker_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeMAL(AllFrames_SthHopContactPhase_MoCap);
%                                         MeMalMarker_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeMAL_1(AllFrames_SthHopContactPhase_MoCap);
%                                         MeMalMarker_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RMeMAL_2(AllFrames_SthHopContactPhase_MoCap);
%                                         




%% RIGHT LIMB - Split Joint Torque Data (for Energy Transfer) into the contact phase of individual hops   

                                        %Ankle torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        AnkleTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow .*ParticipantNMass;
                                        AnkleTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        AnkleTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        AnkleTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        AnkleTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        AnkleTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkle_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        
                                        %Knee torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        KneeTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow .*ParticipantNMass;
                                        KneeTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        KneeTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        KneeTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        KneeTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        KneeTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKnee_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        
                                        %Hip torque - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Time series for the entire trial
                                        HipTorque_Sagittal_EnergyFlow = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow .*ParticipantNMass;
                                        HipTorque_Frontal_EnergyFlow = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow_1 .*ParticipantNMass;
                                        HipTorque_Transverse_EnergyFlow = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow_2 .*ParticipantNMass;
                                            %Time series for the contact phase of individual hops
                                        HipTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        HipTorque_Frontal_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow_1(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;
                                        HipTorque_Transverse_EnergyFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHip_Torque_EnergyFlow_2(AllFrames_SthHopContactPhase_MoCap).*ParticipantNMass;




%% RIGHT LIMB - Split Joint Reaction Force Data (for Energy Transfer) into the contact phase of individual hops              

                                        %Ankle JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (foot).
                                            %Time series for the entire trial
                                        AnkleJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.RAnkleJRF .*ParticipantNMass;
                                        AnkleJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.RAnkleJRF_1 .*ParticipantNMass;
                                        AnkleJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.RAnkleJRF_2 .*ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        AnkleJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJRF(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                            %Next 3 lines are for the proximal segment (shank). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        AnkleJRF_ProximalSegment_X = AnkleJRF_DistalSegment_X .* (-1);
                                        AnkleJRF_ProximalSegment_Y = AnkleJRF_DistalSegment_Y .* (-1);
                                        AnkleJRF_ProximalSegment_Z = AnkleJRF_DistalSegment_Z .* (-1);
                                        
                                        %Time series for the contact phase of individual hops. Normalize
                                        %by dividing by body mass
                                        AnkleJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        AnkleJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        AnkleJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        
                                        
                                        

                                        
                                        %Knee JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (shank).
                                            %Time series for the entire trial
                                        KneeJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.RKneeJRF .*ParticipantNMass;
                                        KneeJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.RKneeJRF_1 .*ParticipantNMass;
                                        KneeJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.RKneeJRF_2 .*ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        KneeJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJRF(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                            %Next 3 lines are for the proximal segment (thigh). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        KneeJRF_ProximalSegment_X = KneeJRF_DistalSegment_X .* (-1);
                                        KneeJRF_ProximalSegment_Y = KneeJRF_DistalSegment_Y .* (-1);
                                        KneeJRF_ProximalSegment_Z = KneeJRF_DistalSegment_Z .* (-1);

                                        %Time series for the contact phase of individual hops.  Normalize
                                        %by dividing by body mass
                                        KneeJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        KneeJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        KneeJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;



                                        %Hip JRF - Sagittal, then Frontal, then Transverse planes.
                                        %Multiply by participant mass because torques are normalized when
                                        %exported from Visual 3D
                                            %Next 3 lines are for the distal segment (thigh).
                                            %Time series for the entire trial
                                        HipJRF_DistalSegment_X = HoppingTrialP_OriginalDataTable.RHipJRF .*ParticipantNMass;
                                        HipJRF_DistalSegment_Y = HoppingTrialP_OriginalDataTable.RHipJRF_1 .*ParticipantNMass;
                                        HipJRF_DistalSegment_Z = HoppingTrialP_OriginalDataTable.RHipJRF_2 .*ParticipantNMass;
                                        
                                        %Time series for the contact phase of individual hops. Pull from
                                        %the original table so that JRF is normalized by body mass
                                        HipJRF_DistalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJRF(AllFrames_SthHopContactPhase_MoCap);
                                        HipJRF_DistalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJRF_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJRF_DistalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJRF_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                            %Next 3 lines are for the proximal segment (pelvis). Need to
                                            %multiply the JRF by -1 because the JRF for the proximal
                                            %segment is equal and opposite to the JRF for the distal
                                            %segment
                                            %Time series for the entire trial
                                        HipJRF_ProximalSegment_X = HipJRF_DistalSegment_X .* (-1);
                                        HipJRF_ProximalSegment_Y = HipJRF_DistalSegment_Y .* (-1);
                                        HipJRF_ProximalSegment_Z = HipJRF_DistalSegment_Z .* (-1);

                                        %Time series for the contact phase of individual hops. Normalize
                                        %by dividing by body mass
                                        HipJRF_ProximalSegment_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_X(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        HipJRF_ProximalSegment_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_Y(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;
                                        HipJRF_ProximalSegment_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJRF_ProximalSegment_Z(AllFrames_SthHopContactPhase_MoCap) ./ ParticipantNMass;





%% RIGHT LIMB - Split Segment Angles into the contact phase of Individual Hops
                                        
                                           
                                        %Splice out the segment angle data for the contact phase of the Sth hop by using the Frames for the Sth hop
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                        FootAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                        ShankAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                        ThighAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_Angle_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                        PelvisAngleSagittal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngleFrontal_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle_1(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngleTransverse_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_Angle_2(AllFrames_SthHopContactPhase_MoCap);
          


%% RIGHT LIMB - Split Segment Angular Velocities (for energy flow) into the contact phase of Individual Hops

                                        %Splice out the segment angular velocity data for the contact phase of the Sth hop by using the Frames for the Sth hop
                                            %Foot - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        FootAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow;
                                        FootAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow_1;
                                        FootAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        FootAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        FootAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RFoot_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Shank - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        ShankAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow;
                                        ShankAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow_1;
                                        ShankAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        ShankAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        ShankAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RShank_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Thigh - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        ThighAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow;
                                        ThighAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow_1;
                                        ThighAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        ThighAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        ThighAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RThigh_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);

                                            %Pelvis - Sagittal, then Frontal, then Transverse plane
                                            %Time series for the entire trial
                                        PelvisAngVelSagittal_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow;
                                        PelvisAngVelFrontal_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_1;
                                        PelvisAngVelTransverse_EFlow = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_2;

                                        %Time series for the contact phase of individual hops
                                        PelvisAngVelSagittal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngVelFrontal_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_1(AllFrames_SthHopContactPhase_MoCap);
                                        PelvisAngVelTransverse_EFlow_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.Pelvis_AngularVelocity_EFlow_2(AllFrames_SthHopContactPhase_MoCap);



%% RIGHT Limb - Pull Out Joint Power Scalar, from V3D

                                        %Ankle Power scalar
                                            %Entire Time Series
                                        AnklePowerScalar_V3D = HoppingTrialP_OriginalDataTable.RAnkle_PowerScalar;
                                            %Individual Hops
                                        AnklePowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkle_PowerScalar(AllFrames_SthHopContactPhase_MoCap);

                                        %Knee Power scalar
                                            %Entire Time Series
                                        KneePowerScalar_V3D = HoppingTrialP_OriginalDataTable.RKnee_PowerScalar;
                                            %Individual Hops
                                        KneePowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKnee_PowerScalar(AllFrames_SthHopContactPhase_MoCap);

                                        %Hip Power scalar
                                            %Entire Time Series
                                        HipPowerScalar_V3D = HoppingTrialP_OriginalDataTable.RHip_PowerScalar;
                                            %Individual Hops
                                        HipPowerScalar_V3D_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHip_PowerScalar(AllFrames_SthHopContactPhase_MoCap);
                                        

                                     end %End If Loop


                                     
   


%%  Segment Out Joint Center Virtual Markers from Visual 3D

                                    %If statement for telling the code which joint center virtual marker
                                    %to use for each participant and each limb. Ideally, we use the joint
                                    %centers that rely on both malleoli, both epicondyles, both
                                    %trochanters. But may need to use joint center virtual markers that
                                    %use only one physical marker for each joint center

                                    %Indented code below sets the joint centers for ATx07, Right Limb
                                    if strcmp( ParticipantList{ n }, 'ATx07') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx07, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx07, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx07, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                    %Indented code below sets the joint centers for ATx12, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx12') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx12, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx12, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx12, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);


                                    %Indented code below sets the joint centers for ATx17, Left Limb, 2.3
                                    %Hz trial only
                                    elseif strcmp( ParticipantList{ n }, 'ATx17') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx17, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
       

                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx17, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx17, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx17, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx17') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx17, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx17, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx17, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);


                                    %Indented code below sets the joint centers for ATx18, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx18') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb') && strcmp( HoppingRate_ID{ b }, 'TwoHz')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx18, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx18, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx18, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);


                                    %Indented code below sets the joint centers for ATx19, Left Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx19') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx19, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
%                                         
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx19, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx19, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
%                                         
                                    %Indented code below sets the joint centers for ATx19, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx19') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx19, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx19, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx19, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);



                                    %Indented code below sets the joint centers for ATx25, Left Limb
                                    %2.33 Hz Hopping. 
                                    elseif strcmp( ParticipantList{ n }, 'ATx25') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx25, need to use the joint center created using lateral
                                        %malleolus only
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                       
%                                         
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both femoral
                                        %epicondylesf
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        
                                    %Indented code below sets the joint centers for ATx25, Left Limb
                                    %Self-Selected and 2.0 Hz Hopping. Specified Self-Selected and 2.0 Hz
                                    %by saying if current hopping rate is NOT 2.33 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'ATx25') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && ~strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
%                                         
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx25, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx27, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx27') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb') && strcmp( HoppingRate_ID{ b }, 'TwoHz')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx27, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx27, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx27, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        
                                    %Indented code below sets the joint centers for ATx25, Left Limb
                                    %Self-Selected and 2.0 Hz Hopping. Specified Self-Selected and 2.0 Hz
                                    %by saying if current hopping rate is NOT 2.33 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'ATx36') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && ~strcmp( HoppingRate_ID{ b }, 'TwoHz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
%                                         
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx25, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx41, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx38') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx41, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx41, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx41, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx41, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx41') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx41, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx41, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx41, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx44, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx44') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx44, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx44, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx44, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        

                                        
                                    %Indented code below sets the joint centers for ATx49, Left Limb
                                    %Self-Selected and 2.0 Hz Hopping. Specified Self-Selected and 2.0 Hz
                                    %by saying if current hopping rate is NOT 2.33 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'ATx49') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && strcmp( HoppingRate_ID{ b }, 'PreferredHz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
%                                         
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx25, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx25, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for ATx49, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'ATx49') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        %ATx49 needs right ankle virtual joint center for 2.0 Hz only.
                                        %Otherwise, use the joint center with both malleoli
                                        if strcmp( HoppingRate_ID{ b }, 'TwoHz')

                                            %Split Ankle Joint Center coordinates into contact phase. For
                                            %ATx49, can use the joint center created using both malleoli
                                                %Time Series for the entire trial
                                            AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark;
                                            AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_1;
                                            AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_2;
                                                %Time series for contact phase of individual hops
                                            AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                            AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                            AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);


                                        else

                                            %Split Ankle Joint Center coordinates into contact phase. For
                                            %ATx49, can use the joint center created using both malleoli
                                                %Time Series for the entire trial
                                            AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                            AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                            AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                                %Time series for contact phase of individual hops
                                            AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                            AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                            AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        end


                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %ATx49, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %ATx49, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        




                                    %Indented code below is for HC01, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC01') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC01, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC01, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC01, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);



                                    %Indented code below is for HC11, Left Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC11') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC11, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC11, can use the joint center created using both 
                                        %femoral epicondyles
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC11, need to use a joint center created using the right greater
                                        %trochanter
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);



                                    %Indented code below is for HC11, Left Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC11') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC11, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC11, can use the joint center created using both 
                                        %femoral epicondyles
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC11, need to use a joint center created using the right greater
                                        %trochanter
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC12, Left Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC12') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC12, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for HC12, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC12') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC12, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for HC17, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC17') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC12, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC12, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC19, Left Limb,
                                    %Self-Selected Hopping Hz
                                    elseif strcmp( ParticipantList{ n }, 'HC19') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && strcmp( HoppingRate_ID{ b }, 'PreferredHz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC19, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC19, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC19, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below sets the joint centers for HC19, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC19') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC19, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC19, can use the joint center created using both
                                        %femoral epicondyle markers
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC19, need to use the joint center created using the left
                                        %greater trochanter marker
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC20, Left Limb,
                                    %2.3 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'HC20') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC20, need to use the joint center created using the lateral
                                        %malleolus only
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC20, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC20, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC20, Left Limb,
                                    %Self-Selected and 2.0 Hz Hopping. Specified Self-Selected and 2.0 Hz
                                    %by not adding a logical for the hopping rate - the code just above
                                    %this was specifically for the 2.33 Hz Hopping rate.
                                    elseif strcmp( ParticipantList{ n }, 'HC20') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC20, need to use the joint center created using the lateral
                                        %malleolus only
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC20, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC20, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC21, Left Limb,
                                    %Self-Selected and 2.33 Hz Hopping. Specified Self-Selected and 2.33 Hz
                                    %by saying if current hopping rate is NOT 2.0 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'HC21') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb') && ~strcmp( HoppingRate_ID{ b }, 'TwoHz' )


                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC21, need to use the joint center created using the lateral
                                        %malleolus only
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC21, need use the joint center created using the lateral
                                        %femoral epicondyle only
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC21, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        

                                        
                                    %Indented code below sets the joint centers for HC25, Left Limb,
                                    %Self-Selected and 2.33 Hz Hopping. Specified Self-Selected and 2.33 Hz
                                    %by saying if current hopping rate is NOT 2.0 Hz Hopping
                                    elseif strcmp( ParticipantList{ n }, 'HC25') && strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')

                                        %Indented code below sets knee and hip joint centers for
                                        %Preferred Hz
                                        if strcmp( HoppingRate_ID{ b }, 'PreferredHz' )

                                            %Split Knee Joint Center coordinates into contact phase. For
                                            %HC25 Self-Selected Hz, need use the joint center created using the lateral
                                            %femoral epicondyle only
                                                %Time Series for the entire trial
                                            KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                            KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                            KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                                %Time series for contact phase of individual hops
                                            KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                            
                                            
                                            
                                            %Split Hip Joint Center coordinates into contact phase. For
                                            %HC25 Self-Selected Hz, can use the joint center created using both greater
                                            %trochanters
                                                %Time Series for the entire trial
                                            HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                            HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                            HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                                %Time series for contact phase of individual hops
                                            HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        %Indented code below sets knee and hip joint centers for
                                        %2.0 Hz
                                        elseif strcmp( HoppingRate_ID{ b }, 'TwoHz' )

                                            %Split Knee Joint Center coordinates into contact phase. For
                                            %HC25 2.0 Hz, need use the joint center created using the lateral
                                            %femoral epicondyle only
                                                %Time Series for the entire trial
                                            KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark;
                                            KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1;
                                            KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2;
                                                %Time series for contact phase of individual hops
                                            KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                            
                                            
                                            %Split Hip Joint Center coordinates into contact phase. For
                                            %HC25 2.0 Hz, need to use the joint center created using the
                                            %right greater trochanter
                                                %Time Series for the entire trial
                                            HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark;
                                            HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_1;
                                            HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_2;
                                                %Time series for contact phase of individual hops
                                            HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);


                                        %Indented code below sets knee and hip joint centers for
                                        %2.33 Hz
                                        elseif strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz' )

                                            %Split Knee Joint Center coordinates into contact phase. For
                                            %HC25 2.33 Hz, can use use the joint center created using
                                            %both femoral epicondyles
                                                %Time Series for the entire trial
                                            KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter;
                                            KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1;
                                            KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2;
                                                %Time series for contact phase of individual hops
                                            KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                            KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                            
                                            
                                            %Split Hip Joint Center coordinates into contact phase. For
                                            %HC25 2.33 Hz, can use the joint center created using both greater
                                            %trochanters
                                                %Time Series for the entire trial
                                            HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                            HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                            HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                                %Time series for contact phase of individual hops
                                            HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                            HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);


                                        end



                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC25, need to use the joint center created using the lateral
                                        %malleolus only
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       

                                    %Indented code below sets the joint centers for HC25, Right Limb
                                    elseif strcmp( ParticipantList{ n }, 'HC25') && strcmp( LimbID_forV3DOutput{ a }, 'RightLimb') && strcmp( HoppingRate_ID{ b }, 'TwoHz' )

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC25, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC25 2.0 Hz, need to use the joint center created using the
                                        %lateral femoral epicondyle
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC25 2.0 Hz, need to use the joint center created using the left
                                        %greater trochanter marker
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_VirtualLandmark_2(AllFrames_SthHopContactPhase_MoCap);
                                       



                                    %Indented code below is for participants that have all left limb joint markers
                                    %present for all trials - ATx07, ATx10, ATx12, ATx18, ATx21, ATx24, HC01,
                                    %HC05, HC06, HC17, HC19 (2.0 and 2.33 Hz Hopping), HC21 (2.0 Hz
                                    %Hopping)
                                    elseif strcmp( LimbID_forV3DOutput{ a }, 'LeftLimb')


                                        %Split Ankle Joint Center coordinates into contact phase. Can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.LAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.LAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                       
                                        
                                        %Split Knee Joint Center coordinates into contact phase. Can use the joint center created using both 
                                        %femoral epicondyles
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.LKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        
                                        
                                        %Split Hip Joint Center coordinates into contact phase. Can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.LHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.LHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.LHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.LHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        


                                    %Indented code below is for participants that have all right limb joint markers
                                    %present for all trials - ATx10, ATx21, ATx24, HC05, HC06, HC20,
                                    %HC21, HC25 (Self-Selected and 2.33 Hz)
                                    elseif strcmp( LimbID_forV3DOutput{ a }, 'RightLimb')

                                        
                                        %Split Ankle Joint Center coordinates into contact phase. For
                                        %HC05, can use the joint center created using both malleoli
                                            %Time Series for the entire trial
                                        AnkleJtCenter_X = HoppingTrialP_OriginalDataTable.RAnkleJtCenter;
                                        AnkleJtCenter_Y= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1;
                                        AnkleJtCenter_Z = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        AnkleJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s)= HoppingTrialP_OriginalDataTable.RAnkleJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        AnkleJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RAnkleJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Knee Joint Center coordinates into contact phase. For
                                        %HC05, can use the joint center created using both femoral
                                        %epicondyles
                                            %Time Series for the entire trial
                                        KneeJtCenter_X = HoppingTrialP_OriginalDataTable.RKneeJtCenter;
                                        KneeJtCenter_Y = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1;
                                        KneeJtCenter_Z = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        KneeJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        KneeJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RKneeJtCenter_2(AllFrames_SthHopContactPhase_MoCap);
                                        
                                        %Split Hip Joint Center coordinates into contact phase. For
                                        %HC05, can use the joint center created using both greater
                                        %trochanters
                                            %Time Series for the entire trial
                                        HipJtCenter_X = HoppingTrialP_OriginalDataTable.RHipJtCenter;
                                        HipJtCenter_Y = HoppingTrialP_OriginalDataTable.RHipJtCenter_1;
                                        HipJtCenter_Z = HoppingTrialP_OriginalDataTable.RHipJtCenter_2;
                                            %Time series for contact phase of individual hops
                                        HipJtCenter_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_1(AllFrames_SthHopContactPhase_MoCap);
                                        HipJtCenter_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HoppingTrialP_OriginalDataTable.RHipJtCenter_2(AllFrames_SthHopContactPhase_MoCap);

                                        


                                    end



%% Calculate and Plot Joint Center Linear Velocities

                                %Use diff function to take derivative of ankle joint center position
                                %coordinates. First data point is set to 0. Need to divide by the time
                                %step or else units are only in m
                                AnkleJointLinearVel_X = [ 0; diff( AnkleJtCenter_X ) ] ./ ( MoCapTimeStep ) ;
                                AnkleJointLinearVel_Y = [ 0; diff( AnkleJtCenter_Y ) ] ./ ( MoCapTimeStep ) ;
                                AnkleJointLinearVel_Z = [ 0; diff( AnkleJtCenter_Z ) ] ./ ( MoCapTimeStep ) ;
                                
                                KneeJointLinearVel_X = [ 0; diff( KneeJtCenter_X ) ] ./ ( MoCapTimeStep ) ;
                                KneeJointLinearVel_Y = [ 0; diff( KneeJtCenter_Y ) ] ./ ( MoCapTimeStep ) ;
                                KneeJointLinearVel_Z = [ 0; diff( KneeJtCenter_Z ) ] ./ ( MoCapTimeStep ) ;
                                
                                HipJointLinearVel_X = [ 0; diff( HipJtCenter_X ) ] ./ ( MoCapTimeStep ) ;
                                HipJointLinearVel_Y = [ 0; diff( HipJtCenter_Y ) ] ./ ( MoCapTimeStep ) ;
                                HipJointLinearVel_Z = [ 0; diff( HipJtCenter_Z ) ] ./ ( MoCapTimeStep ) ;



                                AnkleJointLinearVel_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJointLinearVel_X(AllFrames_SthHopContactPhase_MoCap);
                                AnkleJointLinearVel_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJointLinearVel_Y(AllFrames_SthHopContactPhase_MoCap);
                                AnkleJointLinearVel_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJointLinearVel_Z(AllFrames_SthHopContactPhase_MoCap);
                                
                                KneeJointLinearVel_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJointLinearVel_X(AllFrames_SthHopContactPhase_MoCap);
                                KneeJointLinearVel_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJointLinearVel_Y(AllFrames_SthHopContactPhase_MoCap);
                                KneeJointLinearVel_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJointLinearVel_Z(AllFrames_SthHopContactPhase_MoCap);
                                
                                HipJointLinearVel_X_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJointLinearVel_X(AllFrames_SthHopContactPhase_MoCap);
                                HipJointLinearVel_Y_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJointLinearVel_Y(AllFrames_SthHopContactPhase_MoCap);
                                HipJointLinearVel_Z_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJointLinearVel_Z(AllFrames_SthHopContactPhase_MoCap);
                                
                                
                                
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))
                                
                                            TimeVector_JointCenterVelocities = ( 1 : size( AnkleJointLinearVel_X_IndividualHopsContactPhase, 1 ) ) ./ MoCapSampHz;
                                            
                                            figure( 'Color', '#F5F5DC', 'Name', ['Ankle Joint Linear Velocities  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position', [313 86 950 711] )
                                            sgtitle('Ankle Joint Linear Velocities','FontSize',20)
                                            
                                            subplot( 3, 1, 1 )
                                            plot( TimeVector_JointCenterVelocities, AnkleJointLinearVel_X_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'X Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 2 )
                                            plot( TimeVector_JointCenterVelocities, AnkleJointLinearVel_Y_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Y Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 3 )
                                            plot( TimeVector_JointCenterVelocities, AnkleJointLinearVel_Z_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Z Coordinates', 'FontSize', 18 )
                                            
                                            %If s is the same as the number of hops, pause the code so we
                                            %can view the plot before the next plot is made
                                            if s == numel(GContactBegin_MoCapFrameNumbers(:,q))
    
                                                pause

                                                savefig( [ ParticipantList{ n }, '_', 'AnkleJointCenterLinearVelocities', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );

                                                close all
    
                                            end
                                            
                                            
                                            
                                            
                                            
                                            figure( 'Color', '#F5F5DC', 'Name', ['Knee Joint Linear Velocities  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position', [313 86 950 711])
                                            sgtitle('Knee Joint Linear Velocities','FontSize',20)
                                            
                                            subplot( 3, 1, 1 )
                                            plot( TimeVector_JointCenterVelocities, KneeJointLinearVel_X_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'X Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 2 )
                                            plot( TimeVector_JointCenterVelocities, KneeJointLinearVel_Y_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Y Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 3 )
                                            plot( TimeVector_JointCenterVelocities, KneeJointLinearVel_Z_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Z Coordinates', 'FontSize', 18 )
                                            
                                            %If s is the same as the number of hops, pause the code so we
                                            %can view the plot before the next plot is made
                                            if s == numel(GContactBegin_MoCapFrameNumbers(:,q))
    
                                                pause

                                                savefig( [ ParticipantList{ n }, '_', 'KneeJointCenterLinearVelocities', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );

                                                close all
    
                                            end
                                            
                                            
                                            
                                            
                                            
                                            figure( 'Color', '#F5F5DC', 'Name', ['Hip Joint Linear Velocities  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position', [313 86 950 711])
                                            sgtitle('Hip Joint Linear Velocities','FontSize',20)
                                            
                                            subplot( 3, 1, 1 )
                                            plot( TimeVector_JointCenterVelocities, HipJointLinearVel_X_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'X Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 2 )
                                            plot( TimeVector_JointCenterVelocities, HipJointLinearVel_Y_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Y Coordinates', 'FontSize', 18 )
                                            
                                            subplot( 3, 1, 3 )
                                            plot( TimeVector_JointCenterVelocities, HipJointLinearVel_Z_IndividualHopsContactPhase, 'LineWidth', 1.5 )
                                            ylim( [ -1.5, 1.5 ] )
                                            yticks( -1.5:0.25:1.5 )
                                            set( gca,  'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16)
                                            ylabel( 'Velocity (m/s)', 'FontSize', 16)
                                            title( 'Z Coordinates', 'FontSize', 18 )
                                            
                                            
                                            %If s is the same as the number of hops, pause the code so we
                                            %can view the plot before the next plot is made
                                            if s == numel(GContactBegin_MoCapFrameNumbers(:,q))
    
                                                pause

                                                savefig( [ ParticipantList{ n }, '_', 'HipJointCenterLinearVelocities', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );

                                                close all
    
                                            end

                                        end

                                end





%% Calculate Joint Active and Passive Force Power



                            %For left shank, negative Y = toward knee adduction, ankle eversion
                                    %positive Y = toward knee abduction, ankle inversion
                            %For left shank, negative Z = counterclockwise - toward knee ER, ankle adduction
                                    %positive Z = toward knee IR, ankle abduction
                            %For left foot, positive X = counterclockwise = DF; positive Y = inversion; negative Z = foot abduction, positive
                            %Z = adduction
                            
                            
                            %Combine foot angular velocity vectors into a 3-column
                            %matrix, then divide all values by 57.2958 to convert from degrees to radians
                            FootAngVel_Matrix = [FootAngVelSagittal_EFlow, FootAngVelFrontal_EFlow, FootAngVelTransverse_EFlow] ./ 57.2958;
                            
                            %Combine shank angular velocity vectors into a 3-column
                            %matrix, then divide all values by 57.2958 to convert from degrees to radians
                            ShankAngVel_Matrix = [ ShankAngVelSagittal_EFlow, ShankAngVelFrontal_EFlow, ShankAngVelTransverse_EFlow] ./ 57.2958;
                            
                            %Combine thigh angular velocity vectors into a 3-column
                            %matrix, then divide all values by 57.2958 to convert from degrees to radians
                            ThighAngVel_Matrix = [ ThighAngVelSagittal_EFlow, ThighAngVelFrontal_EFlow, ThighAngVelTransverse_EFlow] ./ 57.2958;
                            
                            %Combine pelvis angular velocity vectors into a 3-column
                            %matrix, then divide all values by 57.2958 to convert from degrees to radians
                            PelvisAngVel_Matrix = [ PelvisAngVelSagittal_EFlow, PelvisAngVelFrontal_EFlow, PelvisAngVelTransverse_EFlow ] ./ 57.2958;
                                                        
                            %Combine ankle torque vectors (for energy flow) into a 3-column
                            %matrix
                            AnkleTorque_Matrix = [ AnkleTorque_Sagittal_EnergyFlow, AnkleTorque_Frontal_EnergyFlow, AnkleTorque_Transverse_EnergyFlow ];

                            %Combine knee torque vectors (for energy flow) into a 3-column
                            %matrix
                            KneeTorque_Matrix = [ KneeTorque_Sagittal_EnergyFlow, KneeTorque_Frontal_EnergyFlow, KneeTorque_Transverse_EnergyFlow ];

                            %Combine hip torque vectors (for energy flow) into a 3-column
                            %matrix
                            HipTorque_Matrix = [ HipTorque_Sagittal_EnergyFlow, HipTorque_Frontal_EnergyFlow, HipTorque_Transverse_EnergyFlow ];
                            
                            %Combine ankle JRF vectors for distal segment into a 3-column
                            %matrix
                            AnkleJRF_DistalSegment_Matrix = [ AnkleJRF_DistalSegment_X, AnkleJRF_DistalSegment_Y, AnkleJRF_DistalSegment_Z ];

                            %Combine ankle JRF vectors for proximal segment into a 3-column
                            %matrix
                            AnkleJRF_ProximalSegment_Matrix = [ AnkleJRF_ProximalSegment_X, AnkleJRF_ProximalSegment_Y, AnkleJRF_ProximalSegment_Z ];

                            %Combine knee JRF vectors for distal segment into a 3-column
                            %matrix
                            KneeJRF_DistalSegment_Matrix = [ KneeJRF_DistalSegment_X, KneeJRF_DistalSegment_Y, KneeJRF_DistalSegment_Z ];

                            %Combine knee JRF vectors for proximal segment into a 3-column
                            %matrix
                            KneeJRF_ProximalSegment_Matrix = [ KneeJRF_ProximalSegment_X, KneeJRF_ProximalSegment_Y, KneeJRF_ProximalSegment_Z ];
                            
                            %Combine hip JRF vectors for distal segment into a 3-column
                            %matrix
                            HipJRF_DistalSegment_Matrix = [ HipJRF_DistalSegment_X, HipJRF_DistalSegment_Y, HipJRF_DistalSegment_Z ];

                            %Combine hip JRF vectors for proximal segment into a 3-column
                            %matrix
                            HipJRF_ProximalSegment_Matrix = [ HipJRF_ProximalSegment_X, HipJRF_ProximalSegment_Y, HipJRF_ProximalSegment_Z ];
                            
                            %Combine ankle joint center linear velocity vectors into a 3-column
                            %matrix
                            AnkleJointLinearVel_Matrix = [ AnkleJointLinearVel_X, AnkleJointLinearVel_Y, AnkleJointLinearVel_Z ];

                            %Combine knee joint center linear velocity vectors into a 3-column
                            %matrix
                            KneeJointLinearVel_Matrix = [ KneeJointLinearVel_X, KneeJointLinearVel_Y, KneeJointLinearVel_Z ];

                            %Combine hip joint center linear velocity vectors into a 3-column
                            %matrix
                            HipJointLinearVel_Matrix = [ HipJointLinearVel_X, HipJointLinearVel_Y, HipJointLinearVel_Z ];
                            
                            
                            
                            %Calculate active power for the foot segment, using ankle joint torque.
                            %Calculate as the dot product foot angular velocity matrix and ankle joint
                            %torque matrix
                            AnkleActivePower_Foot = dot( FootAngVel_Matrix, AnkleTorque_Matrix, 2) ./ ParticipantNMass;
                            AnkleActivePower_Foot_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleActivePower_Foot(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate active power for the shank segment, using ankle joint torque.
                            %Calculate as the dot product of shank angular velocity matrix and ankle joint
                            %torque matrix. Multiply ankle torque by -1 since torque for the shank is
                            %equal and opposite to the torque for the foot
                            AnkleActivePower_Shank = dot( ShankAngVel_Matrix, AnkleTorque_Matrix.*(-1), 2) ./ ParticipantNMass;
                            AnkleActivePower_Shank_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleActivePower_Shank(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate passive power for the foot segment, using the dot product of ankle joint reaction
                            %force (for the distal segment) and ankle joint linear velocity
                            AnklePassivePower_Foot = dot( AnkleJRF_DistalSegment_Matrix, AnkleJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            AnklePassivePower_Foot_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnklePassivePower_Foot(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate passive power for the shank segment, using the dot product of ankle joint reaction
                            %force (for the proximal segment) and ankle joint linear velocity. Reminder
                            %that ankle JRF for proximal segment = that for distal segment times -1
                            AnklePassivePower_Shank = dot( AnkleJRF_ProximalSegment_Matrix, AnkleJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            AnklePassivePower_Shank_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnklePassivePower_Shank(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate ankle joint power scalar as the sum of the active and passive
                            %power for the foot and shank. Will use this to compare with the scalar from
                            %Visual 3D and confirm validity of analysis
                            AnkleJointPowerScalar_Calculated = AnkleActivePower_Foot + AnkleActivePower_Shank + AnklePassivePower_Foot + AnklePassivePower_Shank;
                            AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleJointPowerScalar_Calculated(AllFrames_SthHopContactPhase_MoCap);
                            
                                
                            

                            %Calculate active power for the shank segment, using knee joint torque.
                            %Calculate as the dot product of shank angular velocity matrix and knee joint
                            %torque matrix
                            KneeActivePower_Shank = dot( ShankAngVel_Matrix, KneeTorque_Matrix, 2) ./ ParticipantNMass;
                            KneeActivePower_Shank_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeActivePower_Shank(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate active power for the thigh segment, using knee joint torque.
                            %Calculate as the dot product of thigh angular velocity matrix and knee joint
                            %torque matrix. Multiply knee torque by -1 since torque for the thigh is
                            %equal and opposite to the torque for the shank
                            KneeActivePower_Thigh = dot( ThighAngVel_Matrix, KneeTorque_Matrix.*(-1), 2) ./ ParticipantNMass;
                            KneeActivePower_Thigh_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeActivePower_Thigh(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate passive power for the shank segment, using the dot product of knee joint reaction
                            %force (for the distal segment) and knee joint linear velocity
                            KneePassivePower_Shank = dot( KneeJRF_DistalSegment_Matrix, KneeJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            KneePassivePower_Shank_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneePassivePower_Shank(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate passive power for the thigh segment, using the dot product of knee joint reaction
                            %force (for the proximal segment) and knee joint linear velocity. Reminder
                            %that knee JRF for proximal segment = that for distal segment times -1
                            KneePassivePower_Thigh = dot( KneeJRF_ProximalSegment_Matrix, KneeJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            KneePassivePower_Thigh_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneePassivePower_Thigh(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate knee joint power scalar as the sum of the active and passive
                            %power for the shank and thigh. Will use this to compare with the scalar from
                            %Visual 3D and confirm validity of analysis
                            KneeJointPowerScalar_Calculated = KneeActivePower_Shank + KneeActivePower_Thigh + KneePassivePower_Shank + KneePassivePower_Thigh;
                            KneeJointPowerScalar_Calculated_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeJointPowerScalar_Calculated(AllFrames_SthHopContactPhase_MoCap);
                            
                            
                            
                            
                            
                            


                            %Calculate active power for the thigh segment, using hip joint torque.
                            %Calculate as the dot product of thigh angular velocity matrix and hip joint
                            %torque matrix
                            HipActivePower_Thigh = dot( ThighAngVel_Matrix, HipTorque_Matrix, 2) ./ ParticipantNMass;
                            HipActivePower_Thigh_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipActivePower_Thigh(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate active power for the pelvis segment, using hip joint torque.
                            %Calculate as the dot product of pelvis angular velocity matrix and hip joint
                            %torque matrix. Multiply hip torque by -1 since torque for the pelvis is
                            %equal and opposite to the torque for the thigh
                            HipActivePower_Pelvis = dot( PelvisAngVel_Matrix, HipTorque_Matrix.*(-1), 2) ./ ParticipantNMass;
                            HipActivePower_Pelvis_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipActivePower_Pelvis(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate passive power for the thigh segment, using the dot product of hip joint reaction
                            %force (for the distal segment) and hip joint linear velocity
                            HipPassivePower_Thigh = dot( HipJRF_DistalSegment_Matrix, HipJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            HipPassivePower_Thigh_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipPassivePower_Thigh(AllFrames_SthHopContactPhase_MoCap);

                            %Calculate passive power for the pelvis segment, using the dot product of hip joint reaction
                            %force (for the proximal segment) and hip joint linear velocity. Reminder
                            %that hip JRF for proximal segment = that for distal segment times -1
                            HipPassivePower_Pelvis = dot( HipJRF_ProximalSegment_Matrix, HipJointLinearVel_Matrix, 2) ./ ParticipantNMass;
                            HipPassivePower_Pelvis_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipPassivePower_Pelvis(AllFrames_SthHopContactPhase_MoCap);
                            
                            %Calculate hip joint power scalar as the sum of the active and passive
                            %power for the thigh and pelvis. Will use this to compare with the scalar from
                            %Visual 3D and confirm validity of analysis
                            HipJointPowerScalar_Calculated = HipActivePower_Thigh + HipActivePower_Pelvis + HipPassivePower_Thigh + HipPassivePower_Pelvis;
                            HipJointPowerScalar_Calculated_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipJointPowerScalar_Calculated(AllFrames_SthHopContactPhase_MoCap);
                            
                            
                            
                            
                            
                            
                            

%% Plot Joint Power Scalars to Check Integrity of Data Analysis


                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                            %Create time vector for power time series, entire trial
                                            TimeVector_PowerEntireTrial = ( 1 : numel( AnklePassivePower_Shank ) ) ./ MoCapSampHz;
                                            
                                            figure( 'Color', '#F5F5DC', 'Name', ['Compare Joint Passive Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position', [313 86 950 711])
                                            
                                            subplot( 3, 1, 1)
                                            plot( TimeVector_PowerEntireTrial, abs( AnklePassivePower_Shank ), 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, abs( AnklePassivePower_Foot ), 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Ankle Passive Power', 'FontSize', 20 )
                                            legend( 'Shank Power', 'Foot Power Absolue Value', 'Location', 'bestoutside' )
                                            
                                            subplot( 3, 1, 2)
                                            plot( TimeVector_PowerEntireTrial, abs( KneePassivePower_Thigh ), 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, abs( KneePassivePower_Shank ), 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Knee Passive Power', 'FontSize', 20 )
                                            legend( 'Shank Power', 'Thigh Power Absolue Value', 'Location', 'bestoutside' )
                                            
                                            subplot( 3, 1, 3)
                                            plot( TimeVector_PowerEntireTrial, abs( HipPassivePower_Thigh ), 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, abs( HipPassivePower_Pelvis ), 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Hip Passive Power', 'FontSize', 20 )
                                            legend( 'Thigh Power', 'Pelvis Power Absolue Value', 'Location', 'bestoutside' )
                                            
                                            
                                            pause
                                            

                                            close all
                                            
                                            
                                            
                                            
                                            
                                            
                                            %Find error between calculated joint power scalar and joint
                                            %power scalar from V3D
                                            AnklePowerScalarError = sqrt(mean((AnklePowerScalar_V3D-AnkleJointPowerScalar_Calculated).^2,'omitnan'));
                                            KneePowerScalarError = sqrt(mean((KneePowerScalar_V3D-KneeJointPowerScalar_Calculated).^2,'omitnan'));
                                            HipPowerScalarError = sqrt(mean((HipPowerScalar_V3D-HipJointPowerScalar_Calculated).^2,'omitnan'));
                                            
                                            figure( 'Color', '#F5F5DC', 'Name', ['Compare Total Joint Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position', [313 86 950 711])
                                            
                                            subplot( 3, 1, 1)
                                            plot( TimeVector_PowerEntireTrial, AnklePowerScalar_V3D, 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, AnkleJointPowerScalar_Calculated, 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Total Ankle  Power', 'FontSize', 20 )
                                            text( 0.3, -1, { 'Error = ', num2str( AnklePowerScalarError ) }, 'FontSize', 14, 'FontWeight', 'bold' )
                                            legend( 'From Visual 3D', 'Manually Calculated', 'Location', 'bestoutside' )
                                            
                                            subplot( 3, 1, 2)
                                            plot( TimeVector_PowerEntireTrial, KneePowerScalar_V3D, 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, KneeJointPowerScalar_Calculated, 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Total Knee  Power', 'FontSize', 20 )
                                            text( 0.3, -1, { 'Error = ', num2str( KneePowerScalarError ) }, 'FontSize', 14, 'FontWeight', 'bold' )
                                            legend( 'From Visual 3D', 'Manually Calculated', 'Location', 'bestoutside' )
                                            
                                            subplot( 3, 1, 3)
                                            plot( TimeVector_PowerEntireTrial, HipPowerScalar_V3D, 'LineWidth', 1.5 )
                                            hold on
                                            plot( TimeVector_PowerEntireTrial, HipJointPowerScalar_Calculated, 'LineWidth', 1.5 )
                                            hold off
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title( 'Total Hip  Power', 'FontSize', 20 )
                                            text( 0.3, -1, { 'Error = ', num2str( HipPowerScalarError ) }, 'FontSize', 14, 'FontWeight', 'bold' )
                                            legend( 'From Visual 3D', 'Manually Calculated', 'Location', 'bestoutside' )
                                            
                                            
                                            pause


                                            savefig( [ ParticipantList{ n }, '_', 'Check Power Scalar Calculation', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            close all

                                        end

                                end



%% Calculate Energy Transfer Variables


                                %Active ankle  energy transfer = sum of the absolute values of active power
                                %minus the absolute value of joint power scalar. This accounts for all
                                %the energy moved between segments that is not absorbed/generated at the
                                %joint
                                AnkleActiveEnergyTransfer = ( ( abs( AnkleActivePower_Foot ) + abs( AnkleActivePower_Shank ) ) - abs( AnkleJointPowerScalar_Calculated  ) ) .* 0.5;
                                AnkleActiveEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = AnkleActiveEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);

                                %Total ankle energy transfer = sum of active and passive power (passive
                                %power = joint reaction power. Joint reaction power can only transfer
                                %energy between segments)
                                TotalAnkleEnergyTransfer = AnkleActiveEnergyTransfer + abs( AnklePassivePower_Foot );
                                 TotalAnkleEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalAnkleEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);
                                
                                %Active knee energy transfer = sum of the absolute values of active power
                                %minus the absolute value of joint power scalar. This accounts for all
                                %the energy moved between segments that is not absorbed/generated at the
                                %joint
                                KneeActiveEnergyTransfer = ( ( abs( KneeActivePower_Shank ) + abs( KneeActivePower_Thigh ) ) - abs( KneeJointPowerScalar_Calculated  ) ) .* 0.5;
                                KneeActiveEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = KneeActiveEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);

                                %Total knee energy transfer = sum of active and passive power (passive
                                %power = joint reaction power. Joint reaction power can only transfer
                                %energy between segments)
                                TotalKneeEnergyTransfer = KneeActiveEnergyTransfer + abs( KneePassivePower_Shank );
                                TotalKneeEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalKneeEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);
                                
                                %Active hip energy transfer = sum of the absolute values of active power
                                %minus the absolute value of joint power scalar. This accounts for all
                                %the energy moved between segments that is not absorbed/generated at the
                                %joint
                                HipActiveEnergyTransfer = ( ( abs( HipActivePower_Thigh ) + abs( HipActivePower_Pelvis ) ) - abs( HipJointPowerScalar_Calculated  ) ) .* 0.5;
                                HipActiveEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = HipActiveEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);

                                %Total hip energy transfer = sum of active and passive power (passive
                                %power = joint reaction power. Joint reaction power can only transfer
                                %energy between segments)
                                TotalHipEnergyTransfer = HipActiveEnergyTransfer + abs( HipPassivePower_Thigh );         
                                TotalHipEnergyTransfer_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalHipEnergyTransfer(AllFrames_SthHopContactPhase_MoCap);


%%  Calculate Total Segmental Energy


                                %Total foot segment energy = sum of active and passive power from ankle
                                %joint
                                TotalFootEnergy = AnkleActivePower_Foot + AnklePassivePower_Foot;
                                TotalFootEnergy_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalFootEnergy(AllFrames_SthHopContactPhase_MoCap);
                                
                                %Total shank energy = sum of active and passive power from the ankle and
                                %knee joints
                                TotalShankEnergy = ( AnkleActivePower_Shank + AnklePassivePower_Shank ) + ( KneeActivePower_Shank + KneePassivePower_Shank );
                                TotalShankEnergy_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalShankEnergy(AllFrames_SthHopContactPhase_MoCap);
                                
                                %Total thigh energy = sum of active and passive power from the knee and
                                %hip joints
                                TotalThighEnergy = ( KneeActivePower_Thigh + KneePassivePower_Thigh ) + ( HipActivePower_Thigh + HipPassivePower_Thigh );
                                TotalThighEnergy_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalThighEnergy(AllFrames_SthHopContactPhase_MoCap);
                                
                                %Total pelvis energy = sum of active and passive power from the hip joints
                                TotalPelvisEnergy = HipActivePower_Pelvis + HipPassivePower_Pelvis;
                                TotalPelvisEnergy_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q),s) = TotalPelvisEnergy(AllFrames_SthHopContactPhase_MoCap);



%% Plot Segment Power - All Hops

                                
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                            TimeVector_SegmentPower =  ( 1 : size( AnkleActivePower_Foot_IndividualHopsContactPhase, 1 ) ) ./ MoCapSampHz;
                                            
                                            %Plot foot power flow time series,  contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', 'Name', ['Foot Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Foot Power', 'FontSize', 20 )
                                            
                                            subplot( 3, 1, 1 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower, AnklePassivePower_Foot_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title(' Foot Passive Power - from Ankle ','FontSize',20)
                                            
                                            subplot( 3, 1, 2 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower, AnkleActivePower_Foot_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Foot Active Power - from Ankle','FontSize',20)
                                            
                                            subplot( 3, 1, 3 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower, TotalFootEnergy_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Foot Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'FootEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            




                                            
                                            %Plot shank power flow time series,  contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', 'Name', ['Shank Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Shank Power', 'FontSize', 20 )
                                            
                                            subplot( 3, 2, 1 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnklePassivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Passive Power - from Ankle','FontSize',20)
                                            
                                            subplot( 3, 2, 2 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnkleActivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Active Power - from Ankle','FontSize',20)
                                            
                                            subplot( 3, 2, 3 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneePassivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Passive Power - from Knee','FontSize',20)
                                            
                                            subplot( 3, 2, 4 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeActivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Active Power - from Knee','FontSize',20)
                                            
                                            subplot( 3, 2, 5:6 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalShankEnergy_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Shank Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'ShankEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            


                                            
                                            %Plot thigh power flow time series,  contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', 'Name', ['Thigh Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Thigh Power', 'FontSize', 20 )
                                            
                                            subplot( 3, 2, 1 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneePassivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Passive Power - from Knee','FontSize',20)
                                            
                                            subplot( 3, 2, 2 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeActivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Active Power - from Knee','FontSize',20)
                                            
                                            subplot( 3, 2, 3 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipPassivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Passive Power - from Hip','FontSize',20)
                                            
                                            subplot( 3, 2, 4 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipActivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Active Power - from Hip','FontSize',20)
                                            
                                            subplot( 3, 2, 5:6 )
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalThighEnergy_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Thigh Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'ThighEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            
                                            
                                            
                                            
                                            %Plot pelvis power flow time series, contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', 'Name', ['Pelvis Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Pelvis Power', 'FontSize', 20 )
                                            
                                            subplot( 3, 1, 1)
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipPassivePower_Pelvis_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Pelvis Passive Power - from Hip','FontSize',20)
                                            
                                            subplot( 3, 1, 2)
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipActivePower_Pelvis_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Pelvis Active Power - from Hip','FontSize',20)
                                            
                                            subplot( 3, 1, 3)
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalPelvisEnergy_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Pelvis Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'PelvisEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all

                                        end
                                end







%% Plot Joint Power Flow Time Series - All Hops

                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        %Only show plots if we told the code we're processing the last
                                        %hop
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                            %Create time vector for use in plotting. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_IndividualHopsContactPhase. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_SegmentPower =  ( 1 : size( AnkleActivePower_Foot_IndividualHopsContactPhase, 1 ) ) ./ MoCapSampHz;


                                            %Plot ankle power flow time series, contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', 'Name', ['Ankle Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Ankle Power', 'FontSize', 20 )
                                            
                                            subplot( 4, 2, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnklePassivePower_Foot_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Passive Power- Foot','FontSize',20)
                                            
                                            subplot( 4, 2, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnkleActivePower_Foot_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Power- Foot','FontSize',20)
                                            
                                            subplot( 4, 2, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnklePassivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Passive Power- Shank','FontSize',20)
                                            
                                            subplot( 4, 2, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnkleActivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Power- Shank','FontSize',20)
                                            
                                            subplot( 4, 2, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnkleActiveEnergyTransfer_IndividualHopsContactPhase,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Energy Transfer','FontSize',20)
                                            
                                            subplot( 4, 2, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalAnkleEnergyTransfer_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Ankle Energy Transfer Series','FontSize',20)
                                            
                                            subplot( 4, 2, 7:8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Ankle Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'AnkleEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            



                                            %Plot knee power flow time series, contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', "Name", ['Knee Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Knee Power', 'FontSize', 20 )
                                            
                                            subplot( 4, 2, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneePassivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Passive Power- Shank','FontSize',20)
                                            
                                            subplot( 4, 2, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeActivePower_Shank_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Power- Shank','FontSize',20)
                                            
                                            subplot( 4, 2, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneePassivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Passive Power - Thigh','FontSize',20)
                                            
                                            subplot( 4, 2, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeActivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Power - Thigh','FontSize',20)
                                            
                                            subplot( 4, 2, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeActiveEnergyTransfer_IndividualHopsContactPhase,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Energy Transfer','FontSize',20)
                                            
                                            subplot( 4, 2, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalKneeEnergyTransfer_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Knee Energy Transfer','FontSize',20)
                                            
                                            subplot( 4, 2, 7:8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,KneeJointPowerScalar_Calculated_IndividualHopsContactPhase, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Knee Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'KneeEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            



                                            %Plot hip power flow time series, contact phase only. See title of each subplot for
                                            %details
                                            figure( 'Color', '#F5F5DC', "Name", ['Hip Power  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Hip Power', 'FontSize', 20 )
                                            
                                            subplot( 4, 2, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipPassivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Passive Power - Thigh','FontSize',20)
                                            
                                            subplot( 4, 2, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipActivePower_Thigh_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Power - Thigh','FontSize',20)
                                            
                                            subplot( 4, 2, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipPassivePower_Pelvis_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Passive Power - Pelvis','FontSize',20)
                                            
                                            subplot( 4, 2, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipActivePower_Pelvis_IndividualHopsContactPhase,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Power - Pelvis','FontSize',20)
                                            
                                            subplot( 4, 2, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipActiveEnergyTransfer_IndividualHopsContactPhase,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Energy Transfer','FontSize',20)
                                            
                                            subplot( 4, 2, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,TotalHipEnergyTransfer_IndividualHopsContactPhase,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Hip Energy Transfer','FontSize',20)
                                            
                                            subplot( 4, 2, 7:8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower,HipJointPowerScalar_Calculated_IndividualHopsContactPhase, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Hip Power','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'HipEnergyTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all

                                        end
                                end







%% Calculate Limb Length Data

                               
                                
                                
                                
                                %For loop. Each iteration = 1 frame in the segment angle time series
                                %(contact phase only).
                                for z = 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q)
                                
                                    %Foot angle relative to lab horizontal ( positive y, anterior-posterior axis ) = 180 - the sagittal plane angle relative to the lab. This
                                    %is because angle = 0 when toes are pointing straight down. 
                                    FootAngletoHorizontal( z, s ) = 180 - FootAngleSagittal_IndividualHopsContactPhase( z, s);
                                    
                                    %Foot vertical length = foot length * sin of foot angle to
                                    %horizontal. Sind = sin function when angle is in degrees
                                    FootVerticalLength( z, s ) = FootLength .* sind( FootAngletoHorizontal( z, s ) );
                                    
                                    %If shank sagittal plane angle relative to lab is positive, this means proximal shank
                                    %is tilted posteriorly. Shank angle relative to lab horizontal ( positive y, anterior-posterior axis ) is
                                    %therefore 180 - sagittal plane angle
                                    if ShankAngleSagittal_IndividualHopsContactPhase( z, s) > 0
                                        
                                        ShankAngletoHorizontal( z, s ) = 90 - ShankAngleSagittal_IndividualHopsContactPhase( z, s);
                                        
                                        %Shank vertical length = shank length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ShankVerticalLength( z, s ) = ShankLength .* sind( ShankAngletoHorizontal( z, s ) );
                                    
                                    
                                    
                                    %If shank sagittal plane angle relative to lab is negative, this means proximal shank
                                    %is tilted anteriorly. Shank angle relative to lab horizontal ( positive y, anterior-posterior axis ) is
                                    %therefore 90 - sagittal plane angle
                                    elseif ShankAngleSagittal_IndividualHopsContactPhase( z, s) < 0
                                    
                                        ShankAngletoHorizontal( z, s ) = 90 + ShankAngleSagittal_IndividualHopsContactPhase( z, s);
                                        
                                        %Shank vertical length = shank length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ShankVerticalLength( z, s ) = ShankLength .* sind( ShankAngletoHorizontal( z, s ) );
                                    
                                     %If shank sagittal plane angle relative to lab is 0, shank vertical
                                     %length = length of shank. This is the same as shank length * sind
                                     %(sin function when angle is in degrees)
                                    else
                                    
                                        %Shank vertical length = shank length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ShankVerticalLength( z, s ) = ShankLength .* sind( ShankAngleSagittal_IndividualHopsContactPhase( z, s) );
                                    
                                    end
                                    
                                    
                                    
                                    
                                    
                                    %If shank sagittal plane angle relative to lab is positive, this means proximal shank
                                    %is tilted posteriorly. Shank angle relative to lab horizontal ( positive y, anterior-posterior axis ) is
                                    %therefore 180 - sagittal plane angle
                                    if ThighAngleSagittal_IndividualHopsContactPhase( z, s) > 0
                                        
                                        ThighAngletoHorizontal( z, s ) = 90 - ThighAngleSagittal_IndividualHopsContactPhase( z, s);
                                        
                                        %Thigh vertical length = thigh length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ThighVerticalLength( z, s ) = ThighLength .* sind( ThighAngletoHorizontal( z, s ) );
                                    
                                    
                                    %If shank sagittal plane angle relative to lab is negative, this means proximal shank
                                    %is tilted anteriorly. Shank angle relative to lab horizontal ( positive y, anterior-posterior axis ) is
                                    %therefore 90 - sagittal plane angle
                                    elseif ThighAngleSagittal_IndividualHopsContactPhase( z, s) < 0
                                    
                                        ThighAngletoHorizontal( z, s ) = 90 + ThighAngleSagittal_IndividualHopsContactPhase( z, s);
                                        
                                        %Thigh vertical length = thigh length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ThighVerticalLength( z, s ) = ThighLength .* sind( ThighAngletoHorizontal( z, s ) );

                                    %If shank sagittal plane angle relative to lab is 0, shank vertical
                                     %length = length of shank. This is the same as shank length * sind
                                     %(sin function when angle is in degrees)
                                    else
                                    
                                        %Thigh vertical length = thigh length * sin of shank angle to
                                        %horizontal. Sind = sin function when angle is in degrees
                                        ThighVerticalLength( z, s ) = ThighLength .* sind( ThighAngleSagittal_IndividualHopsContactPhase( z, s) );
                                    
                                    end
                                
                                end



                                %Limb vertical = sum of vertical lengths of thigh, shank, and pelvis
                                LimbVerticalLength_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) =...
                                    FootVerticalLength( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) + ShankVerticalLength( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) +...
                                    ThighVerticalLength( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );
                                

                                %Pull out the vertical GRF from the data structure
                                vGRF_HopS = HoppingTrialP_OriginalDataTable.FP3_2( AllFrames_SthHopContactPhase_GRF );

                                
                                %Need to downsample vGRF so it has the same length as the motion capture
                                %data. First, find the number of analog data frames per motion capture
                                %data frame.
                                StepsforDownsampling_AnalogtoMoCap = 1500/MoCapSampHz;
                                


                                %Create a vector from 1 to length of vGRF signal for current hop.
                                %Spacing between intervals = the number of analog data frames per motion
                                %capture data frame
                                IntervalsforDownsampling = 1 : StepsforDownsampling_AnalogtoMoCap : LengthofContactPhase_Frames_GRFSampHz( s );
                                
                                %Initialize the vector to hold the downsampled vGRF
                                vGRF_Downsampled = NaN( numel( IntervalsforDownsampling ), 1 );
                                
                                %For loop for downsampling vGRF. Number of iterations for outer for loop
                                %= number of intervals in IntervalsforDownsampling
                                for z = 1 : numel( IntervalsforDownsampling )
                                
                                    %If we are NOT processing the last interval in
                                    %IntervalsforDownsampling, execute the indented code below
                                    if z ~= numel( IntervalsforDownsampling )
                                
                                        %Take the average of the frames in the next interval of the vGRF
                                        %signal. Find the relevant frames by accessing the z and z+1
                                        %intervals. Subtract 1 from the z+1 interval to find the last
                                        %frame in the z interval
                                        vGRF_Downsampled( z ) = mean( vGRF_HopS( IntervalsforDownsampling( z ) : ( IntervalsforDownsampling( z + 1 ) - 1 ) ), 'omitnan' );
                                
                                    %If we ARE processing the last interval in
                                    %IntervalsforDownsampling, execute the indented code below
                                    else
                                
                                        %Take the average of the frames in the last interval. Start with
                                        %the first frame in the last interval and end with the last frame
                                        %in the GRF signal
                                        vGRF_Downsampled( z ) = mean( vGRF_HopS( IntervalsforDownsampling( z ) : numel( vGRF_HopS ) ), 'omitnan' );
                                
                                    end
                                
                                end
                                

                                
                                %Ran into a weird issue where the downsampled vGRF was 1 element longer
                                %than the MoCap data. In that case, crop the vGRF_Downsampled data points
                                %to match the number in the MoCap data
                                if numel( vGRF_Downsampled ) > NumEl_SthHopContactPhase_MoCapSamplingHz(s,q)

                                    %Limb stiffness = vGRF divided by limb vertical length
                                    LimbStiffness_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) =...
                                        vGRF_Downsampled( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q) ) ./ LimbVerticalLength_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                %If the number of elements in vGRF_Downsampled is equal to the MoCap data, execute the code below. No need to crop the vGRF_Downsampled    
                                else

                                    %Limb stiffness = vGRF divided by limb vertical length
                                    LimbStiffness_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) =...
                                        vGRF_Downsampled ./ LimbVerticalLength_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );
                                
                                end
                                



                                
                                



%% Plot Limb Stiffness Data All Hops


                                

                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        %Only show plots if we told the code we're processing the last
                                        %hop
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                            %Create time vector for use in plotting. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_IndividualHopsContactPhase. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_LimbStiffness =  ( 1 : size( AnkleActivePower_Foot_IndividualHopsContactPhase, 1 ) ) ./ MoCapSampHz;
                                            
                                            
                                            figure( 'Color', '#F5F5DC',  'Name', 'Limb Stiffness, Hop 1')
                                            %Plot all hops at once
                                            plot( TimeVector_LimbStiffness, LimbStiffness_IndividualHopsContactPhase, 'LineWidth', 2 )
                                            ylim( [ 0, 6000 ] )
                                            set( gca, 'FontSize', 14 )
                                            xlabel( 'Time ( s )', 'FontSize', 16 )
                                            ylabel( 'Limb Stiffness (N/kg*m)', 'FontSize', 16 )
                                            title('Limb Stiffness', 'FontSize', 18 )
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'LimbStiffnessTimeSeries', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all
                                
                                        end

                                end
                                



%% Find Minimum L5-S1 Vertical Position


                                    %There may be multiple frames where L5-S1 marker is at its lowest
                                    %vertical position. If so, take the median and use this to define the
                                    %end of braking phase and beginning of propulsion phase. 
                                    FrameofMinL5S1Position_Median = median( find( L5S1VerticalPosition_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s) == min( L5S1VerticalPosition_IndividualHopsContactPhase(1:NumEl_SthHopContactPhase_MoCapSamplingHz(s,q) , s ), [],  'omitnan'  )  ),  'omitnan' );

                                    %If median is not an integer, take the frame on either side as the end of braking
                                    %phase and beginning of propulsion
                                    if ceil( FrameofMinL5S1Position_Median ) == FrameofMinL5S1Position_Median

                                      %Find the frame corresponding to the lowest position of the CoM. There
                                      %may be multiple frames - if so, take the first one as the end of
                                      %braking phase
                                      FrameofMinL5S1Position_EndBraking( s ) = FrameofMinL5S1Position_Median;

                                      %Find the frame corresponding to the lowest position of the CoM. osition of the CoM. There
                                      %may be multiple frames - if so, take the last one as the end of
                                      %braking phase
                                      FrameofMinL5S1Position_BeginPropulsion( s ) = FrameofMinL5S1Position_Median+1;

                                    else

                                        %Find the frame corresponding to the lowest position of the CoM. There
                                      %may be multiple frames - if so, take the first one as the end of
                                      %braking phase
                                      FrameofMinL5S1Position_EndBraking( s ) = floor( FrameofMinL5S1Position_Median );

                                      %Find the frame corresponding to the lowest position of the CoM. osition of the CoM. There
                                      %may be multiple frames - if so, take the last one as the end of
                                      %braking phase
                                      FrameofMinL5S1Position_BeginPropulsion( s ) = ceil( FrameofMinL5S1Position_Median );

                                    end


%% Split Joint Reaction Force and Joint Linear Velocity into Braking and Propulsion Phases

                                    %Find the length of the Braking and Propulsion phases.
                                     %Braking phase is from beginning of ground contact to frame
                                     %of lowest position of CoM. Propulsion phase is from frame of
                                     %lowest position of CoM to end of ground contact
                                    LengthofBrakingPhase( s ) = numel( 1 : FrameofMinL5S1Position_EndBraking( s ) );
                                    LengthofPropulsionPhase( s ) = numel( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q) );

                                        
                                    %Find length of braking and propulsion phase in seconds
                                    LengthofBrakingPhase_Seconds( s ) = LengthofBrakingPhase( s ) ./ MoCapSampHz;
                                    LengthofPropulsionPhase_Seconds( s ) = LengthofPropulsionPhase( s ) ./ MoCapSampHz;

                                    %Segment out BRAKING phase from joint reaction force time series
                                        %Ankle - X, then Y, then Z axis
                                    AnkleJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    AnkleJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    AnkleJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                        %Knee - X, then Y, then Z axis
                                    KneeJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    KneeJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    KneeJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                        %Hip - X, then Y, then Z axis
                                    HipJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        HipJRF_DistalSegment_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    HipJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        HipJRF_DistalSegment_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                    HipJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) =...
                                        HipJRF_DistalSegment_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;



                                    %Segment out PROPULSION phase from joint reaction force time series
                                        %Ankle - X, then Y, then Z axis
                                    AnkleJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    AnkleJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    AnkleJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );


                                        %Knee - X, then Y, then Z axis
                                    KneeJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    KneeJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    KneeJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJRF_DistalSegment_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );


                                        %Hip - X, then Y, then Z axis
                                    HipJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJRF_DistalSegment_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    HipJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJRF_DistalSegment_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    HipJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJRF_DistalSegment_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );


                                    %Segment out BRAKING phase from joint linear velocity time series
                                        %Ankle - X, then Y, then Z axis
                                    AnkleJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleJointLinearVel_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    AnkleJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleJointLinearVel_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    AnkleJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleJointLinearVel_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                        %Knee - X, then Y, then Z axis
                                    KneeJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeJointLinearVel_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    KneeJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeJointLinearVel_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    KneeJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeJointLinearVel_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                        %Hip - X, then Y, then Z axis
                                    HipJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipJointLinearVel_X_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    HipJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipJointLinearVel_Y_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    HipJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipJointLinearVel_Z_IndividualHopsContactPhase(  1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;



                                    %Segment out PROPULSION phase from joint linear velocity time series
                                        %Ankle - X, then Y, then Z axis
                                            %X-axis
                                    AnkleJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJointLinearVel_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    AnkleJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJointLinearVel_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    AnkleJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        AnkleJointLinearVel_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                        %Knee - X, then Y, then Z axis
                                    KneeJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJointLinearVel_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );
                                    
                                    KneeJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJointLinearVel_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );
                                    
                                    KneeJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        KneeJointLinearVel_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                        %Hip - X, then Y, then Z axis
                                    HipJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJointLinearVel_X_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );

                                    HipJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJointLinearVel_Y_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );
                                    
                                    HipJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) =...
                                        HipJointLinearVel_Z_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s );




%% Split Segment Power into Braking and Propulsion Phases Based on L5S1 Position


                                
                                    %Ankle active power - foot segment - braking phase
                                AnkleActivePower_Foot_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleActivePower_Foot_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Ankle active power - shank segment - braking phase
                                AnkleActivePower_Shank_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleActivePower_Shank_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Ankle passive power - foot segment - braking phase
                                AnklePassivePower_Foot_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnklePassivePower_Foot_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Ankle passive power - shank segment - braking phase
                                AnklePassivePower_Shank_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnklePassivePower_Shank_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Ankle active energy transfer - braking phase
                                AnkleActiveEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleActiveEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total ankle energy transfer - braking phase
                                TotalAnkleEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalAnkleEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Ankle joint power scalar - braking phase
                                AnkleJointPowerScalar_Calculated_Braking( 1 : LengthofBrakingPhase( s ), s ) = AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                            
                                    %Knee active power - thigh segment - braking phase
                                KneeActivePower_Thigh_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeActivePower_Thigh_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Knee active power - shank segment - braking phase
                                KneeActivePower_Shank_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeActivePower_Shank_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Knee passive power - thigh segment - braking phase
                                KneePassivePower_Thigh_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneePassivePower_Thigh_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Knee passive power - shank segment - braking phase
                                KneePassivePower_Shank_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneePassivePower_Shank_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Knee active energy transfer - braking phase
                                KneeActiveEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeActiveEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total knee transfer - braking phase
                                TotalKneeEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalKneeEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Knee joint power scalar - braking phase
                                KneeJointPowerScalar_Calculated_Braking( 1 : LengthofBrakingPhase( s ), s ) = KneeJointPowerScalar_Calculated_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                            
                                    %Hip active power - thigh segment - braking phase
                                HipActivePower_Thigh_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipActivePower_Thigh_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Hip active power - pelvis segment - braking phase
                                HipActivePower_Pelvis_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipActivePower_Pelvis_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Hip passive power - thigh segment - braking phase
                                HipPassivePower_Thigh_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipPassivePower_Thigh_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Hip passive power - pelvis segment - braking phase
                                HipPassivePower_Pelvis_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipPassivePower_Pelvis_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Hip active energy transfer - braking phase
                                HipActiveEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipActiveEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total hip energy transfer - braking phase
                                TotalHipEnergyTransfer_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalHipEnergyTransfer_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Hip joint power scalar - braking phase
                                HipJointPowerScalar_Calculated_Braking( 1 : LengthofBrakingPhase( s ), s ) = HipJointPowerScalar_Calculated_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                            

                                    
                                    %Total foot energy - braking phase
                                TotalFootEnergy_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalFootEnergy_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total shank energy - braking phase
                                TotalShankEnergy_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalShankEnergy_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total thigh energy - braking phase
                                TotalThighEnergy_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalThighEnergy_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                                    %Total pelvis energy - braking phase
                                TotalPelvisEnergy_Braking( 1 : LengthofBrakingPhase( s ), s ) = TotalPelvisEnergy_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;
                            
                            
                            
                            
                                
                                    %Ankle active power - foot segment - propulsion phase
                                AnkleActivePower_Foot_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnkleActivePower_Foot_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Ankle active power - shank segment - propulsion phase
                                AnkleActivePower_Shank_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnkleActivePower_Shank_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Ankle passive power - foot segment - propulsion phase
                                AnklePassivePower_Foot_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnklePassivePower_Foot_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Ankle passive power - shank segment - propulsion phase
                                AnklePassivePower_Shank_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnklePassivePower_Shank_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Ankle active energy transfer - propulsion phase
                                AnkleActiveEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnkleActiveEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total ankle energy transfer - propulsion phase
                                TotalAnkleEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalAnkleEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Ankle joint power scalar - propulsion phase
                                AnkleJointPowerScalar_Calculated_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                            
                                    %Knee active power - thigh segment - propulsion phase
                                KneeActivePower_Thigh_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneeActivePower_Thigh_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Knee active power - shank segment - propulsion phase
                                KneeActivePower_Shank_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneeActivePower_Shank_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Knee passive power - thigh segment - propulsion phase
                                KneePassivePower_Thigh_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneePassivePower_Thigh_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Knee passive power - shank segment - propulsion phase
                                KneePassivePower_Shank_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneePassivePower_Shank_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Knee active energy transfer - propulsion phase
                                KneeActiveEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneeActiveEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total knee energy transfer - propulsion phase
                                TotalKneeEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalKneeEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Knee joint power scalar - propulsion phase
                                KneeJointPowerScalar_Calculated_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = KneeJointPowerScalar_Calculated_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                            
                                    %Hip active power - thigh segment - propulsion phase
                                HipActivePower_Thigh_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipActivePower_Thigh_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Hip active power - pelvis segment - propulsion phase
                                HipActivePower_Pelvis_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipActivePower_Pelvis_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Hip passive power - thigh segment - propulsion phase
                                HipPassivePower_Thigh_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipPassivePower_Thigh_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Hip passive power - pelvis segment - propulsion phase
                                HipPassivePower_Pelvis_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipPassivePower_Pelvis_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Hip active energy transfer - propulsion phase
                                HipActiveEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipActiveEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total hip energy transfer - propulsion phase
                                TotalHipEnergyTransfer_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalHipEnergyTransfer_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Hip joint power scalar - propulsion phase
                                HipJointPowerScalar_Calculated_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = HipJointPowerScalar_Calculated_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                            
                                
                                    %Total foot energy - propulsion phase
                                TotalFootEnergy_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalFootEnergy_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total shank energy - propulsion phase
                                TotalShankEnergy_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalShankEnergy_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total thigh energy - propulsion phase
                                TotalThighEnergy_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalThighEnergy_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                                    %Total pelvisenergy - propulsion phase
                                TotalPelvisEnergy_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = TotalPelvisEnergy_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;
                            

                                %Initial power for each segment - beginning of braking and propulsion
                                %phases
                                    %Braking phase
                                        %Foot
                                InitialFootEnergy_Braking( s ) = TotalFootEnergy_Braking( 1, s );
                                        %Shank
                                InitialShankEnergy_Braking( s ) = TotalShankEnergy_Braking( 1, s );
                                        %Thigh
                                InitialThighEnergy_Braking( s ) = TotalThighEnergy_Braking( 1, s );
                                        %Pelvis
                                InitialPelvisEnergy_Braking( s ) = TotalPelvisEnergy_Braking( 1, s );

                                    %Propulsion phase
                                        %Foot
                                InitialFootEnergy_Propulsion( s ) = TotalFootEnergy_Propulsion( 1, s );
                                        %Shank
                                InitialShankEnergy_Propulsion( s ) = TotalShankEnergy_Propulsion( 1, s );
                                        %Thigh
                                InitialThighEnergy_Propulsion( s ) = TotalThighEnergy_Propulsion( 1, s );
                                        %Pelvis
                                InitialPelvisEnergy_Propulsion( s ) = TotalPelvisEnergy_Propulsion( 1, s );



%% Plot Segment Power - Split Into Braking and Propulsion Phases

                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        %Only show plots if we're processing the last hop
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                            %Create time vector for braking phase time series. Will use
                                            %only in plots. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_Braking. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_SegmentPower_BrakingPhase =  ( 1 : size( AnkleActivePower_Foot_Braking, 1 ) ) ./ MoCapSampHz;

                                            %Create time vector for propulsion phase time series. Will use
                                            %only in plots. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_Propulsion. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_SegmentPower_PropulsionPhase =  ( 1 : size( AnkleActivePower_Foot_Propulsion, 1 ) ) ./ MoCapSampHz;
                                            
                                            %Plot Foot Power
                                            figure( 'Color', '#F5F5DC', 'Name', ['Foot Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Foot Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 3, 2, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase, AnklePassivePower_Foot_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Foot Passive Power - Ankle - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 2, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase, AnklePassivePower_Foot_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 2, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase, AnkleActivePower_Foot_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Foot Active Power - Ankle - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 2, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase, AnkleActivePower_Foot_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 2, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase, TotalFootEnergy_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Foot Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 2, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase, TotalFootEnergy_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'FootEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            
                                            %Plot Shank Power
                                            figure( 'Color', '#F5F5DC', 'Name', ['Shank Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Shank Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 3, 4, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnklePassivePower_Shank_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Passive Power - Ankle - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnklePassivePower_Shank_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnkleActivePower_Shank_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Active Power - Ankle - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnkleActivePower_Shank_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneePassivePower_Shank_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Passive Power - Knee - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneePassivePower_Shank_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 7 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeActivePower_Shank_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Shank Active Power - Knee - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeActivePower_Shank_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 9:10 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalShankEnergy_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Shank Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 11:12 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalShankEnergy_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'ShankEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            
                                            


                                            %Plot Thigh Power
                                            figure( 'Color', '#F5F5DC', 'Name', ['Thigh Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Thigh Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 3, 4, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneePassivePower_Thigh_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Passive Power - Knee - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneePassivePower_Thigh_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeActivePower_Thigh_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Active Power - Knee - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeActivePower_Thigh_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipPassivePower_Thigh_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Passive Power - Hip - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipPassivePower_Thigh_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 7 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipActivePower_Thigh_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Thigh Active Power - Hip - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipActivePower_Thigh_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 4, 9:10 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalThighEnergy_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Thigh Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 4, 11:12 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalThighEnergy_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'ThighEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            
                                            
                                            
                                            
                                            %Plot Pelvis Power
                                            figure( 'Color', '#F5F5DC', 'Name', ['Pelvis Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Pelvis Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 3, 2, 1)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipPassivePower_Pelvis_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Pelvis Passive Power - Hip - Braking Phase ' ,'FontSize',20)
                                            
                                            subplot( 3, 2, 2)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipPassivePower_Pelvis_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 2, 3)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipActivePower_Pelvis_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Pelvis Active Power - Hip - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 2, 4)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipActivePower_Pelvis_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 3, 2, 5)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalPelvisEnergy_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Pelvis Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 3, 2, 6)
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalPelvisEnergy_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'PelvisEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all

                                        end

                                end







%% Plot Joint Power - Split Into Braking and Propulsion Phases

                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        %Only show plots if we're processing the last hop
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))

                                             %Create time vector for braking phase time series. Will use
                                            %only in plots. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_Braking. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_SegmentPower_BrakingPhase =  ( 1 : size( AnkleActivePower_Foot_Braking, 1 ) ) ./ MoCapSampHz;

                                            %Create time vector for propulsion phase time series. Will use
                                            %only in plots. Determine the length
                                            %by finding the number of rows in
                                            %AnkleActivePower_Foot_Propulsion. Create
                                            %vector from 1 to number of rows and divide all numbers by
                                            %the sampling rate (250 Hz)
                                            TimeVector_SegmentPower_PropulsionPhase =  ( 1 : size( AnkleActivePower_Foot_Propulsion, 1 ) ) ./ MoCapSampHz;
                                            
                                            %Plot ankle power flow time series
                                            figure( 'Color', '#F5F5DC', 'Name', ['Ankle Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Ankle Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 4, 4, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnklePassivePower_Foot_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Passive Power- Foot - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnklePassivePower_Foot_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnkleActivePower_Foot_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Power- Foot - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnkleActivePower_Foot_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnklePassivePower_Shank_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Passive Power- Shank - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnklePassivePower_Shank_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 7 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnkleActivePower_Shank_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Power- Shank - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnkleActivePower_Shank_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 9 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnkleActiveEnergyTransfer_Braking,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Ankle Active Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 10 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnkleActiveEnergyTransfer_Propulsion,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 11 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalAnkleEnergyTransfer_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Ankle Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 12 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalAnkleEnergyTransfer_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 13:14 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,AnkleJointPowerScalar_Calculated_Braking, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Ankle Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 15:16 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,AnkleJointPowerScalar_Calculated_Propulsion, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'AnkleEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            



                                            %Plot knee power flow time series
                                            figure( 'Color', '#F5F5DC', "Name", ['Knee Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783])
                                            
                                            sgtitle( 'Knee Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 4, 4, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneePassivePower_Shank_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Passive Power- Shank - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneePassivePower_Shank_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeActivePower_Shank_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Power- Shank - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeActivePower_Shank_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneePassivePower_Thigh_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Passive Power - Thigh - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneePassivePower_Thigh_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 7 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeActivePower_Thigh_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Power - Thigh - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeActivePower_Thigh_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 9 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeActiveEnergyTransfer_Braking,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Knee Active Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 10 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeActiveEnergyTransfer_Propulsion,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 11 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalKneeEnergyTransfer_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Knee Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 12 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalKneeEnergyTransfer_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 13:14 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,KneeJointPowerScalar_Calculated_Braking, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Knee Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 15:16 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,KneeJointPowerScalar_Calculated_Propulsion, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'KneeEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            



                                            %Plot hip power flow time series
                                            figure( 'Color', '#F5F5DC', "Name", ['Hip Power - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Hip Power - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 4, 4, 1 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipPassivePower_Thigh_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Passive Power - Thigh - Braking Phase ','FontSize',20)

                                            subplot( 4, 4, 2 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipPassivePower_Thigh_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 3 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipActivePower_Thigh_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Power - Thigh - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 4 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipActivePower_Thigh_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 5 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipPassivePower_Pelvis_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Passive Power - Pelvis - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 6 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipPassivePower_Pelvis_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 7 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipActivePower_Pelvis_Braking,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Power - Pelvis - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 8 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipActivePower_Pelvis_Propulsion,'LineWidth',2.5,'LineStyle','--')
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 9 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipActiveEnergyTransfer_Braking,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Hip Active Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 10 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipActiveEnergyTransfer_Propulsion,'LineWidth',3)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 11 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,TotalHipEnergyTransfer_Braking,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Hip Energy Transfer - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 12 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,TotalHipEnergyTransfer_Propulsion,'LineWidth',2.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            subplot( 4, 4, 13:14 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_BrakingPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_BrakingPhase,HipJointPowerScalar_Calculated_Braking, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Total Hip Power - Braking Phase ','FontSize',20)
                                            
                                            subplot( 4, 4, 15:16 )
                                            %Next four lines create a line at y = 0 to separate positive
                                            %from negative
                                            L = line( [ 0, max( TimeVector_SegmentPower_PropulsionPhase ) ], [ 0, 0 ] );
                                            L.Color = 'k';
                                            L.LineStyle = '--';
                                            L.LineWidth = 1.5;
                                            hold on
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase,HipJointPowerScalar_Calculated_Propulsion, 'LineWidth',3.5)
                                            hold off
                                            ylim( [ -20, 20 ] )
                                            yticks( -20 : 4 : 20 )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'HipEnergyTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all

                                        end
                                end







%% Split Limb Stiffness into Braking and Propulsion Phases

                                %Limb stiffness - braking phase
                                LimbStiffness_Braking( 1 : LengthofBrakingPhase( s ), s ) = LimbStiffness_IndividualHopsContactPhase( 1 : FrameofMinL5S1Position_EndBraking( s ), s ) ;

                                %Limb stiffness - propulsion phase
                                LimbStiffness_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) = LimbStiffness_IndividualHopsContactPhase( FrameofMinL5S1Position_BeginPropulsion( s ) : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ;

                                

                                

%% Plot Limb Stiffness Broken Into Braking and Propulsion Phases

                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
                                        %Only show plots if we're processing the last hop
                                        if s == numel(GContactBegin_MoCapFrameNumbers(:,q))


                                            %Plot hip power flow time series
                                            figure( 'Color', '#F5F5DC', "Name", ['Limb Stiffness - Split into Braking and Propulsion Phases  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' 'Hop# ' num2str( s ) ] ,'Visible',"on", 'Position',[24 6 1399 783] )
                                            
                                            sgtitle( 'Limb Stiffness - Split into Braking and Propulsion Phases', 'FontSize', 20 )
                                            
                                            subplot( 1, 2, 1 )
                                            %Plot all hops at once
                                            plot( TimeVector_SegmentPower_BrakingPhase, LimbStiffness_Braking,'LineWidth',2.5)
                                            ylim( [ 0, 6000 ] )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Limb Stiffness - Braking Phase','FontSize',20)

                                            subplot( 1, 2, 2 )
                                            %Plot all hops at once
                                            plot(TimeVector_SegmentPower_PropulsionPhase, LimbStiffness_Propulsion,'LineWidth',2.5)
                                            ylim( [ 0, 6000 ] )
                                            set( gca, 'FontSize', 14 )
                                            xlabel('Time ( s )','FontSize',16)
                                            ylabel( 'Power (W/kg)', 'FontSize', 16 )
                                            title('Propulsion Phase','FontSize',20)
                                            
                                            
                                            savefig( [ ParticipantList{ n }, '_', 'LimbStiffnessTimeSeries - Split into Braking and Propulsion Phases ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                            
                                            pause
                                            
                                            close all

                                        end

                                end




%% Calculate Peak and Average Limb Stiffness


                                %Find peak limb stiffness - contact phase
                                PeakLimbStiffness_ContactPhase( s ) = max( LimbStiffness_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) );

                                %Find peak limb stiffness - braking phase
                                PeakLimbStiffness_BrakingPhase( s ) = max( LimbStiffness_Braking( 1 : LengthofBrakingPhase( s ), s ) );

                                %Find peak limb stiffness - propulsion phase
                                PeakLimbStiffness_PropulsionPhase( s ) = max( LimbStiffness_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );




                                %Calculate average limb stiffness by integrating limb stiffness then
                                %dividing by length of contact phase
                                AverageLimbStiffness_ContactPhase( s ) =...
                                    trapz( MoCapTimeStep, LimbStiffness_IndividualHopsContactPhase( 1 : NumEl_SthHopContactPhase_MoCapSamplingHz(s,q), s ) ) ./...
                                    NumEl_SthHopContactPhase_MoCapSamplingHz(s,q);

                                %Calculate average limb stiffness for braking phase by integrating limb stiffness then
                                %dividing by length of braking phase
                                AverageLimbStiffness_BrakingPhase( s ) =...
                                    trapz( MoCapTimeStep, LimbStiffness_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ./ LengthofBrakingPhase( s );

                                %Calculate average limb stiffness for propulsion phase by integrating limb stiffness then
                                %dividing by length of propulsion phase
                                AverageLimbStiffness_PropulsionPhase( s ) =...
                                    trapz( MoCapTimeStep, LimbStiffness_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ./ LengthofPropulsionPhase( s );






                            
%% Calculate Energy Flow Integrals

                                
                            
                                %Initialize vectors to hold integrated segment power data
                                    %Ankle active power - foot segment - braking phase
                                AnkleActivePower_Foot_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Ankle active power - shank segment - braking phase
                                AnkleActivePower_Shank_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Ankle passive power - foot segment - braking phase
                                AnklePassivePower_Foot_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Ankle passive power - shank segment - braking phase
                                AnklePassivePower_Shank_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Ankle active energy transfer - braking phase
                                AnkleActiveEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total ankle energy transfer - braking phase
                                TotalAnkleEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Ankle joint power scalar - braking phase
                                AnkleJointPowerScalar_Calculated_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                            
                                    %Ankle active power - foot segment - propulsion phase
                                AnkleActivePower_Foot_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Ankle active power - shank segment - propulsion phase
                                AnkleActivePower_Shank_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Ankle passive power - foot segment - propulsion phase
                                AnklePassivePower_Foot_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Ankle passive power - shank segment - propulsion phase
                                AnklePassivePower_Shank_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Ankle active energy transfer - propulsion phase
                                AnkleActiveEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total ankle energy transfer - propulsion phase
                                TotalAnkleEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Ankle joint power scalar - propulsion phase
                                AnkleJointPowerScalar_Calculated_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                            
                            
                                
                                    %Knee active power - thigh segment - braking phase
                                KneeActivePower_Thigh_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Knee active power - shank segment - braking phase
                                KneeActivePower_Shank_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Knee passive power - thigh segment - braking phase
                                KneePassivePower_Thigh_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Knee passive power - shank segment - braking phase
                                KneePassivePower_Shank_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Knee active energy transfer - braking phase
                                KneeActiveEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total knee energy transfer - braking phase
                                TotalKneeEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Knee joint power scalar - braking phase
                                KneeJointPowerScalar_Calculated_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                            
                                    %Knee active power - thigh segment - propulsion phase
                                KneeActivePower_Thigh_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Knee active power - shank segment - propulsion phase
                                KneeActivePower_Shank_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Knee passive power - thigh segment - propulsion phase
                                KneePassivePower_Thigh_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Knee passive power - shank segment - propulsion phase
                                KneePassivePower_Shank_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Knee active energy transfer - propulsion phase
                                KneeActiveEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total knee energy transfer - propulsion phase
                                TotalKneeEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Knee joint power scalar - propulsion phase
                                KneeJointPowerScalar_Calculated_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                            
                            
                            
                                    %Hip active power - thigh segment - braking phase
                                HipActivePower_Thigh_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Hip active power - pelvis segment - braking phase
                                HipActivePower_Pelvis_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Hip passive power - thigh segment - braking phase
                                HipPassivePower_Thigh_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Hip passive power - pelvis segment - braking phase
                                HipPassivePower_Pelvis_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Hip active energy transfer - braking phase
                                HipActiveEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total hip energy transfer - braking phase
                                TotalHipEnergyTransfer_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Hip joint power scalar - braking phase
                                HipJointPowerScalar_Calculated_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                            
                                    %Hip active power - thigh segment - propulsion phase
                                HipActivePower_Thigh_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Hip active power - pelvis segment - propulsion phase
                                HipActivePower_Pelvis_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Hip passive power - thigh segment - propulsion phase
                                HipPassivePower_Thigh_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Hip passive power - pelvis segment - propulsion phase
                                HipPassivePower_Pelvis_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Hip active energy transfer - propulsion phase
                                HipActiveEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total hip energy transfer - propulsion phase
                                TotalHipEnergyTransfer_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Hip joint power scalar - propulsion phase
                                HipJointPowerScalar_Calculated_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                            
                            
                                    %Total foot energy - braking phase
                                TotalFootEnergy_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total shankenergy - braking phase
                                TotalShankEnergy_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total thigh energy - braking phase
                                TotalThighEnergy_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                                    %Total pelvis energy - braking phase
                                TotalPelvisEnergy_Braking_TempVec = NaN( LengthofBrakingPhase( s ) - 1 ,1 );
                            
                                    %Total foot energy - propulsion phase
                                TotalFootEnergy_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total shank energy - propulsion phase
                                TotalShankEnergy_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total thigh energy - propulsion phase
                                TotalThighEnergy_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                                    %Total pelvis energy - propulsion phase
                                TotalPelvisEnergy_Propulsion_TempVec = NaN( LengthofPropulsionPhase( s ) - 1 ,1 );
                            
                            
                            
                                
                                %Integrate braking phasing ankle/knee/hip and segment power variables.
                                %Use trapezoidal integration. Time step = inverse of the motion capture
                                %sampling rate (250 Hz)
                                for k = 1 : (LengthofBrakingPhase( s ) - 1)
                            
                                    AnkleActivePower_Foot_Braking_TempVec( k ) = 0.5 .* ( ( AnkleActivePower_Foot_Braking( k, s ) + AnkleActivePower_Foot_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleActivePower_Shank_Braking_TempVec( k ) = 0.5 .* ( ( AnkleActivePower_Shank_Braking( k, s ) + AnkleActivePower_Shank_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnklePassivePower_Foot_Braking_TempVec( k ) = 0.5 .* ( ( AnklePassivePower_Foot_Braking( k, s ) + AnklePassivePower_Foot_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnklePassivePower_Shank_Braking_TempVec( k ) = 0.5 .* ( ( AnklePassivePower_Shank_Braking( k, s ) + AnklePassivePower_Shank_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleActiveEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( AnkleActiveEnergyTransfer_Braking( k, s ) + AnkleActiveEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalAnkleEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( TotalAnkleEnergyTransfer_Braking( k, s ) + TotalAnkleEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleJointPowerScalar_Calculated_Braking_TempVec( k ) = 0.5 .* ( ( AnkleJointPowerScalar_Calculated_Braking( k, s ) + AnkleJointPowerScalar_Calculated_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    KneeActivePower_Thigh_Braking_TempVec( k ) = 0.5 .* ( ( KneeActivePower_Thigh_Braking( k, s ) + KneeActivePower_Thigh_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeActivePower_Shank_Braking_TempVec( k ) = 0.5 .* ( ( KneeActivePower_Shank_Braking( k, s ) + KneeActivePower_Shank_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneePassivePower_Thigh_Braking_TempVec( k ) = 0.5 .* ( ( KneePassivePower_Thigh_Braking( k, s ) + KneePassivePower_Thigh_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneePassivePower_Shank_Braking_TempVec( k ) = 0.5 .* ( ( KneePassivePower_Shank_Braking( k, s ) + KneePassivePower_Shank_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeActiveEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( KneeActiveEnergyTransfer_Braking( k, s ) + KneeActiveEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalKneeEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( TotalKneeEnergyTransfer_Braking( k, s ) + TotalKneeEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeJointPowerScalar_Calculated_Braking_TempVec( k ) = 0.5 .* ( ( KneeJointPowerScalar_Calculated_Braking( k, s ) + KneeJointPowerScalar_Calculated_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    HipActivePower_Thigh_Braking_TempVec( k ) = 0.5 .* ( ( HipActivePower_Thigh_Braking( k, s ) + HipActivePower_Thigh_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipActivePower_Pelvis_Braking_TempVec( k ) = 0.5 .* ( ( HipActivePower_Pelvis_Braking( k, s ) + HipActivePower_Pelvis_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipPassivePower_Thigh_Braking_TempVec( k ) = 0.5 .* ( ( HipPassivePower_Thigh_Braking( k, s ) + HipPassivePower_Thigh_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipPassivePower_Pelvis_Braking_TempVec( k ) = 0.5 .* ( ( HipPassivePower_Pelvis_Braking( k, s ) + HipPassivePower_Pelvis_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipActiveEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( HipActiveEnergyTransfer_Braking( k, s ) + HipActiveEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalHipEnergyTransfer_Braking_TempVec( k ) = 0.5 .* ( ( TotalHipEnergyTransfer_Braking( k, s ) + TotalHipEnergyTransfer_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipJointPowerScalar_Calculated_Braking_TempVec( k ) = 0.5 .* ( ( HipJointPowerScalar_Calculated_Braking( k, s ) + HipJointPowerScalar_Calculated_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    TotalFootEnergy_Braking_TempVec( k ) = 0.5 .* ( ( TotalFootEnergy_Braking( k, s ) + TotalFootEnergy_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalShankEnergy_Braking_TempVec( k ) = 0.5 .* ( ( TotalShankEnergy_Braking( k, s ) + TotalShankEnergy_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalThighEnergy_Braking_TempVec( k ) = 0.5 .* ( ( TotalThighEnergy_Braking( k, s ) + TotalThighEnergy_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalPelvisEnergy_Braking_TempVec( k ) = 0.5 .* ( ( TotalPelvisEnergy_Braking( k, s ) + TotalPelvisEnergy_Braking( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                end
                            
                            
                                
                                %Integrate propulsion phase ankle/knee/hip and segment power variables.
                                %Use trapezoidal integration. Time step = inverse of the motion capture
                                %sampling rate (250 Hz)
                                for k = 1 : (LengthofPropulsionPhase( s ) - 1)
                            
                                    AnkleActivePower_Foot_Propulsion_TempVec( k ) = 0.5 .* ( ( AnkleActivePower_Foot_Propulsion( k, s ) + AnkleActivePower_Foot_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleActivePower_Shank_Propulsion_TempVec( k ) = 0.5 .* ( ( AnkleActivePower_Shank_Propulsion( k, s ) + AnkleActivePower_Shank_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnklePassivePower_Foot_Propulsion_TempVec( k ) = 0.5 .* ( ( AnklePassivePower_Foot_Propulsion( k, s ) + AnklePassivePower_Foot_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnklePassivePower_Shank_Propulsion_TempVec( k ) = 0.5 .* ( ( AnklePassivePower_Shank_Propulsion( k, s ) + AnklePassivePower_Shank_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleActiveEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( AnkleActiveEnergyTransfer_Propulsion( k, s ) + AnkleActiveEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalAnkleEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalAnkleEnergyTransfer_Propulsion( k, s ) + TotalAnkleEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    AnkleJointPowerScalar_Calculated_Propulsion_TempVec( k ) = 0.5 .* ( ( AnkleJointPowerScalar_Calculated_Propulsion( k, s ) + AnkleJointPowerScalar_Calculated_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    KneeActivePower_Thigh_Propulsion_TempVec( k ) = 0.5 .* ( ( KneeActivePower_Thigh_Propulsion( k, s ) + KneeActivePower_Thigh_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeActivePower_Shank_Propulsion_TempVec( k ) = 0.5 .* ( ( KneeActivePower_Shank_Propulsion( k, s ) + KneeActivePower_Shank_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneePassivePower_Thigh_Propulsion_TempVec( k ) = 0.5 .* ( ( KneePassivePower_Thigh_Propulsion( k, s ) + KneePassivePower_Thigh_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneePassivePower_Shank_Propulsion_TempVec( k ) = 0.5 .* ( ( KneePassivePower_Shank_Propulsion( k, s ) + KneePassivePower_Shank_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeActiveEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( KneeActiveEnergyTransfer_Propulsion( k, s ) + KneeActiveEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalKneeEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalKneeEnergyTransfer_Propulsion( k, s ) + TotalKneeEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    KneeJointPowerScalar_Calculated_Propulsion_TempVec( k ) = 0.5 .* ( ( KneeJointPowerScalar_Calculated_Propulsion( k, s ) + KneeJointPowerScalar_Calculated_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    HipActivePower_Thigh_Propulsion_TempVec( k ) = 0.5 .* ( ( HipActivePower_Thigh_Propulsion( k, s ) + HipActivePower_Thigh_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipActivePower_Pelvis_Propulsion_TempVec( k ) = 0.5 .* ( ( HipActivePower_Pelvis_Propulsion( k, s ) + HipActivePower_Pelvis_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipPassivePower_Thigh_Propulsion_TempVec( k ) = 0.5 .* ( ( HipPassivePower_Thigh_Propulsion( k, s ) + HipPassivePower_Thigh_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipPassivePower_Pelvis_Propulsion_TempVec( k ) = 0.5 .* ( ( HipPassivePower_Pelvis_Propulsion( k, s ) + HipPassivePower_Pelvis_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipActiveEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( HipActiveEnergyTransfer_Propulsion( k, s ) + HipActiveEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalHipEnergyTransfer_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalHipEnergyTransfer_Propulsion( k, s ) + TotalHipEnergyTransfer_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    HipJointPowerScalar_Calculated_Propulsion_TempVec( k ) = 0.5 .* ( ( HipJointPowerScalar_Calculated_Propulsion( k, s ) + HipJointPowerScalar_Calculated_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                    TotalFootEnergy_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalFootEnergy_Propulsion( k, s ) + TotalFootEnergy_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalShankEnergy_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalShankEnergy_Propulsion( k, s ) + TotalShankEnergy_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalThighEnergy_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalThighEnergy_Propulsion( k, s ) + TotalThighEnergy_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                                    TotalPelvisEnergy_Propulsion_TempVec( k ) = 0.5 .* ( ( TotalPelvisEnergy_Propulsion( k, s ) + TotalPelvisEnergy_Propulsion( k+1, s ) ) .* (MoCapTimeStep) );
                            
                                end
                            
                            
                                %Sum the values in the braking phase ankle power temporary vectors then divide  by
                                %length of braking phase - results in average power over the braking
                                %phase.
                                AnkleAverageActivePower_Foot_Braking( s ) = sum( AnkleActivePower_Foot_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAverageActivePower_Shank_Braking( s ) = sum( AnkleActivePower_Shank_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAveragePassivePower_Foot_Braking( s ) = sum( AnklePassivePower_Foot_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAveragePassivePower_Shank_Braking( s ) = sum( AnklePassivePower_Shank_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAverageActiveEnergyTransfer_Braking( s ) = sum( AnkleActiveEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAverageTotalEnergyTransfer_Braking( s ) = sum( TotalAnkleEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                AnkleAverageJointPowerScalar_Braking( s ) = sum( AnkleJointPowerScalar_Calculated_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );

                                %Sum the values in the braking phase knee power temporary vectors then divide  by
                                %length of braking phase - results in average power over the braking
                                %phase.
                                KneeAverageActivePower_Thigh_Braking( s ) = sum( KneeActivePower_Thigh_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAverageActivePower_Shank_Braking( s ) = sum( KneeActivePower_Shank_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAveragePassivePower_Thigh_Braking( s ) = sum( KneePassivePower_Thigh_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAveragePassivePower_Shank_Braking( s ) = sum( KneePassivePower_Shank_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAverageActiveEnergyTransfer_Braking( s ) = sum( KneeActiveEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAverageTotalEnergyTransfer_Braking( s ) = sum( TotalKneeEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                KneeAverageJointPowerScalar_Braking( s ) = sum( KneeJointPowerScalar_Calculated_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );

                                %Sum the values in the braking phase hip power temporary vectors then divide  by
                                %length of braking phase - results in average power over the braking
                                %phase.
                                HipAverageActivePower_Thigh_Braking( s ) = sum( HipActivePower_Thigh_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAverageActivePower_Pelvis_Braking( s ) = sum( HipActivePower_Pelvis_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAveragePassivePower_Thigh_Braking( s ) = sum( HipPassivePower_Thigh_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAveragePassivePower_Pelvis_Braking( s ) = sum( HipPassivePower_Pelvis_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAverageActiveEnergyTransfer_Braking( s ) = sum( HipActiveEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAverageTotalEnergyTransfer_Braking( s ) = sum( TotalHipEnergyTransfer_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                HipAverageJointPowerScalar_Braking( s ) = sum( HipJointPowerScalar_Calculated_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                            

                                %Sum the values in the braking phase segment total power temporary vectors then divide  by
                                %length of braking phase - results in average power over the braking
                                %phase.
                                FootAverageEnergy_Braking( s ) = sum( TotalFootEnergy_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                ShankAverageEnergy_Braking( s ) = sum( TotalShankEnergy_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                ThighAverageEnergy_Braking( s ) = sum( TotalThighEnergy_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                                PelvisAverageEnergy_Braking( s ) = sum( TotalPelvisEnergy_Braking_TempVec ) ./ (LengthofBrakingPhase( s ) ./ MoCapSampHz );
                            
                            
                            
                                %Sum the values in the propulsion phase ankle power temporary vectors then divide  by
                                %length of propulsion phase - results in average power over the
                                %propulsion phase.
                                AnkleAverageActivePower_Foot_Propulsion( s ) = sum( AnkleActivePower_Foot_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAverageActivePower_Shank_Propulsion( s ) = sum( AnkleActivePower_Shank_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAveragePassivePower_Foot_Propulsion( s ) = sum( AnklePassivePower_Foot_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAveragePassivePower_Shank_Propulsion( s ) = sum( AnklePassivePower_Shank_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAverageActiveEnergyTransfer_Propulsion( s ) = sum( AnkleActiveEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAverageTotalEnergyTransfer_Propulsion( s ) = sum( TotalAnkleEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                AnkleAverageJointPowerScalar_Propulsion( s ) = sum( AnkleJointPowerScalar_Calculated_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                            
                                %Sum the values in the propulsion phase knee power temporary vectors then divide  by
                                %length of propulsion phase - results in average power over the
                                %propulsion phase.
                                KneeAverageActivePower_Thigh_Propulsion( s ) = sum( KneeActivePower_Thigh_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAverageActivePower_Shank_Propulsion( s ) = sum( KneeActivePower_Shank_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAveragePassivePower_Thigh_Propulsion( s ) = sum( KneePassivePower_Thigh_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAveragePassivePower_Shank_Propulsion( s ) = sum( KneePassivePower_Shank_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAverageActiveEnergyTransfer_Propulsion( s ) = sum( KneeActiveEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAverageTotalEnergyTransfer_Propulsion( s ) = sum( TotalKneeEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                KneeAverageJointPowerScalar_Propulsion( s ) = sum( KneeJointPowerScalar_Calculated_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                            
                                %Sum the values in the propulsion phase hip power temporary vectors then divide  by
                                %length of propulsion phase - results in average power over the
                                %propulsion phase.
                                HipAverageActivePower_Thigh_Propulsion( s ) = sum( HipActivePower_Thigh_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAverageActivePower_Pelvis_Propulsion( s ) = sum( HipActivePower_Pelvis_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAveragePassivePower_Thigh_Propulsion( s ) = sum( HipPassivePower_Thigh_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAveragePassivePower_Pelvis_Propulsion( s ) = sum( HipPassivePower_Pelvis_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAverageActiveEnergyTransfer_Propulsion( s ) = sum( HipActiveEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAverageTotalEnergyTransfer_Propulsion( s ) = sum( TotalHipEnergyTransfer_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                HipAverageJointPowerScalar_Propulsion( s ) = sum( HipJointPowerScalar_Calculated_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                            
                                %Sum the values in the propulsion phase total segment power temporary vectors then divide  by
                                %length of propulsion phase - results in average power over the
                                %propulsion phase.
                                FootAverageEnergy_Propulsion( s ) = sum( TotalFootEnergy_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                ShankAverageEnergy_Propulsion( s ) = sum( TotalShankEnergy_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                ThighAverageEnergy_Propulsion( s ) = sum( TotalThighEnergy_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                                PelvisAverageEnergy_Propulsion( s ) = sum( TotalPelvisEnergy_Propulsion_TempVec ) ./ (LengthofPropulsionPhase( s ) ./ MoCapSampHz );
                            
                            
                            
                            
                            
                            
                            
                                %Sum the values in the braking phase ankle power temporary vectors -
                                %results in ankle work over the braking phase
                                AnkleActiveSegmentWork_Foot_Braking( s ) = sum( AnkleActivePower_Foot_Braking_TempVec );
                                AnkleActiveSegmentWork_Shank_Braking( s ) = sum( AnkleActivePower_Shank_Braking_TempVec );
                                AnklePassiveSegmentWork_Foot_Braking( s ) = sum( AnklePassivePower_Foot_Braking_TempVec );
                                AnklePassiveSegmentWork_Shank_Braking( s ) = sum( AnklePassivePower_Shank_Braking_TempVec );
                                AnkleActiveSegmentWorkTransfer_Braking( s ) = sum( AnkleActiveEnergyTransfer_Braking_TempVec );
                                AnkleTotalWorkTransfer_Braking( s ) = sum( TotalAnkleEnergyTransfer_Braking_TempVec );
                                AnkleJointWorkScalar_Braking( s ) = sum( AnkleJointPowerScalar_Calculated_Braking_TempVec );
                            
                                %Sum the values in the braking phase knee power temporary vectors -
                                %results in ankle work over the braking phase
                                KneeActiveSegmentWork_Thigh_Braking( s ) = sum( KneeActivePower_Thigh_Braking_TempVec );
                                KneeActiveSegmentWork_Shank_Braking( s ) = sum( KneeActivePower_Shank_Braking_TempVec );
                                KneePassiveSegmentWork_Thigh_Braking( s ) = sum( KneePassivePower_Thigh_Braking_TempVec );
                                KneePassiveSegmentWork_Shank_Braking( s ) = sum( KneePassivePower_Shank_Braking_TempVec );
                                KneeActiveSegmentWorkTransfer_Braking( s ) = sum( KneeActiveEnergyTransfer_Braking_TempVec );
                                KneeTotalWorkTransfer_Braking( s ) = sum( TotalKneeEnergyTransfer_Braking_TempVec );
                                KneeJointWorkScalar_Braking( s ) = sum( KneeJointPowerScalar_Calculated_Braking_TempVec );
                            
                                %Sum the values in the braking phase hip power temporary vectors -
                                %results in ankle work over the braking phase
                                HipActiveSegmentWork_Thigh_Braking( s ) = sum( HipActivePower_Thigh_Braking_TempVec );
                                HipActiveSegmentWork_Pelvis_Braking( s ) = sum( HipActivePower_Pelvis_Braking_TempVec );
                                HipPassiveSegmentWork_Thigh_Braking( s ) = sum( HipPassivePower_Thigh_Braking_TempVec );
                                HipPassiveSegmentWork_Pelvis_Braking( s ) = sum( HipPassivePower_Pelvis_Braking_TempVec );
                                HipActiveSegmentWorkTransfer_Braking( s ) = sum( HipActiveEnergyTransfer_Braking_TempVec );
                                HipTotalWorkTransfer_Braking( s ) = sum( TotalHipEnergyTransfer_Braking_TempVec );
                                HipJointWorkScalar_Braking( s ) = sum( HipJointPowerScalar_Calculated_Braking_TempVec );
                            
                                %Sum the values in the braking phase total segment power temporary vectors -
                                %results in ankle work over the braking phase
                                FootWork_Braking( s ) = sum( TotalFootEnergy_Braking_TempVec );
                                ShankWork_Braking( s ) = sum( TotalShankEnergy_Braking_TempVec );
                                ThighWork_Braking( s ) = sum( TotalThighEnergy_Braking_TempVec );
                                PelvisWork_Braking( s ) = sum( TotalPelvisEnergy_Braking_TempVec );
                            
                            
                            
                            
                                
                                %Sum the values in the propulsion phase ankle power temporary vectors -
                                %results in ankle work over the propulsion phase
                                AnkleActiveSegmentWork_Foot_Propulsion( s ) = sum( AnkleActivePower_Foot_Propulsion_TempVec );
                                AnkleActiveSegmentWork_Shank_Propulsion( s ) = sum( AnkleActivePower_Shank_Propulsion_TempVec );
                                AnklePassiveSegmentWork_Foot_Propulsion( s ) = sum( AnklePassivePower_Foot_Propulsion_TempVec );
                                AnklePassiveSegmentWork_Shank_Propulsion( s ) = sum( AnklePassivePower_Shank_Propulsion_TempVec );
                                AnkleActiveSegmentWorkTransfer_Propulsion( s ) = sum( AnkleActiveEnergyTransfer_Propulsion_TempVec );
                                AnkleTotalWorkTransfer_Propulsion( s ) = sum( TotalAnkleEnergyTransfer_Propulsion_TempVec );
                                AnkleJointWorkScalar_Propulsion( s ) = sum( AnkleJointPowerScalar_Calculated_Propulsion_TempVec );
                            
                                %Sum the values in the propulsion phase knee power temporary vectors -
                                %results in ankle work over the propulsion phase
                                KneeActiveSegmentWork_Thigh_Propulsion( s ) = sum( KneeActivePower_Thigh_Propulsion_TempVec );
                                KneeActiveSegmentWork_Shank_Propulsion( s ) = sum( KneeActivePower_Shank_Propulsion_TempVec );
                                KneePassiveSegmentWork_Thigh_Propulsion( s ) = sum( KneePassivePower_Thigh_Propulsion_TempVec );
                                KneePassiveSegmentWork_Shank_Propulsion( s ) = sum( KneePassivePower_Shank_Propulsion_TempVec );
                                KneeActiveSegmentWorkTransfer_Propulsion( s ) = sum( KneeActiveEnergyTransfer_Propulsion_TempVec );
                                KneeTotalWorkTransfer_Propulsion( s ) = sum( TotalKneeEnergyTransfer_Propulsion_TempVec );
                                KneeJointWorkScalar_Propulsion( s ) = sum( KneeJointPowerScalar_Calculated_Propulsion_TempVec );
                            
                                %Sum the values in the propulsion phase hip power temporary vectors -
                                %results in ankle work over the propulsion phase
                                HipActiveSegmentWork_Thigh_Propulsion( s ) = sum( HipActivePower_Thigh_Propulsion_TempVec );
                                HipActiveSegmentWork_Pelvis_Propulsion( s ) = sum( HipActivePower_Pelvis_Propulsion_TempVec );
                                HipPassiveSegmentWork_Thigh_Propulsion( s ) = sum( HipPassivePower_Thigh_Propulsion_TempVec );
                                HipPassiveSegmentWork_Pelvis_Propulsion( s ) = sum( HipPassivePower_Pelvis_Propulsion_TempVec );
                                HipActiveSegmentWorkTransfer_Propulsion( s ) = sum( HipActiveEnergyTransfer_Propulsion_TempVec );
                                HipTotalWorkTransfer_Propulsion( s ) = sum( TotalHipEnergyTransfer_Propulsion_TempVec );
                                HipJointWorkScalar_Propulsion( s ) = sum( HipJointPowerScalar_Calculated_Propulsion_TempVec );
                            
                                %Sum the values in the propulsion phase total segment power temporary vectors -
                                %results in ankle work over the propulsion phase
                                FootWork_Propulsion( s ) = sum( TotalFootEnergy_Propulsion_TempVec );
                                ShankWork_Propulsion( s ) = sum( TotalShankEnergy_Propulsion_TempVec );
                                ThighWork_Propulsion( s ) = sum( TotalThighEnergy_Propulsion_TempVec );
                                PelvisWork_Propulsion( s ) = sum( TotalPelvisEnergy_Propulsion_TempVec );
                            
                            
%% Calculate Peak and Average JRF and Joint Linear Velocity

                                %Find peak joint reaction force during BRAKING phase
                                    %Ankle - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakAnkleJRF_X_Braking( s ) = AnkleJRF_DistalSegment_X_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakAnkleJRF_Y_Braking( s ) = AnkleJRF_DistalSegment_Y_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_Z_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakAnkleJRF_Z_Braking( s ) = AnkleJRF_DistalSegment_Z_Braking( PeakJRFIndex, s );



                                    %Knee - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakKneeJRF_X_Braking( s ) = KneeJRF_DistalSegment_X_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakKneeJRF_Y_Braking( s ) = KneeJRF_DistalSegment_Y_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_Z_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakKneeJRF_Z_Braking( s ) = KneeJRF_DistalSegment_Z_Braking( PeakJRFIndex, s );



                                    %Hip - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakHipJRF_X_Braking( s ) = HipJRF_DistalSegment_X_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakHipJRF_Y_Braking( s ) = HipJRF_DistalSegment_Y_Braking( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_Z_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakHipJRF_Z_Braking( s ) = HipJRF_DistalSegment_Z_Braking( PeakJRFIndex, s );



                               

                                %Find peak joint reaction force during PROPULSION phase
                                    %Ankle - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakAnkleJRF_X_Propulsion( s ) = AnkleJRF_DistalSegment_X_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakAnkleJRF_Y_Propulsion( s ) = AnkleJRF_DistalSegment_Y_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of AnkleJRF_DistalSegment_Z_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( AnkleJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakAnkleJRF_Z_Propulsion( s ) = AnkleJRF_DistalSegment_Z_Propulsion( PeakJRFIndex, s );



                                    %Knee - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakKneeJRF_X_Propulsion( s ) = KneeJRF_DistalSegment_X_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakKneeJRF_Y_Propulsion( s ) = KneeJRF_DistalSegment_Y_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of KneeJRF_DistalSegment_Z_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( KneeJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakKneeJRF_Z_Propulsion( s ) = KneeJRF_DistalSegment_Z_Propulsion( PeakJRFIndex, s );



                                    %Hip - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                PeakHipJRF_X_Propulsion( s ) = HipJRF_DistalSegment_X_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakHipJRF_Y_Propulsion( s ) = HipJRF_DistalSegment_Y_Propulsion( PeakJRFIndex, s );
                                    
                                        %First, find the element number corresponding to the peak JRF. Will
                                        %take the absolute value of HipJRF_DistalSegment_Z_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakJRFIndex = find( abs( HipJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak JRF (determined
                                    %above) to store the value of the peak JRF
                                 PeakHipJRF_Z_Propulsion( s ) = HipJRF_DistalSegment_Z_Propulsion( PeakJRFIndex, s );




                                
                                %Find peak joint linear velocity during BRAKING phase
                                    %Ankle - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_X_Braking( s ) = AnkleJointLinearVel_X_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_Y_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_Y_Braking( s ) = AnkleJointLinearVel_Y_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_Z_Braking( s ) = AnkleJointLinearVel_Z_Braking( PeakLinearVelIndex, s );



                                    %Knee - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_X_Braking( s ) = KneeJointLinearVel_X_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_Y_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_Y_Braking( s ) = KneeJointLinearVel_Y_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_Z_Braking( s ) = KneeJointLinearVel_Z_Braking( PeakLinearVelIndex, s );



                                    %Hip - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_X_Braking( s ) = HipJointLinearVel_X_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_Y_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_Y_Braking( s ) = HipJointLinearVel_Y_Braking( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_X_Braking, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_Z_Braking( s ) = HipJointLinearVel_Z_Braking( PeakLinearVelIndex, s );



                                


                                %Find peak joint linear velocity during PROPULSION phase
                                    %Ankle - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_X_Propulsion( s ) = AnkleJointLinearVel_X_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_Y_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_Y_Propulsion( s ) = AnkleJointLinearVel_Y_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of AnkleJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( AnkleJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( AnkleJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakAnkleJointLinearVel_Z_Propulsion( s ) = AnkleJointLinearVel_Z_Propulsion( PeakLinearVelIndex, s );



                                    %Knee - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_X_Propulsion( s ) = KneeJointLinearVel_X_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_Y_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_Y_Propulsion( s ) = KneeJointLinearVel_Y_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of KneeJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( KneeJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( KneeJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakKneeJointLinearVel_Z_Propulsion( s ) = KneeJointLinearVel_Z_Propulsion( PeakLinearVelIndex, s );



                                    %Hip - X, Y, then Z-axes

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_X_Propulsion( s ) = HipJointLinearVel_X_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_Y_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_Y_Propulsion( s ) = HipJointLinearVel_Y_Propulsion( PeakLinearVelIndex, s );

                                        %First, find the element number corresponding to the peak joint linear velocity. Will
                                        %take the absolute value of HipJointLinearVel_X_Propulsion, since
                                        %the peak may be in the negative direction. 
                                PeakLinearVelIndex = find( abs( HipJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ==...
                                    max( abs( HipJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) ) ), 1 );
                                    %Use the element number corresponding to the peak joint linear velocity (determined
                                    %above) to store the value of the peak joint linear velocity
                                PeakHipJointLinearVel_Z_Propulsion( s ) = HipJointLinearVel_Z_Propulsion( PeakLinearVelIndex, s );






                               %Use trapz function to calculate integral of joint reaction force during BRAKING phase. Then
                               %divide by length of BRAKING phase to find average JRF. Time step =
                               %inverse of motion capture sampling Hz (250 Hz)
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJRF_X_Braking( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageAnkleJRF_Y_Braking( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageAnkleJRF_Z_Braking( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJRF_X_Braking( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageKneeJRF_Y_Braking( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageKneeJRF_Z_Braking( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJRF_X_Braking( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageHipJRF_Y_Braking( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageHipJRF_Z_Braking( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );




                               %Use trapz function to calculate integral of joint reaction force during PROPULSION phase. Then
                               %divide by length of PROPULSION phase to find average JRF. Time step =
                               %inverse of motion capture sampling Hz (250 Hz)
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJRF_X_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageAnkleJRF_Y_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageAnkleJRF_Z_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJRF_X_Propulsion( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageKneeJRF_Y_Propulsion( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageKneeJRF_Z_Propulsion( s ) = trapz( MoCapTimeStep, KneeJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJRF_X_Propulsion( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageHipJRF_Y_Propulsion( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageHipJRF_Z_Propulsion( s ) = trapz( MoCapTimeStep, HipJRF_DistalSegment_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               

                               

                               %Use trapz function to calculate integral of joint linear velocity during BRAKING phase. Then
                               %divide by length of BRAKING phase to find average JRF. Time step =
                               %inverse of motion capture sampling Hz (250 Hz)
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJointLinearVel_X_Braking( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageAnkleJointLinearVel_Y_Braking( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageAnkleJointLinearVel_Z_Braking( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJointLinearVel_X_Braking( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageKneeJointLinearVel_Y_Braking( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageKneeJointLinearVel_Z_Braking( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJointLinearVel_X_Braking( s ) = trapz( MoCapTimeStep, HipJointLinearVel_X_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageHipJointLinearVel_Y_Braking( s ) = trapz( MoCapTimeStep, HipJointLinearVel_Y_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               AverageHipJointLinearVel_Z_Braking( s ) = trapz( MoCapTimeStep, HipJointLinearVel_Z_Braking( 1 : LengthofBrakingPhase( s ), s ) );
                               
                               
                               
                               %Use trapz function to calculate integral of joint linear velocity during PROPULSION phase. Then
                               %divide by length of PROPULSION phase to find average JRF. Time step =
                               %inverse of motion capture sampling Hz (250 Hz)
                                    %Ankle - X, Y, then Z-axes
                               AverageAnkleJointLinearVel_X_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageAnkleJointLinearVel_Y_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageAnkleJointLinearVel_Z_Propulsion( s ) = trapz( MoCapTimeStep, AnkleJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );

                                    %Knee - X, Y, then Z-axes
                               AverageKneeJointLinearVel_X_Propulsion( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageKneeJointLinearVel_Y_Propulsion( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageKneeJointLinearVel_Z_Propulsion( s ) = trapz( MoCapTimeStep, KneeJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );

                                    %Hip - X, Y, then Z-axes
                               AverageHipJointLinearVel_X_Propulsion( s ) = trapz( MoCapTimeStep, HipJointLinearVel_X_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageHipJointLinearVel_Y_Propulsion( s ) = trapz( MoCapTimeStep, HipJointLinearVel_Y_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );
                               AverageHipJointLinearVel_Z_Propulsion( s ) = trapz( MoCapTimeStep, HipJointLinearVel_Z_Propulsion( 1 : LengthofPropulsionPhase( s ), s ) );



%% !!ADD Energy Flow Data to a Table for Exporting to R

                                    
                                %If you have NOT added Participant N Data, add it to the data structure
                                if strcmp( cell2mat( AddedParticipantNData_Cell ), 'No' ) || strcmp( cell2mat( AddedParticipantNData_Cell ), 'N' )
           
                                    %ADD FOOT DATA

                                    EnergyFlow(RowtoFill_EnergyFlow,1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow,2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow,3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow,4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow,5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow,6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow,7) = 1; %Store Joint ID - Ankle = 1
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 1; %Segment ID - 1 = foot
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 1; %Segment ID - distal vs proximal - 1 = distal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = FootAverageEnergy_Braking( s ); %Store integrated foot average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = FootAverageEnergy_Propulsion( s ); %Store integrated foot average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = FootWork_Braking( s ); %Store integrated foot work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = FootWork_Propulsion( s ); %Store integrated foot work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = AnkleActiveSegmentWork_Foot_Braking( s ); %Store integrated foot active work - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = AnklePassiveSegmentWork_Foot_Braking( s ); %Store integrated foot passive work - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = AnkleActiveSegmentWorkTransfer_Braking( s ); %Store integrated active work transfer at ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = AnkleTotalWorkTransfer_Braking( s ); %Store integrated total ankle work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = AnkleJointWorkScalar_Braking( s ); %Store integrated ankle work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = AnkleActiveSegmentWork_Foot_Propulsion( s ); %Store integrated foot work - from ankle - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = AnklePassiveSegmentWork_Foot_Propulsion( s ); %Store integrated foot passive work - from ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = AnkleActiveSegmentWorkTransfer_Propulsion( s ); %Store integrated active work transfer at ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = AnkleTotalWorkTransfer_Propulsion( s ); %Store integrated total ankle work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = AnkleJointWorkScalar_Propulsion( s ); %Store integrated ankle work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = AnkleAverageActivePower_Foot_Braking( s ); %Store integrated foot active average power - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = AnkleAveragePassivePower_Foot_Braking( s ); %Store integrated foot passive average power - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = AnkleAverageActiveEnergyTransfer_Braking( s ); %Store integrated active average power transfer at ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = AnkleAverageTotalEnergyTransfer_Braking( s ); %Store integrated total ankle average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = AnkleAverageJointPowerScalar_Braking( s ); %Store integrated ankle average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = AnkleAverageActivePower_Foot_Propulsion( s ); %Store integrated foot average power - from ankle - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = AnkleAveragePassivePower_Foot_Propulsion( s ); %Store integrated foot passive average power - from ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = AnkleAverageActiveEnergyTransfer_Propulsion( s ); %Store integrated active average power transfer at ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = AnkleAverageTotalEnergyTransfer_Propulsion( s ); %Store integrated total ankle average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = AnkleAverageJointPowerScalar_Propulsion( s ); %Store integrated ankle average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = PeakLimbStiffness_ContactPhase( s ); %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = PeakLimbStiffness_BrakingPhase( s ); %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = PeakLimbStiffness_PropulsionPhase( s ); %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = AverageLimbStiffness_ContactPhase( s ); %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = AverageLimbStiffness_BrakingPhase( s ); %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = AverageLimbStiffness_PropulsionPhase( s ); %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = InitialFootEnergy_Braking( s ); %Store initial foot power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = InitialFootEnergy_Propulsion( s ); %Store initial foot power - first data point of propulsion phase


                                    %Add between-limb tendon thickness for each participant to Column 35.
                                    %Add VAS Pain Rating to Column 36
                                    if strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'PreferredHz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_Involved_PreferredHz( n );


                                    elseif strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoHz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_Involved_TwoHz( n );

                                        
                                    elseif strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_Involved_TwoPoint3Hz( n );


                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'PreferredHz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_NonInvolved_PreferredHz( n );


                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoHz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_NonInvolved_TwoHz( n );

                                        
                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ATxVAS_NonInvolved_TwoPoint3Hz( n );
                
                                    else
                
                                         %Set the between-limb morphology
                                        EnergyFlow(RowtoFill_EnergyFlow, 43)  = ControlMorphology( n );
                                         
                                         %Set theVAS rating
                                        EnergyFlow(RowtoFill_EnergyFlow, 44)  = ControlVAS;

                                    end

                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;




                                    %ADD SHANK DATA FOR ANKLE

                                    EnergyFlow(RowtoFill_EnergyFlow, 1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 7) = 1; %Store Joint ID - Ankle = 1
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 2; %Segment ID - 2 = Shank
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 2; %Segment ID - distal vs proximal - 2 = proximal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = ShankAverageEnergy_Braking( s ); %Store integrated Shank average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = ShankAverageEnergy_Propulsion( s ); %Store integrated Shank average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = ShankWork_Braking( s ); %Store integrated Shank work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = ShankWork_Propulsion( s ); %Store integrated Shank work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = AnkleActiveSegmentWork_Shank_Braking( s ); %Store integrated Shank active work - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = AnklePassiveSegmentWork_Shank_Braking( s ); %Store integrated Shank passive work - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = NaN; %Store integrated active work transfer at ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = NaN; %Store integrated total ankle work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = NaN; %Store integrated ankle work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = AnkleActiveSegmentWork_Shank_Propulsion( s ); %Store integrated Shank work - from ankle - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = AnklePassiveSegmentWork_Shank_Propulsion( s ); %Store integrated Shank passive work - from ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = NaN; %Store integrated active work transfer at ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = NaN; %Store integrated total ankle work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = NaN; %Store integrated ankle work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = AnkleAverageActivePower_Shank_Braking( s ); %Store integrated Shank active average power - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = AnkleAveragePassivePower_Shank_Braking( s ); %Store integrated Shank passive average power - from ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = NaN; %Store integrated active average power transfer at ankle - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = NaN; %Store integrated total ankle average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = NaN; %Store integrated ankle average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = AnkleAverageActivePower_Shank_Propulsion( s ); %Store integrated Shank average power - from ankle - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = AnkleAveragePassivePower_Shank_Propulsion( s ); %Store integrated Shank passive average power - from ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = NaN; %Store integrated active average power transfer at ankle - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = NaN; %Store integrated total ankle average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = NaN; %Store integrated ankle average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = InitialShankEnergy_Braking( s ); %Store initial shank power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = InitialShankEnergy_Propulsion( s ); %Store initial shank power - first data point of propulsion phase

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 43)  = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 44)  = NaN; %Store initial shank power - first data point of propulsion phase
                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;








                                    %ADD SHANK DATA FOR KNEE

                                    EnergyFlow(RowtoFill_EnergyFlow, 1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 7) = 2; %Store Joint ID - Knee = 2
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 2; %Segment ID - 2 = Shank
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 1; %Segment ID - distal vs proximal - 1 = distal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = NaN; %Store integrated Shank average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = NaN; %Store integrated Shank average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = NaN; %Store integrated Shank work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = NaN; %Store integrated Shank work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = KneeActiveSegmentWork_Shank_Braking( s ); %Store integrated Shank active work - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = KneePassiveSegmentWork_Shank_Braking( s ); %Store integrated Shank passive work - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = KneeActiveSegmentWorkTransfer_Braking( s ); %Store integrated active work transfer at Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = KneeTotalWorkTransfer_Braking( s ); %Store integrated total Knee work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = KneeJointWorkScalar_Braking( s ); %Store integrated Knee work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = KneeActiveSegmentWork_Shank_Propulsion( s ); %Store integrated Shank work - from Knee - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = KneePassiveSegmentWork_Shank_Propulsion( s ); %Store integrated Shank passive work - from Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = KneeActiveSegmentWorkTransfer_Propulsion( s ); %Store integrated active work transfer at Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = KneeTotalWorkTransfer_Propulsion( s ); %Store integrated total Knee work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = KneeJointWorkScalar_Propulsion( s ); %Store integrated Knee work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = KneeAverageActivePower_Shank_Braking( s ); %Store integrated Shank active average power - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = KneeAveragePassivePower_Shank_Braking( s ); %Store integrated Shank passive average power - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = KneeAverageActiveEnergyTransfer_Braking( s ); %Store integrated active average power transfer at Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = KneeAverageTotalEnergyTransfer_Braking( s ); %Store integrated total Knee average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = KneeAverageJointPowerScalar_Braking( s ); %Store integrated Knee average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = KneeAverageActivePower_Shank_Propulsion( s ); %Store integrated Shank average power - from Knee - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = KneeAveragePassivePower_Shank_Propulsion( s ); %Store integrated Shank passive average power - from Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = KneeAverageActiveEnergyTransfer_Propulsion( s ); %Store integrated active average power transfer at Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = KneeAverageTotalEnergyTransfer_Propulsion( s ); %Store integrated total Knee average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = KneeAverageJointPowerScalar_Propulsion( s ); %Store integrated Knee average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = NaN; %Store initial shank power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = NaN; %Store initial shank power - first data point of propulsion phase

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 43)  = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 44)  = NaN; %Store initial shank power - first data point of propulsion phase

                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;




                                    %ADD THIGH DATA FOR KNEE

                                    EnergyFlow(RowtoFill_EnergyFlow, 1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 7) = 2; %Store Joint ID - Knee = 2
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 3; %Segment ID - 3 = Thigh
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 2; %Segment ID - distal vs proximal - 2 = proximal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = ThighAverageEnergy_Braking( s ); %Store integrated Thigh average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = ThighAverageEnergy_Propulsion( s ); %Store integrated Thigh average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = ThighWork_Braking( s ); %Store integrated Thigh work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = ThighWork_Propulsion( s ); %Store integrated Thigh work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = KneeActiveSegmentWork_Thigh_Braking( s ); %Store integrated Thigh active work - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = KneePassiveSegmentWork_Thigh_Braking( s ); %Store integrated Thigh passive work - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = NaN; %Store integrated active work transfer at Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = NaN; %Store integrated total Knee work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = NaN; %Store integrated Knee work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = KneeActiveSegmentWork_Thigh_Propulsion( s ); %Store integrated Thigh work - from Knee - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = KneePassiveSegmentWork_Thigh_Propulsion( s ); %Store integrated Thigh passive work - from Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = NaN; %Store integrated active work transfer at Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = NaN; %Store integrated total Knee work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = NaN; %Store integrated Knee work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = KneeAverageActivePower_Thigh_Braking( s ); %Store integrated Thigh active average power - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = KneeAveragePassivePower_Thigh_Braking( s ); %Store integrated Thigh passive average power - from Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = NaN; %Store integrated active average power transfer at Knee - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = NaN; %Store integrated total Knee average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = NaN; %Store integrated Knee average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = KneeAverageActivePower_Thigh_Propulsion( s ); %Store integrated Thigh average power - from Knee - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = KneeAveragePassivePower_Thigh_Propulsion( s ); %Store integrated Thigh passive average power - from Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = NaN; %Store integrated active average power transfer at Knee - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = NaN; %Store integrated total Knee average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = NaN; %Store integrated Knee average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = InitialThighEnergy_Braking( s ); %Store initial thigh power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = InitialThighEnergy_Propulsion( s ); %Store initial thigh power - first data point of propulsion phase

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 43)  = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 44)  = NaN; %Store initial shank power - first data point of propulsion phase

                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;




                                    %ADD THIGH DATA FOR HIP

                                    EnergyFlow(RowtoFill_EnergyFlow, 1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 7) = 3; %Store Joint ID - Hip = 3
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 3; %Segment ID - 3 = Thigh
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 1; %Segment ID - distal vs proximal - 1 = distal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = NaN; %Store integrated Thigh average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = NaN; %Store integrated Thigh average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = NaN; %Store integrated Thigh work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = NaN; %Store integrated Thigh work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = HipActiveSegmentWork_Thigh_Braking( s ); %Store integrated Thigh active work - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = HipPassiveSegmentWork_Thigh_Braking( s ); %Store integrated Thigh passive work - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = HipActiveSegmentWorkTransfer_Braking( s ); %Store integrated active work transfer at Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = HipTotalWorkTransfer_Braking( s ); %Store integrated total Hip work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = HipJointWorkScalar_Braking( s ); %Store integrated Hip work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = HipActiveSegmentWork_Thigh_Propulsion( s ); %Store integrated Thigh work - from Hip - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = HipPassiveSegmentWork_Thigh_Propulsion( s ); %Store integrated Thigh passive work - from Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = HipActiveSegmentWorkTransfer_Propulsion( s ); %Store integrated active work transfer at Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = HipTotalWorkTransfer_Propulsion( s ); %Store integrated total Hip work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = HipJointWorkScalar_Propulsion( s ); %Store integrated Hip work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = HipAverageActivePower_Thigh_Braking( s ); %Store integrated Thigh active average power - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = HipAveragePassivePower_Thigh_Braking( s ); %Store integrated Thigh passive average power - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = HipAverageActiveEnergyTransfer_Braking( s ); %Store integrated active average power transfer at Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = HipAverageTotalEnergyTransfer_Braking( s ); %Store integrated total Hip average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = HipAverageJointPowerScalar_Braking( s ); %Store integrated Hip average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = HipAverageActivePower_Thigh_Propulsion( s ); %Store integrated Thigh average power - from Hip - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = HipAveragePassivePower_Thigh_Propulsion( s ); %Store integrated Thigh passive average power - from Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = HipAverageActiveEnergyTransfer_Propulsion( s ); %Store integrated active average power transfer at Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = HipAverageTotalEnergyTransfer_Propulsion( s ); %Store integrated total Hip average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = HipAverageJointPowerScalar_Propulsion( s ); %Store integrated Hip average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = NaN; %Store initial thigh power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = NaN; %Store initial thigh power - first data point of propulsion phase

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 43)  = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 44)  = NaN; %Store initial shank power - first data point of propulsion phase

                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;




                                    %ADD PELVIS DATA FOR HIP

                                    EnergyFlow(RowtoFill_EnergyFlow, 1) = m; %Store Group ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 2) = n; %Store Participant ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 3) = a; %Store Limb ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 4) = 1; %Store MTU ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 5) = q; %Store Trial ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 6) = s; %Store Hop ID
                                    EnergyFlow(RowtoFill_EnergyFlow, 7) = 3; %Store Joint ID - Hip = 3
                                    EnergyFlow(RowtoFill_EnergyFlow, 8) = HoppingRate_ID_forTable(b);
                                    EnergyFlow(RowtoFill_EnergyFlow, 9) = 4; %Segment ID - 4 = Pelvis
                                    EnergyFlow(RowtoFill_EnergyFlow, 10) = 2; %Segment ID - distal vs proximal - 2 = proximal
                                    EnergyFlow(RowtoFill_EnergyFlow, 11) = PelvisAverageEnergy_Braking( s ); %Store integrated Pelvis average power - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 12) = PelvisAverageEnergy_Propulsion( s ); %Store integrated Pelvis average power - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 13) = PelvisWork_Braking( s ); %Store integrated Pelvis work - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 14) = PelvisWork_Propulsion( s ); %Store integrated Pelvis work - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 15) = HipActiveSegmentWork_Pelvis_Braking( s ); %Store integrated Pelvis active work - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 16) = HipPassiveSegmentWork_Pelvis_Braking( s ); %Store integrated Pelvis passive work - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 17)  = NaN; %Store integrated active work transfer at Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 18)  = NaN; %Store integrated total Hip work transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 19)  = NaN; %Store integrated Hip work scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 20) = HipActiveSegmentWork_Pelvis_Propulsion( s ); %Store integrated Pelvis work - from Hip - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 21) = HipPassiveSegmentWork_Pelvis_Propulsion( s ); %Store integrated Pelvis passive work - from Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 22)  = NaN; %Store integrated active work transfer at Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 23)  = NaN; %Store integrated total Hip work transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 24)  = NaN; %Store integrated Hip work scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 25) = HipAverageActivePower_Pelvis_Braking( s ); %Store integrated Pelvis active average power - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 26) = HipAveragePassivePower_Pelvis_Braking( s ); %Store integrated Pelvis passive average power - from Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 27)  = NaN; %Store integrated active average power transfer at Hip - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 28)  = NaN; %Store integrated total Hip average power transfer - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 29)  = NaN; %Store integrated Hip average power scalar - braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 30) = HipAverageActivePower_Pelvis_Propulsion( s ); %Store integrated Pelvis average power - from Hip - Propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 31) = HipAveragePassivePower_Pelvis_Propulsion( s ); %Store integrated Pelvis passive average power - from Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 32)  = NaN; %Store integrated active average power transfer at Hip - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 33)  = NaN; %Store integrated total Hip average power transfer - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 34)  = NaN; %Store integrated Hip average power scalar - propulsion phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 35)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 36)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 37)  = NaN; %Store peak limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 38)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 39)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 40)  = NaN; %Store average limb stiffness
                                    EnergyFlow(RowtoFill_EnergyFlow, 41)  = InitialPelvisEnergy_Braking( s ); %Store initial pelvis power - first data point of braking phase
                                    EnergyFlow(RowtoFill_EnergyFlow, 42)  = InitialPelvisEnergy_Propulsion( s ); %Store initial pelvis power - first data point of propulsion phase

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 43)  = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    EnergyFlow(RowtoFill_EnergyFlow, 44)  = NaN; %Store initial shank power - first data point of propulsion phase

                                    
                                    %Add 1 to RowtoFill_EnergyFlow so that next loop iteration
                                    %will add data to the next row
                                    RowtoFill_EnergyFlow = RowtoFill_EnergyFlow + 1;

                                end
                                    


%% !!ADD Joint Reaction Force/Linear Velocity Data To Matrix For Exporting To R



                                    
                                %If you have NOT added Participant N Data, add it to the data structure
                                if strcmp( cell2mat( AddedParticipantNData_Cell ), 'No' ) || strcmp( cell2mat( AddedParticipantNData_Cell ), 'N' )
          

                                    %Next rows will store X-AXIS data for ANKLE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 1; %Store Joint ID - Ankle = 1
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 1; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakAnkleJRF_X_Braking( s ); %Store peak ankle JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakAnkleJRF_X_Propulsion( s ); %Store peak ankle JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageAnkleJRF_X_Braking( s ); %Store average ankle JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageAnkleJRF_X_Propulsion( s ); %Store average ankle JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakAnkleJointLinearVel_X_Braking( s ); %Store peak ankle linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakAnkleJointLinearVel_X_Propulsion( s ); %Store peak ankle linear velocity for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageAnkleJointLinearVel_X_Braking( s ); %Store average ankle linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageAnkleJointLinearVel_X_Propulsion( s ); %Store average ankle linear velocity for propulsion phase, X-axis

                                    %Add between-limb tendon thickness for each participant to Column 18.
                                    %Add VAS Pain Rating to Column 19.
                                        %Add data for ATx Group, Involved Limb, Preferred Hz Hopping Rate
                                    if strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'PreferredHz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_Involved_PreferredHz( n );


                                    %Add data for ATx Group, Involved Limb, 2.0 Hz Hopping Rate
                                    elseif strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoHz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_Involved_TwoHz( n );

                                        
                                    %Add data for ATx Group, Involved Limb, 2.33 Hz Hopping Rate
                                    elseif strcmp( LimbID{ a}, 'InvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_Involved_TwoPoint3Hz( n );


                                    %Add data for ATx Group, Non-Involved Limb, Preferred Hz Hopping Rate
                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'PreferredHz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_NonInvolved_PreferredHz( n );


                                    %Add data for ATx Group, Non-Involved Limb, 2.0 Hz Hopping Rate
                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoHz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_NonInvolved_TwoHz( n );

                                        
                                    %Add data for ATx Group, Non-Involved Limb, 2.33 Hz Hopping Rate
                                    elseif strcmp( LimbID{ a}, 'NonInvolvedLimb'  ) && strcmp( HoppingRate_ID{ b }, 'TwoPoint3Hz')
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ATxMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ATxVAS_NonInvolved_TwoPoint3Hz( n );
                
                                    %Add data for Control group
                                    else
                
                                         %Set the between-limb morphology
                                        JointReactionForceAndLinearVel( RowtoFill_JointReactionForceAndLinearVel, 18 )  = ControlMorphology( n );
                                         
                                         %Set theVAS rating
                                        JointReactionForceAndLinearVel(  RowtoFill_JointReactionForceAndLinearVel, 19)  = ControlVAS;

                                    end

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Ankle
                                    %Y-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;



                                    %Next rows will store Y-AXIS data for ANKLE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 1; %Store Joint ID - Ankle = 1
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 2; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakAnkleJRF_Y_Braking( s ); %Store peak ankle JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakAnkleJRF_Y_Propulsion( s ); %Store peak ankle JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageAnkleJRF_Y_Braking( s ); %Store average ankle JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageAnkleJRF_Y_Propulsion( s ); %Store average ankle JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakAnkleJointLinearVel_Y_Braking( s ); %Store peak ankle linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakAnkleJointLinearVel_Y_Propulsion( s ); %Store peak ankle linear velocity for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageAnkleJointLinearVel_Y_Braking( s ); %Store average ankle linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageAnkleJointLinearVel_Y_Propulsion( s ); %Store average ankle linear velocity for propulsion phase, Y-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Ankle
                                    %Z-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;





                                    %Next rows will store Z-AXIS data for ANKLE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 1; %Store Joint ID - Ankle = 1
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 3; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakAnkleJRF_Z_Braking( s ); %Store peak ankle JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakAnkleJRF_Z_Propulsion( s ); %Store peak ankle JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageAnkleJRF_Z_Braking( s ); %Store average ankle JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageAnkleJRF_Z_Propulsion( s ); %Store average ankle JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakAnkleJointLinearVel_Z_Braking( s ); %Store peak ankle linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakAnkleJointLinearVel_Z_Propulsion( s ); %Store peak ankle linear velocity for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageAnkleJointLinearVel_Z_Braking( s ); %Store average ankle linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageAnkleJointLinearVel_Z_Propulsion( s ); %Store average ankle linear velocity for propulsion phase, Z-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Knee
                                    %X-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;
          



                                    %Next rows will store X-AXIS data for KNEE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 2; %Store Joint ID - Knee = 2
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 1; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakKneeJRF_X_Braking( s ); %Store peak Knee JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakKneeJRF_X_Propulsion( s ); %Store peak Knee JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageKneeJRF_X_Braking( s ); %Store average Knee JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageKneeJRF_X_Propulsion( s ); %Store average Knee JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakKneeJointLinearVel_X_Braking( s ); %Store peak Knee linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakKneeJointLinearVel_X_Propulsion( s ); %Store peak Knee linear velocity for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageKneeJointLinearVel_X_Braking( s ); %Store average Knee linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageKneeJointLinearVel_X_Propulsion( s ); %Store average Knee linear velocity for propulsion phase, X-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Knee
                                    %Y-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;



                                    %Next rows will store Y-AXIS data for KNEE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 2; %Store Joint ID - Knee = 2
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 2; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakKneeJRF_Y_Braking( s ); %Store peak Knee JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakKneeJRF_Y_Propulsion( s ); %Store peak Knee JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageKneeJRF_Y_Braking( s ); %Store average Knee JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageKneeJRF_Y_Propulsion( s ); %Store average Knee JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakKneeJointLinearVel_Y_Braking( s ); %Store peak Knee linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakKneeJointLinearVel_Y_Propulsion( s ); %Store peak Knee linear velocity for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageKneeJointLinearVel_Y_Braking( s ); %Store average Knee linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageKneeJointLinearVel_Y_Propulsion( s ); %Store average Knee linear velocity for propulsion phase, Y-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Knee
                                    %Z-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;



                                    %Next rows will store Z-AXIS data for KNEE
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 2; %Store Joint ID - Knee = 2
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 3; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakKneeJRF_Z_Braking( s ); %Store peak Knee JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakKneeJRF_Z_Propulsion( s ); %Store peak Knee JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageKneeJRF_Z_Braking( s ); %Store average Knee JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageKneeJRF_Z_Propulsion( s ); %Store average Knee JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakKneeJointLinearVel_Z_Braking( s ); %Store peak Knee linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakKneeJointLinearVel_Z_Propulsion( s ); %Store peak Knee linear velocity for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageKneeJointLinearVel_Z_Braking( s ); %Store average Knee linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageKneeJointLinearVel_Z_Propulsion( s ); %Store average Knee linear velocity for propulsion phase, Z-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Hip
                                    %X-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;
          



                                    %Next rows will store X-AXIS data for HIP
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 3; %Store Joint ID - Hip = 3
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 1; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakHipJRF_X_Braking( s ); %Store peak Hip JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakHipJRF_X_Propulsion( s ); %Store peak Hip JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageHipJRF_X_Braking( s ); %Store average Hip JRF for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageHipJRF_X_Propulsion( s ); %Store average Hip JRF for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakHipJointLinearVel_X_Braking( s ); %Store peak Hip linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakHipJointLinearVel_X_Propulsion( s ); %Store peak Hip linear velocity for propulsion phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageHipJointLinearVel_X_Braking( s ); %Store average Hip linear velocity for braking phase, X-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageHipJointLinearVel_X_Propulsion( s ); %Store average Hip linear velocity for propulsion phase, X-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Hip
                                    %Y-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;


                                    %Next rows will store Y-AXIS data for HIP
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 3; %Store Joint ID - Hip = 3
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 2; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakHipJRF_Y_Braking( s ); %Store peak Hip JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakHipJRF_Y_Propulsion( s ); %Store peak Hip JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageHipJRF_Y_Braking( s ); %Store average Hip JRF for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageHipJRF_Y_Propulsion( s ); %Store average Hip JRF for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakHipJointLinearVel_Y_Braking( s ); %Store peak Hip linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakHipJointLinearVel_Y_Propulsion( s ); %Store peak Hip linear velocity for propulsion phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageHipJointLinearVel_Y_Braking( s ); %Store average Hip linear velocity for braking phase, Y-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageHipJointLinearVel_Y_Propulsion( s ); %Store average Hip linear velocity for propulsion phase, Y-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN;

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the Hip
                                    %Z-axis data fills the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;


                                    %Next rows will store Z-AXIS data for HIP
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,1) = m; %Store Group ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,2) = n; %Store Participant ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,3) = a; %Store Limb ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,4) = 1; %Store MTU ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,5) = q; %Store Trial ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,6) = s; %Store Hop ID
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel,7) = 3; %Store Joint ID - Hip = 3
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 8) = HoppingRate_ID_forTable(b);
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 9) = 3; %Store current axis. 1 = X, 2 = Y, 3 = Z
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 10) = PeakHipJRF_Z_Braking( s ); %Store peak Hip JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 11) = PeakHipJRF_Z_Propulsion( s ); %Store peak Hip JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 12) =AverageHipJRF_Z_Braking( s ); %Store average Hip JRF for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 13) =AverageHipJRF_Z_Propulsion( s ); %Store average Hip JRF for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 14) = PeakHipJointLinearVel_Z_Braking( s ); %Store peak Hip linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 15) = PeakHipJointLinearVel_Z_Propulsion( s ); %Store peak Hip linear velocity for propulsion phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 16) =AverageHipJointLinearVel_Z_Braking( s ); %Store average Hip linear velocity for braking phase, Z-axis
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 17) =AverageHipJointLinearVel_Z_Propulsion( s ); %Store average Hip linear velocity for propulsion phase, Z-axis

                                    %Set the between-limb morphology to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 18) = NaN; 

                                    %Set the Visual Analog Scale score to NaN - already stored it for
                                    %Ankle, X-axis. Don't want to repeat the value because it affects the
                                    %standar deviation
                                    JointReactionForceAndLinearVel(RowtoFill_JointReactionForceAndLinearVel, 19) = NaN;

                                    %Add 1 to RowtoFill_JointReactionForceAndLinearVel so that the next
                                    %iteration of the loop fills in the next row
                                    RowtoFill_JointReactionForceAndLinearVel = RowtoFill_JointReactionForceAndLinearVel + 1;



                                end



%% END S FOR LOOP - INDIVIDUAL HOPS
                                end



%% Plot Integrated Data


                                %Only show plots if we told the code we want to view plots
                                if  strcmp( cell2mat( ShowPlots_Cell ), 'Yes' )
            
   
                                    %BRAKING PHASE AVERAGE POWERS
                                    
                                    %Average Ankle Powers
                                    figure('Name', ['Average Braking Phase Ankle Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Braking Phase Ankle Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActiveEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageTotalEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageJointPowerScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseAnklePowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %Average Knee Powers
                                    figure('Name', ['Average Braking Phase Knee Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Braking Phase Knee Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActiveEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageTotalEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageJointPowerScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseKneePowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %Average Hip Powers
                                    figure('Name', ['Average Braking Phase Hip Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Braking Phase Hip Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Active Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActiveEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageTotalEnergyTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageJointPowerScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseHipPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %PROPULSION PHASE AVERAGE POWERS
                                    
                                    %Average Ankle Powers
                                    figure('Name', ['Average Propulsion Phase Ankle Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Propulsion Phase Ankle Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActiveEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageTotalEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageJointPowerScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseAnklePowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %Average Knee Powers
                                    figure('Name', ['Average Propulsion Phase Knee Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Propulsion Phase Knee Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Active Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActiveEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageTotalEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageJointPowerScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseKneePowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %Average Hip Powers
                                    figure('Name', ['Average Propulsion Phase Hip Powers  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Average Propulsion Phase Hip Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActiveEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageTotalEnergyTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Energy Transfer', '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( 'Average Total Energy Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageJointPowerScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Total Joint Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseHipPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %BRAKING PHASE WORK

                                    %Ankle Work
                                    figure('Name', ['Braking Phase Ankle Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Braking Phase Ankle Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleTotalWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleJointWorkScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseAnkleWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    %Knee Work - Braking Phase
                                    figure('Name', ['Braking Phase Knee Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Braking Phase Knee Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( ' Active Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeTotalWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeJointWorkScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseKneeWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    %Hip Work - Braking phase
                                    figure('Name', ['Braking Phase Hip Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Braking Phase Hip Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipTotalWorkTransfer_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipJointWorkScalar_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseHipWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    %PROPULSION PHASE WORK

                                    %Ankle Work - Propulsion Phase
                                    figure('Name', ['Propulsion Phase Ankle Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Propulsion Phase Ankle Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( ' Active Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleTotalWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleJointWorkScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseAnkleWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    %Knee Work - Propulsion Phase
                                    figure('Name', ['Propulsion Phase Knee Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Propulsion Phase Knee Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    [ ~, ~ ] = title( ' Passive Segment Work, Shank Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeTotalWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeJointWorkScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseKneeWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    %Hip Work - Propulsion Phase
                                    figure('Name', ['Propulsion Phase Hip Work  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Propulsion Phase Hip Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 4, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Thigh Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Passive Segment Work, Pelvis Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Active Segment Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 4, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipTotalWorkTransfer_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.5:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { ' Work Transfer', '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Work Transfer', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', '#F5F5DC');
                                    
                                    subplot( 4, 2, 7 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipJointWorkScalar_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-1, 1] )
                                    yticks( -1:0.25:1 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( ' Total Joint Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseHipWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
%                                     
%                                     
%                                     %BRAKING PHASE MUSCLE CONTRIBUTION TO TOTAL TRANSFER
%                                     
%                                     figure('Name', ['Active Contribution to Total Transfer - Braking Phase  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
%                                     sgtitle( { 'Active Contribution to Total Transfer - Braking Phase',  'ATx27 vs HC21' }, 'FontSize', 20, 'FontWeight', 'bold' )
%                                     
%                                     subplot( 1, 3, 1 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( AnklePercentTransferFromActive_Braking, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Ankle Active Contribution to Total Transfer',  'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold');
%                                     
%                                     subplot( 1, 3, 2 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( KneePercentTransferFromActive_Braking, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Knee Active Contribution to Total Transfer', 'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold');
%                                     
%                                     subplot( 1, 3, 3 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( HipPercentTransferFromActive_Braking, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Hip Active Contribution to Total Transfer', 'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold' );
%                                     
%                                     savefig( [ ParticipantList{ n }, '_', 'ActiveContribution2TotalTransfer_Braking ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
%                                     
%                                     
%                                     pause
%                                     
%                                     close all
%                                     
%                                     
%                                     
%                                     
%                                     
%                                     %PROPULSION PHASE MUSCLE CONTRIBUTION TO TOTAL TRANSFER
%                                     
%                                     figure('Name', ['Active Contribution to Total Transfer - Propulsion Phase  ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
%                                     sgtitle( { 'Active Contribution to Total Transfer - Propulsion Phase',  'ATx27 vs HC21' }, 'FontSize', 20, 'FontWeight', 'bold' )
%                                     
%                                     subplot( 1, 3, 1 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( AnklePercentTransferFromActive_Propulsion, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Ankle Active Contribution to Total Transfer', 'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold' );
%                                     
%                                     subplot( 1, 3, 2 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( KneePercentTransferFromActive_Propulsion, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Knee Active Contribution to Total Transfer', 'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold' );
%                                     
%                                     subplot( 1, 3, 3 )
%                                     %Create bar graph - take means of all hops
%                                     bb = bar( mean( HipPercentTransferFromActive_Propulsion, 'omitnan' ) );
%                                     xtips = bb.XEndPoints;
%                                     ytips = bb.YEndPoints;
%                                     labels1 = string(bb.YData);
%                                     xticklabels( LimbID{ a } )
%                                     set( gca, 'FontSize', 14 )
%                                     
%                                     ylabel( 'Contribution (Max = 1)' , 'FontSize', 16, 'FontWeight', 'bold' )
%                                     ylim( [ 0, 0.15] )
%                                     yticks( 0:0.025:0.15 )
%                                     title( 'Hip Active Contribution to Total Transfer', 'FontSize', 18 );
%                                     text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
%                                         'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold' );
%                                     
%                                     savefig( [ ParticipantList{ n }, '_', 'ActiveContribution2TotalTransfer_Propulsion ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
%                                     
%                                     pause
%                                     
%                                     close all
%                                     
                                    
                                    
                                    
                                    
                                    
                                    %BRAKING PHASE AVERAGE SEGMENT POWERS
                                    
                                    %Average Foot Powers - Braking Phase
                                    figure('Name', ['Foot - Average Braking Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Foot - Average Braking Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 2, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialFootEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Foot Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( FootAverageEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Foot Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power - from Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power - from Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseFootPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Average Shank Powers - Braking Phase
                                    figure('Name', ['Shank - Average Braking Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Shank - Average Braking Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialShankEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Shank Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ShankAverageEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Shank Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseShankPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    




                                    %Average Thigh Powers - Braking Phase
                                    figure('Name', ['Thigh - Average Braking Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Thigh - Average Braking Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialThighEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Thigh Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ThighAverageEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Thigh Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhaseThighPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause





                                    
                                    %Average Pelvis Powers - Braking Phase
                                    figure('Name', ['Pelvis - Average Braking Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Pelvis - Average Braking Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 2, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialPelvisEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Pelvis Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( PelvisAverageEnergy_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Pelvis Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AverageBrakingPhasePelvisPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    %PROPULSION PHASE AVERAGE SEGMENT POWERS
                                    
                                    %Average Foot Powers - Propulsion Phase
                                    figure('Name', ['Foot - Average Propulsion Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Foot - Average Propulsion Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 2, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialFootEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Foot Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( FootAverageEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Foot Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, from Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, from Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseFootPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Average Shank Powers - Propulsion Phase
                                    figure('Name', ['Shank - Average Propulsion Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Shank - Average Propulsion Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialShankEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Shank Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ShankAverageEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Shank Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAverageActivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleAveragePassivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseShankPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Average Thigh Powers - Propulsion Phase
                                    figure('Name', ['Thigh - Average Propulsion Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Thigh - Average Propulsion Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialThighEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Thigh Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ThighAverageEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Thigh Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAverageActivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeAveragePassivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhaseThighPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause





                                    
                                    %Average Pelvis Powers - Propulsion Phase
                                    figure('Name', ['Pelvis - Average Propulsion Phase Powers ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Pelvis - Average Propulsion Phase Powers', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 2, 2, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( InitialPelvisEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Initial Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Initial Pelvis Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( PelvisAverageEnergy_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Pelvis Power', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAverageActivePower_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Active Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 2, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipAveragePassivePower_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Average Power',  '[W/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Average Passive Power, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'AveragePropulsionPhasePelvisPowers ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    %BRAKING PHASE SEGMENT WORK
                                    
                                    %Average Foot Work - Braking Phase
                                    figure('Name', ['Foot - Braking Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Foot - Braking Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 1, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( FootWork_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Foot Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 2 )
                                    %Create bar graph - take means of all hopsAnkleActiveSegmentWork_Foot_Braking
                                    bb = bar( mean( AnkleActiveSegmentWork_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Foot_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseFootWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Shank Work - Braking Phase
                                    figure('Name', ['Shank - Braking Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Shank - Braking Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1:2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ShankWork_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Shank Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Shank_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseShankWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Thigh Work - Braking Phase
                                    figure('Name', ['Thigh - Braking Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Thigh - Braking Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1:2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ThighWork_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Thigh Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Thigh_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhaseThighWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause





                                    
                                    %Pelvis Work - Braking Phase
                                    figure('Name', ['Pelvis - Braking Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Pelvis - Braking Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 1, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( PelvisWork_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Pelvis Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Pelvis_Braking, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'BrakingPhasePelvisWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all
                                    








                                    
                                    
                                    %PROPULSION PHASE SEGMENT WORK
                                    
                                    %Average Foot Work - Propulsion Phase
                                    figure('Name', ['Foot - Propulsion Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Foot - Propulsion Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 1, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( FootWork_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Foot Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 2 )
                                    %Create bar graph - take means of all hopsAnkleActiveSegmentWork_Foot_Propulsion
                                    bb = bar( mean( AnkleActiveSegmentWork_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Foot_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, Foot Segment', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseFootWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Shank Work - Propulsion Phase
                                    figure('Name', ['Shank - Propulsion Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Shank - Propulsion Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1:2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ShankWork_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Shank Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnkleActiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( AnklePassiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Ankle', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Shank_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseShankWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    



                                    %Thigh Work - Propulsion Phase
                                    figure('Name', ['Thigh - Propulsion Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Thigh - Propulsion Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 2, 1:2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( ThighWork_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Thigh Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneeActiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 4 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 5 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( KneePassiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Knee', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 2, 6 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Thigh_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhaseThighWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause





                                    
                                    %Pelvis Work - Propulsion Phase
                                    figure('Name', ['Pelvis - Propulsion Phase Work ' ParticipantList{ n } '  ' LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b } '  ' HoppingTrialNumber{ q } '  ' ], 'Position', [90 1 1326 796], 'Color', '#F5F5DC' )
                                    sgtitle( 'Pelvis - Propulsion Phase Work', 'FontSize', 20, 'FontWeight', 'bold' )
                                    
                                    subplot( 3, 1, 1 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( PelvisWork_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Pelvis Work', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 2 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipActiveSegmentWork_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Active Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','top', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    subplot( 3, 1, 3 )
                                    %Create bar graph - take means of all hops
                                    bb = bar( mean( HipPassiveSegmentWork_Pelvis_Propulsion, 'omitnan' ) );
                                    xtips = bb.XEndPoints;
                                    ytips = bb.YEndPoints;
                                    labels1 = string(bb.YData);
                                    ylim( [-8, 8] )
                                    yticks( -8:4:8 )
                                    xticklabels( LimbID{ a } )
                                    set( gca, 'FontSize', 14 )
                                    
                                    ylabel( { 'Work',  '[J/kg]' }, 'FontSize', 16, 'FontWeight', 'bold' )
                                    title( 'Passive Segment Work, From Hip', 'FontSize', 18 );
                                    text( xtips, ytips, labels1, 'HorizontalAlignment','center',...
                                        'VerticalAlignment','bottom', 'FontSize', 14, 'FontWeight','bold', 'Color', 'k');
                                    
                                    savefig( [ ParticipantList{ n }, '_', 'PropulsionPhasePelvisWork ', '_', LimbID{ a } '  '  ' _ ' HoppingRate_ID{ b }, '.fig' ] );
                                    
                                    pause
                                    
                                    close all

                                end
    
    
    




%% Store Marker Data Time Series in Data Structure
                                

%                                 %Left Greater Trochanter - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LeftGreaterTrochanter', 'X', 'Coordinates_ContactPhase_TimeSeries', LGTMarker_X_IndividualHopsContactPhase );
% 
%                                 %Left Greater Trochanter - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LeftGreaterTrochanter', 'Y', 'Coordinates_ContactPhase_TimeSeries', LGTMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Left Greater Trochanter - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LeftGreaterTrochanter', 'Z', 'Coordinates_ContactPhase_TimeSeries', LGTMarker_Z_IndividualHopsContactPhase );
%                                 
% 
% 
%                                 %Right Greater Trochanter - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'RightGreaterTrochanter', 'X', 'Coordinates_ContactPhase_TimeSeries', RGTMarker_X_IndividualHopsContactPhase );
% 
%                                 %Right Greater Trochanter - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'RightGreaterTrochanter', 'Y', 'Coordinates_ContactPhase_TimeSeries', RGTMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Right Greater Trochanter - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'RightGreaterTrochanter', 'Z', 'Coordinates_ContactPhase_TimeSeries', RGTMarker_Z_IndividualHopsContactPhase );
%                                 
% 
% 
%                                 %Lateral femoral epicondyle - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralFemoralEpicondyle', 'X', 'Coordinates_ContactPhase_TimeSeries', LatFECMarker_X_IndividualHopsContactPhase );
% 
%                                 %Lateral femoral epicondyle - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralFemoralEpicondyle', 'Y', 'Coordinates_ContactPhase_TimeSeries', LatFECMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Lateral femoral epicondyle - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralFemoralEpicondyle', 'Z', 'Coordinates_ContactPhase_TimeSeries', LatFECMarker_Z_IndividualHopsContactPhase );
%                                 
% 
% 
%                                 %Medial femoral epicondyle - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialFemoralEpicondyle', 'X', 'Coordinates_ContactPhase_TimeSeries', MeFECMarker_X_IndividualHopsContactPhase );
% 
%                                 %Medial femoral epicondyle - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialFemoralEpicondyle', 'Y', 'Coordinates_ContactPhase_TimeSeries', MeFECMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Medial femoral epicondyle - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialFemoralEpicondyle', 'Z', 'Coordinates_ContactPhase_TimeSeries', MeFECMarker_Z_IndividualHopsContactPhase );
%                                 
% 
% 
%                                 %Lateral malleolus - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralMalleolus', 'X', 'Coordinates_ContactPhase_TimeSeries', LatMalMarker_X_IndividualHopsContactPhase );
% 
%                                 %Lateral malleolus - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralMalleolus', 'Y', 'Coordinates_ContactPhase_TimeSeries', LatMalMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Lateral malleolus - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'LateralMalleolus', 'Z', 'Coordinates_ContactPhase_TimeSeries', LatMalMarker_Z_IndividualHopsContactPhase );
%                                 
% 
% 
%                                 %Medial malleolus - X-axis - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialMalleolus', 'X', 'Coordinates_ContactPhase_TimeSeries', MeMalMarker_X_IndividualHopsContactPhase );
% 
%                                 %Medial malleolus - Y-axis- entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialMalleolus', 'Y', 'Coordinates_ContactPhase_TimeSeries', MeMalMarker_Y_IndividualHopsContactPhase );
% 
%                                 %Medial malleolus - Z-axis  - entire contact phase
%                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
%                                     HoppingRate_ID{ b }, 'Markers', 'MedialMalleolus', 'Z', 'Coordinates_ContactPhase_TimeSeries', MeMalMarker_Z_IndividualHopsContactPhase );





%% Store Foot Energy Flow Data

                            %Time Series
                                

                                %Sagittal plane foot angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Sagittal', 'Angle_ContactPhase_TimeSeries', FootAngleSagittal_IndividualHopsContactPhase );

                                %Frontal plane foot angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Frontal', 'Angle_ContactPhase_TimeSeries', FootAngleFrontal_IndividualHopsContactPhase );

                                %Transverse plane foot angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Transverse', 'Angle_ContactPhase_TimeSeries', FootAngleTransverse_IndividualHopsContactPhase );
                                

                                %Sagittal plane foot angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Sagittal', 'AngVel__EnergyFlow_ContactPhase_TimeSeries', FootAngVelSagittal_EFlow_IndividualHopsContactPhase );

                                %Frontal plane foot angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Frontal', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', FootAngVelFrontal_EFlow_IndividualHopsContactPhase );

                                %Transverse plane foot angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Transverse', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', FootAngVelTransverse_EFlow_IndividualHopsContactPhase );


                                %Sagittal plane foot angle to horizontal - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Sagittal', 'AngletoHorizontal_ContactPhase_TimeSeries', FootAngletoHorizontal );

                                %Foot vertical length - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'Sagittal', 'VerticalLength_ContactPhase_TimeSeries', FootVerticalLength );
                            




                                %Foot active work - from ankle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleActivePower_ContactPhase_TimeSeries', AnkleActivePower_Foot_IndividualHopsContactPhase );
                                
                                %Foot passive work - from ankle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnklePassivePower_ContactPhase_TimeSeries', AnklePassivePower_Foot_IndividualHopsContactPhase );
                                
                                %Total foot energy - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'TotalEnergy_ContactPhase_TimeSeries', TotalFootEnergy_IndividualHopsContactPhase );
                                


                            




                                %Foot active work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleActivePower_BrakingPhase_TimeSeries', AnkleActivePower_Foot_Braking );
                                
                                %Foot passive work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnklePassivePower_BrakingPhase_TimeSeries', AnklePassivePower_Foot_Braking );
                                
                                %Total foot energy - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'TotalEnergy_BrakingPhase_TimeSeries', TotalFootEnergy_Braking );
                            




                                %Foot active work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleActivePower_PropulsionPhase_TimeSeries', AnkleActivePower_Foot_Propulsion );
                                
                                %Foot passive work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnklePassivePower_PropulsionPhase_TimeSeries', AnklePassivePower_Foot_Propulsion );
                                
                                %Total foot energy - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'TotalEnergy_PropulsionPhase_TimeSeries', TotalFootEnergy_Propulsion );




                            %Integrated Energy Data

                                %Foot active work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleActiveSegmentWork_Braking', AnkleActiveSegmentWork_Foot_Braking );
                                
                                %Foot passive work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnklePassiveSegmentWork_Braking', AnklePassiveSegmentWork_Foot_Braking );
                                
                                %Total foot work - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'TotalWork_Braking', FootWork_Braking );




                                %Foot average active power - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleAverageActivePower_Braking', AnkleAverageActivePower_Foot_Braking );
                                
                                %Foot average passive power - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleAveragePassivePower_Braking', AnkleAveragePassivePower_Foot_Braking );
                                
                                %Foot  average total power - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AverageTotalPower_Braking', FootAverageEnergy_Braking );



                                %Foot active work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleActiveSegmentWork_Propulsion', AnkleActiveSegmentWork_Foot_Propulsion );
                                
                                %Foot passive work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnklePassiveSegmentWork_Propulsion', AnklePassiveSegmentWork_Foot_Propulsion );
                                
                                %Total foot work - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'TotalWork_Propulsion', FootWork_Propulsion );



                                %Foot average active power - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleAverageActivePower_Propulsion', AnkleAverageActivePower_Foot_Propulsion );
                                
                                %Foot average passive power - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AnkleAveragePassivePower_Propulsion', AnkleAveragePassivePower_Foot_Propulsion );
                                
                                %Foot  average total power - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Foot', 'AverageTotalPower_Propulsion', FootAverageEnergy_Propulsion );
                                
                                    




%% Store Shank Energy Flow Data

                            %Time Series
                                

                                %Sagittal plane Shank angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Sagittal', 'Angle_ContactPhase_TimeSeries', ShankAngleSagittal_IndividualHopsContactPhase );

                                %Frontal plane Shank angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Frontal', 'Angle_ContactPhase_TimeSeries', ShankAngleFrontal_IndividualHopsContactPhase );

                                %Transverse plane Shank angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Transverse', 'Angle_ContactPhase_TimeSeries', ShankAngleTransverse_IndividualHopsContactPhase );
                                

                                %Sagittal plane Shank angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Sagittal', 'AngVel__EnergyFlow_ContactPhase_TimeSeries', ShankAngVelSagittal_EFlow_IndividualHopsContactPhase );

                                %Frontal plane Shank angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Frontal', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', ShankAngVelFrontal_EFlow_IndividualHopsContactPhase );

                                %Transverse plane Shank angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Transverse', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', ShankAngVelTransverse_EFlow_IndividualHopsContactPhase );
                                


                                %Sagittal plane Shank angle to horizontal - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Sagittal', 'AngletoHorizontal_ContactPhase_TimeSeries', ShankAngletoHorizontal );

                                %Shank vertical length - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'Sagittal', 'VerticalLength_ContactPhase_TimeSeries', ShankVerticalLength );
                            





                                %Shank active work - from ankle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleActivePower_ContactPhase_TimeSeries', AnkleActivePower_Shank_IndividualHopsContactPhase );
                                
                                %Shank passive work - from ankle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnklePassivePower_ContactPhase_TimeSeries', AnklePassivePower_Shank_IndividualHopsContactPhase );

                                %Shank active work - from Knee - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeActivePower_ContactPhase_TimeSeries', KneeActivePower_Shank_IndividualHopsContactPhase );
                                
                                %Shank passive work - from Knee - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneePassivePower_ContactPhase_TimeSeries', KneePassivePower_Shank_IndividualHopsContactPhase );
                                
                                %Total Shank energy - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'TotalEnergy_ContactPhase_TimeSeries', TotalShankEnergy_IndividualHopsContactPhase );
                            




                                %Shank active work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleActivePower_BrakingPhase_TimeSeries', AnkleActivePower_Shank_Braking );
                                
                                %Shank passive work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnklePassivePower_BrakingPhase_TimeSeries', AnklePassivePower_Shank_Braking );

                                %Shank active work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeActivePower_BrakingPhase_TimeSeries', KneeActivePower_Shank_Braking );
                                
                                %Shank passive work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneePassivePower_BrakingPhase_TimeSeries', KneePassivePower_Shank_Braking );
                                
                                %Total Shank energy - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'TotalEnergy_BrakingPhase_TimeSeries', TotalShankEnergy_Braking );
                            




                                %Shank active work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleActivePower_PropulsionPhase_TimeSeries', AnkleActivePower_Shank_Propulsion );
                                
                                %Shank passive work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnklePassivePower_PropulsionPhase_TimeSeries', AnklePassivePower_Shank_Propulsion );

                                %Shank active work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeActivePower_PropulsionPhase_TimeSeries', KneeActivePower_Shank_Propulsion );
                                
                                %Shank passive work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneePassivePower_PropulsionPhase_TimeSeries', KneePassivePower_Shank_Propulsion );
                                
                                %Total Shank energy - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'TotalEnergy_PropulsionPhase_TimeSeries', TotalShankEnergy_Propulsion );
                            








                            %Integrated Energy Data

                                %Shank active work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleActiveSegmentWork_Braking', AnkleActiveSegmentWork_Shank_Braking );
                                
                                %Shank passive work - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnklePassiveSegmentWork_Braking', AnklePassiveSegmentWork_Shank_Braking );

                                %Shank active work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeActiveSegmentWork_Braking', KneeActiveSegmentWork_Shank_Braking );
                                
                                %Shank passive work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneePassiveSegmentWork_Braking', KneePassiveSegmentWork_Shank_Braking );
                                
                                %Total Shank work - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'TotalWork_Braking', ShankWork_Braking );





                                %Shank average active power - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleAverageActivePower_Braking', AnkleAverageActivePower_Shank_Braking );
                                
                                %Shank average passive power - from ankle - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleAveragePassivePower_Braking', AnkleAveragePassivePower_Shank_Braking );

                                %Shank average active power - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeAverageActivePower_Braking', KneeAverageActivePower_Shank_Braking );
                                
                                %Shank average passive power - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeAveragePassivePower_Braking', KneeAveragePassivePower_Shank_Braking );
                                
                                %Shank  average total power - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AverageTotalPower_Braking', ShankAverageEnergy_Braking );






                                %Shank active work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleActiveSegmentWork_Propulsion', AnkleActiveSegmentWork_Shank_Propulsion );
                                
                                %Shank passive work - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnklePassiveSegmentWork_Propulsion', AnklePassiveSegmentWork_Shank_Propulsion );

                                %Shank active work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeActiveSegmentWork_Propulsion', KneeActiveSegmentWork_Shank_Propulsion );
                                
                                %Shank passive work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneePassiveSegmentWork_Propulsion', KneePassiveSegmentWork_Shank_Propulsion );
                                
                                %Total Shank work - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'TotalWork_Propulsion', ShankWork_Propulsion );




                                %Shank average active power - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleAverageActivePower_Propulsion', AnkleAverageActivePower_Shank_Propulsion );
                                
                                %Shank average passive power - from ankle - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AnkleAveragePassivePower_Propulsion', AnkleAveragePassivePower_Shank_Propulsion );

                                %Shank average active power - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeAverageActivePower_Propulsion', KneeAverageActivePower_Shank_Propulsion );
                                
                                %Shank average passive power - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'KneeAveragePassivePower_Propulsion', KneeAveragePassivePower_Shank_Propulsion );
                                
                                %Shank  average total power - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Shank', 'AverageTotalPower_Propulsion', ShankAverageEnergy_Propulsion );










                                
                                    




%% Store Thigh Energy Flow Data

                            %Time Series
                                

                                %Sagittal plane Thigh angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Sagittal', 'Angle_ContactPhase_TimeSeries', ThighAngleSagittal_IndividualHopsContactPhase );

                                %Frontal plane Thigh angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Frontal', 'Angle_ContactPhase_TimeSeries', ThighAngleFrontal_IndividualHopsContactPhase );

                                %Transverse plane Thigh angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Transverse', 'Angle_ContactPhase_TimeSeries', ThighAngleTransverse_IndividualHopsContactPhase );
                                

                                %Sagittal plane Thigh angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Sagittal', 'AngVel__EnergyFlow_ContactPhase_TimeSeries', ThighAngVelSagittal_EFlow_IndividualHopsContactPhase );

                                %Frontal plane Thigh angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Frontal', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', ThighAngVelFrontal_EFlow_IndividualHopsContactPhase );

                                %Transverse plane Thigh angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Transverse', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', ThighAngVelTransverse_EFlow_IndividualHopsContactPhase );
                                


                                %Sagittal plane Thigh angle to horizontal - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Sagittal', 'AngletoHorizontal_ContactPhase_TimeSeries', ThighAngletoHorizontal );

                                %Thigh vertical length - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'Sagittal', 'VerticalLength_ContactPhase_TimeSeries', ThighVerticalLength );
                            





                                %Thigh active work - from Knee - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeActivePower_ContactPhase_TimeSeries', KneeActivePower_Thigh_IndividualHopsContactPhase );
                                
                                %Thigh passive work - from Knee - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneePassivePower_ContactPhase_TimeSeries', KneePassivePower_Thigh_IndividualHopsContactPhase );

                                %Thigh active work - from Hip - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipActivePower_ContactPhase_TimeSeries', HipActivePower_Thigh_IndividualHopsContactPhase );
                                
                                %Thigh passive work - from Hip - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipPassivePower_ContactPhase_TimeSeries', HipPassivePower_Thigh_IndividualHopsContactPhase );
                                
                                %Total Thigh energy - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'TotalEnergy_ContactPhase_TimeSeries', TotalThighEnergy_IndividualHopsContactPhase );
                            




                                %Thigh active work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeActivePower_BrakingPhase_TimeSeries', KneeActivePower_Thigh_Braking );
                                
                                %Thigh passive work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneePassivePower_BrakingPhase_TimeSeries', KneePassivePower_Thigh_Braking );

                                %Thigh active work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipActivePower_BrakingPhase_TimeSeries', HipActivePower_Thigh_Braking );
                                
                                %Thigh passive work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipPassivePower_BrakingPhase_TimeSeries', HipPassivePower_Thigh_Braking );
                                
                                %Total Thigh energy - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'TotalEnergy_BrakingPhase_TimeSeries', TotalThighEnergy_Braking );
                            





                                %Thigh active work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeActivePower_PropulsionPhase_TimeSeries', KneeActivePower_Thigh_Propulsion );
                                
                                %Thigh passive work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneePassivePower_PropulsionPhase_TimeSeries', KneePassivePower_Thigh_Propulsion );
                                %Thigh active work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipActivePower_PropulsionPhase_TimeSeries', HipActivePower_Thigh_Propulsion );
                                
                                %Thigh passive work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipPassivePower_PropulsionPhase_TimeSeries', HipPassivePower_Thigh_Propulsion );
                                
                                %Total Thigh energy - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'TotalEnergy_PropulsionPhase_TimeSeries', TotalThighEnergy_Propulsion );
                            








                            %Integrated Energy Data

                                %Thigh active work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeActiveSegmentWork_Braking', KneeActiveSegmentWork_Thigh_Braking );
                                
                                %Thigh passive work - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneePassiveSegmentWork_Braking', KneePassiveSegmentWork_Thigh_Braking );

                                %Thigh active work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipActiveSegmentWork_Braking', HipActiveSegmentWork_Thigh_Braking );
                                
                                %Thigh passive work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipPassiveSegmentWork_Braking', HipPassiveSegmentWork_Thigh_Braking );
                                
                                %Total Thigh work - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'TotalWork_Braking', ThighWork_Braking );





                                %Thigh average active power - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeAverageActivePower_Braking', KneeAverageActivePower_Thigh_Braking );
                                
                                %Thigh average passive power - from Knee - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeAveragePassivePower_Braking', KneeAveragePassivePower_Thigh_Braking );

                                %Thigh average active power - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipAverageActivePower_Braking', HipAverageActivePower_Thigh_Braking );
                                
                                %Thigh average passive power - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipAveragePassivePower_Braking', HipAveragePassivePower_Thigh_Braking );
                                
                                %Thigh  average total power - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'AverageTotalPower_Braking', ThighAverageEnergy_Braking );





                                %Thigh active work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeActiveSegmentWork_Propulsion', KneeActiveSegmentWork_Thigh_Propulsion );
                                
                                %Thigh passive work - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneePassiveSegmentWork_Propulsion', KneePassiveSegmentWork_Thigh_Propulsion );

                                %Thigh active work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipActiveSegmentWork_Propulsion', HipActiveSegmentWork_Thigh_Propulsion );
                                
                                %Thigh passive work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipPassiveSegmentWork_Propulsion', HipPassiveSegmentWork_Thigh_Propulsion );
                                
                                %Total Thigh work - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'TotalWork_Propulsion', ThighWork_Propulsion );




                                %Thigh average active power - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeAverageActivePower_Propulsion', KneeAverageActivePower_Thigh_Propulsion );
                                
                                %Thigh average passive power - from Knee - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'KneeAveragePassivePower_Propulsion', KneeAveragePassivePower_Thigh_Propulsion );
                                
                                %Thigh average active power - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipAverageActivePower_Propulsion', HipAverageActivePower_Thigh_Propulsion );
                                
                                %Thigh average passive power - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'HipAveragePassivePower_Propulsion', HipAveragePassivePower_Thigh_Propulsion );
                                
                                %Thigh  average total power - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Thigh', 'AverageTotalPower_Propulsion', ThighAverageEnergy_Propulsion );








                                
                                    

%% Store Pelvis Energy Flow Data

                            %Time Series
                                

                                %Sagittal plane Pelvis angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Sagittal', 'Angle_ContactPhase_TimeSeries', PelvisAngleSagittal_IndividualHopsContactPhase );

                                %Frontal plane Pelvis angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Frontal', 'Angle_ContactPhase_TimeSeries', PelvisAngleFrontal_IndividualHopsContactPhase );

                                %Transverse plane Pelvis angle - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Transverse', 'Angle_ContactPhase_TimeSeries', PelvisAngleTransverse_IndividualHopsContactPhase );
                                

                                %Sagittal plane Pelvis angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Sagittal', 'AngVel__EnergyFlow_ContactPhase_TimeSeries', PelvisAngVelSagittal_EFlow_IndividualHopsContactPhase );

                                %Frontal plane Pelvis angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Frontal', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', PelvisAngVelFrontal_EFlow_IndividualHopsContactPhase );

                                %Transverse plane Pelvis angular velocity - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'Transverse', 'AngVel_EnergyFlow_ContactPhase_TimeSeries', PelvisAngVelTransverse_EFlow_IndividualHopsContactPhase );
                                


                            






                                %Pelvis active work - from Hip - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipActivePower_ContactPhase_TimeSeries', HipActivePower_Pelvis_IndividualHopsContactPhase );
                                
                                %Pelvis passive work - from Hip - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipPassivePower_ContactPhase_TimeSeries', HipPassivePower_Pelvis_IndividualHopsContactPhase );
                                
                                %Total Pelvis energy - entire contact phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'TotalEnergy_ContactPhase_TimeSeries', TotalPelvisEnergy_IndividualHopsContactPhase );
                            




                                %Pelvis active work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipActivePower_BrakingPhase_TimeSeries', HipActivePower_Pelvis_Braking );
                                
                                %Pelvis passive work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipPassivePower_BrakingPhase_TimeSeries', HipPassivePower_Pelvis_Braking );
                                
                                %Total Pelvis energy - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'TotalEnergy_BrakingPhase_TimeSeries', TotalPelvisEnergy_Braking );
                            




                                %Pelvis active work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipActivePower_PropulsionPhase_TimeSeries', HipActivePower_Pelvis_Propulsion );
                                
                                %Pelvis passive work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipPassivePower_PropulsionPhase_TimeSeries', HipPassivePower_Pelvis_Propulsion );
                                
                                %Total Pelvis energy - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'TotalEnergy_PropulsionPhase_TimeSeries', TotalPelvisEnergy_Propulsion );
                            








                            %Integrated Energy Data


                                %Pelvis active work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipActiveSegmentWork_Braking', HipActiveSegmentWork_Pelvis_Braking );
                                
                                %Pelvis passive work - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipPassiveSegmentWork_Braking', HipPassiveSegmentWork_Pelvis_Braking );
                                
                                %Total Pelvis work - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'TotalWork_Braking', PelvisWork_Braking );





                                %Pelvis average active power - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipAverageActivePower_Braking', HipAverageActivePower_Pelvis_Braking );
                                
                                %Pelvis average passive power - from Hip - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipAveragePassivePower_Braking', HipAveragePassivePower_Pelvis_Braking );
                                
                                %Pelvis  average total power - braking phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'AverageTotalPower_Braking', PelvisAverageEnergy_Braking );





                                %Pelvis active work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipActiveSegmentWork_Propulsion', HipActiveSegmentWork_Pelvis_Propulsion );
                                
                                %Pelvis passive work - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipPassiveSegmentWork_Propulsion', HipPassiveSegmentWork_Pelvis_Propulsion );
                                
                                %Total Pelvis work - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'TotalWork_Propulsion', PelvisWork_Propulsion );




                                
                                %Pelvis average active power - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipAverageActivePower_Propulsion', HipAverageActivePower_Pelvis_Propulsion );
                                
                                %Pelvis average passive power - from Hip - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'HipAveragePassivePower_Propulsion', HipAveragePassivePower_Pelvis_Propulsion );
                                
                                %Pelvis  average total power - Propulsion phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'Pelvis', 'AverageTotalPower_Propulsion', PelvisAverageEnergy_Propulsion );



%% Store Limb Length, Limb Stiffness Data in Data Structure



                                
                                %Limb vertical length
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'LimbVerticalLength_TimeSeries_ContactPhase', LimbVerticalLength_IndividualHopsContactPhase );
                                
                                %Limb stiffness
                                    %Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'LimbStiffness_TimeSeries_ContactPhase', LimbStiffness_IndividualHopsContactPhase );
                                    %Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'LimbStiffness_TimeSeries_BrakingPhase', LimbStiffness_Braking );
                                    %Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    HoppingRate_ID{ b }, 'LimbStiffness_TimeSeries_PropulsionPhase', LimbStiffness_Propulsion );





%%  *Store Ankle Data in Data Structure*




                                %Ankle Joint Reaction Force - Distal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'X', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_DistalSegment_X_IndividualHopsContactPhase);

                                %Ankle Joint Reaction Force - Distal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Y', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_DistalSegment_Y_IndividualHopsContactPhase);

                                %Ankle Joint Reaction Force - Distal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Z', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_DistalSegment_Z_IndividualHopsContactPhase);


                                %Ankle Joint Reaction Force - Proximal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'X', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_ProximalSegment_X_IndividualHopsContactPhase);

                                %Ankle Joint Reaction Force - Proximal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Y', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_ProximalSegment_Y_IndividualHopsContactPhase);

                                %Ankle Joint Reaction Force - Proximal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Z', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJRF_ProximalSegment_Z_IndividualHopsContactPhase);




                                %Ankle Joint Center Coordinate - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'X', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJtCenter_X_IndividualHopsContactPhase);

                                %Ankle Joint Center Coordinate - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Y', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJtCenter_Y_IndividualHopsContactPhase);

                                %Ankle Joint Center Coordinate - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Z', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJtCenter_Z_IndividualHopsContactPhase);




                                %Ankle Joint Center Linear Velocity - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'X', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointLinearVel_X_IndividualHopsContactPhase);

                                %Ankle Joint Center Linear Velocity - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Y', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointLinearVel_Y_IndividualHopsContactPhase);

                                %Ankle Joint Center Linear Velocity - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Z', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointLinearVel_Z_IndividualHopsContactPhase);




                                %Ankle Joint Torque for Energy Flow - Sagittal - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Sagittal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase);

                                %Ankle Joint Torque for Energy Flow - Frontal- Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Frontal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleTorque_Frontal_EnergyFlow_IndividualHopsContactPhase);

                                %Ankle Joint Torque for Energy Flow - Transverse - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Transverse', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleTorque_Transverse_EnergyFlow_IndividualHopsContactPhase);




                                %Ankle Power, Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Power_Scalar_Calculated_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointPowerScalar_Calculated_IndividualHopsContactPhase);

                                %Ankle active energy transfer, Individual Hops, Contact Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'ActiveEnergyTransfer_TimeSeries_ContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, AnkleActiveEnergyTransfer_IndividualHopsContactPhase);

                                %Total ankle energy transfer, Individual Hops, Contact Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'TotalEnergyTransfer_TimeSeries_EntireContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalAnkleEnergyTransfer_IndividualHopsContactPhase);




                                %Ankle Power, Individual Hops, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Power_Scalar_Calculated_TimeSeries_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointPowerScalar_Calculated_Braking);

                                %Ankle active energy transfer, Individual Hops, Braking Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'ActiveEnergyTransfer_TimeSeries_BrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, AnkleActiveEnergyTransfer_Braking);

                                %Total ankle energy transfer, Individual Hops, Braking Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'TotalEnergyTransfer_TimeSeries_EntireBrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalAnkleEnergyTransfer_Braking);




                                %Ankle Power, Individual Hops, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'Power_Scalar_Calculated_TimeSeries_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointPowerScalar_Calculated_Propulsion);

                                %Ankle active energy transfer, Individual Hops, Propulsion Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'ActiveEnergyTransfer_TimeSeries_PropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, AnkleActiveEnergyTransfer_Propulsion);

                                %Total ankle energy transfer, Individual Hops, Propulsion Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'TotalEnergyTransfer_TimeSeries_EntirePropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalAnkleEnergyTransfer_Propulsion);





                            %Integrated Data

                                %Ankle Active Segment Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'ActiveSegmentWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleActiveSegmentWorkTransfer_Braking );

                                %Ankle Total Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'TotalWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleTotalWorkTransfer_Braking );

                                %Ankle Joint Work Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'JointWorkScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointWorkScalar_Braking );



                                %Ankle Average Active Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageActivePowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageActiveEnergyTransfer_Braking );

                                %Ankle Average Total Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageTotalPowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageTotalEnergyTransfer_Braking );

                                %Ankle Average Joint Power Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageJointPowerScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageJointPowerScalar_Braking );




                                %Ankle Active Segment Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'ActiveSegmentWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleActiveSegmentWorkTransfer_Propulsion );

                                %Ankle Total Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'TotalWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleTotalWorkTransfer_Propulsion );

                                %Ankle Joint Work Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'JointWorkScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleJointWorkScalar_Propulsion );



                                %Ankle Average Active Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageActivePowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageActiveEnergyTransfer_Propulsion );

                                %Ankle Average Total Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageTotalPowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageTotalEnergyTransfer_Propulsion );

                                %Ankle Average Joint Power Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Ankle', 'AverageJointPowerScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, AnkleAverageJointPowerScalar_Propulsion );


                                
                                

                                
                                

        %% Store Knee Data in Data Structure




                                %Knee Joint Reaction Force - Distal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'X', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_DistalSegment_X_IndividualHopsContactPhase);

                                %Knee Joint Reaction Force - Distal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Y', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_DistalSegment_Y_IndividualHopsContactPhase);

                                %Knee Joint Reaction Force - Distal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Z', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_DistalSegment_Z_IndividualHopsContactPhase);


                                %Knee Joint Reaction Force - Proximal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'X', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_ProximalSegment_X_IndividualHopsContactPhase);

                                %Knee Joint Reaction Force - Proximal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Y', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_ProximalSegment_Y_IndividualHopsContactPhase);

                                %Knee Joint Reaction Force - Proximal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Z', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJRF_ProximalSegment_Z_IndividualHopsContactPhase);




                                %Knee Joint Center Coordinate - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'X', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJtCenter_X_IndividualHopsContactPhase);

                                %Knee Joint Center Coordinate - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Y', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJtCenter_Y_IndividualHopsContactPhase);

                                %Knee Joint Center Coordinate - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Z', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJtCenter_Z_IndividualHopsContactPhase);




                                %Knee Joint Center Linear Velocity - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'X', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointLinearVel_X_IndividualHopsContactPhase);

                                %Knee Joint Center Linear Velocity - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Y', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointLinearVel_Y_IndividualHopsContactPhase);

                                %Knee Joint Center Linear Velocity - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Z', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointLinearVel_Z_IndividualHopsContactPhase);




                                %Knee Joint Torque for Energy Flow - Sagittal - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Sagittal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase);

                                %Knee Joint Torque for Energy Flow - Frontal- Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Frontal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeTorque_Frontal_EnergyFlow_IndividualHopsContactPhase);

                                %Knee Joint Torque for Energy Flow - Transverse - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Transverse', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeTorque_Transverse_EnergyFlow_IndividualHopsContactPhase);




                                %Knee Power, Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Power_Scalar_Calculated_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointPowerScalar_Calculated_IndividualHopsContactPhase);

                                %Knee active energy transfer, Individual Hops, Contact Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'ActiveEnergyTransfer_TimeSeries_ContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, KneeActiveEnergyTransfer_IndividualHopsContactPhase);

                                %Total Knee energy transfer, Individual Hops, Contact Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'TotalEnergyTransfer_TimeSeries_EntireContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalKneeEnergyTransfer_IndividualHopsContactPhase);




                                %Knee Power, Individual Hops, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Power_Scalar_Calculated_TimeSeries_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointPowerScalar_Calculated_Braking);

                                %Knee active energy transfer, Individual Hops, Braking Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'ActiveEnergyTransfer_TimeSeries_BrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, KneeActiveEnergyTransfer_Braking);

                                %Total Knee energy transfer, Individual Hops, Braking Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'TotalEnergyTransfer_TimeSeries_EntireBrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalKneeEnergyTransfer_Braking);




                                %Knee Power, Individual Hops, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'Power_Scalar_Calculated_TimeSeries_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointPowerScalar_Calculated_Propulsion);

                                %Knee active energy transfer, Individual Hops, Propulsion Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'ActiveEnergyTransfer_TimeSeries_PropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, KneeActiveEnergyTransfer_Propulsion);

                                %Total Knee energy transfer, Individual Hops, Propulsion Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'TotalEnergyTransfer_TimeSeries_EntirePropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalKneeEnergyTransfer_Propulsion);





                            %Integrated Data

                                %Knee Active Segment Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'ActiveSegmentWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeActiveSegmentWorkTransfer_Braking );

                                %Knee Total Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'TotalWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeTotalWorkTransfer_Braking );

                                %Knee Joint Work Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'JointWorkScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointWorkScalar_Braking );



                                %Knee Average Active Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageActivePowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageActiveEnergyTransfer_Braking );

                                %Knee Average Total Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageTotalPowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageTotalEnergyTransfer_Braking );

                                %Knee Average Joint Power Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageJointPowerScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageJointPowerScalar_Braking );




                                %Knee Active Segment Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'ActiveSegmentWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeActiveSegmentWorkTransfer_Propulsion );

                                %Knee Total Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'TotalWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeTotalWorkTransfer_Propulsion );

                                %Knee Joint Work Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'JointWorkScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeJointWorkScalar_Propulsion );



                                %Knee Average Active Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageActivePowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageActiveEnergyTransfer_Propulsion );

                                %Knee Average Total Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageTotalPowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageTotalEnergyTransfer_Propulsion );

                                %Knee Average Joint Power Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Knee', 'AverageJointPowerScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, KneeAverageJointPowerScalar_Propulsion );


                                
                                
                                
                                
                                
        %%  Store Hip Data in Data Structure




                                %Hip Joint Reaction Force - Distal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'X', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_DistalSegment_X_IndividualHopsContactPhase);

                                %Hip Joint Reaction Force - Distal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Y', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_DistalSegment_Y_IndividualHopsContactPhase);

                                %Hip Joint Reaction Force - Distal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Z', 'JointReactionForce_DistalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_DistalSegment_Z_IndividualHopsContactPhase);


                                %Hip Joint Reaction Force - Proximal Segment - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'X', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_ProximalSegment_X_IndividualHopsContactPhase);

                                %Hip Joint Reaction Force - Proximal Segment - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Y', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_ProximalSegment_Y_IndividualHopsContactPhase);

                                %Hip Joint Reaction Force - Proximal Segment - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Z', 'JointReactionForce_ProximalSegment_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJRF_ProximalSegment_Z_IndividualHopsContactPhase);




                                %Hip Joint Center Coordinate - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'X', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJtCenter_X_IndividualHopsContactPhase);

                                %Hip Joint Center Coordinate - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Y', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJtCenter_Y_IndividualHopsContactPhase);

                                %Hip Joint Center Coordinate - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Z', 'JointCenter_Coordinate_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJtCenter_Z_IndividualHopsContactPhase);




                                %Hip Joint Center Linear Velocity - X-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'X', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointLinearVel_X_IndividualHopsContactPhase);

                                %Hip Joint Center Linear Velocity - Y-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Y', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointLinearVel_Y_IndividualHopsContactPhase);

                                %Hip Joint Center Linear Velocity - Z-Axis - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Z', 'JointCenter_LinearVel_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointLinearVel_Z_IndividualHopsContactPhase);




                                %Hip Joint Torque for Energy Flow - Sagittal - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Sagittal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipTorque_Sagittal_EnergyFlow_IndividualHopsContactPhase);

                                %Hip Joint Torque for Energy Flow - Frontal- Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Frontal', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipTorque_Frontal_EnergyFlow_IndividualHopsContactPhase);

                                %Hip Joint Torque for Energy Flow - Transverse - Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Transverse', 'Torque_EnergyFlow_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipTorque_Transverse_EnergyFlow_IndividualHopsContactPhase);




                                %Hip Power, Individual Hops, Contact Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Power_Scalar_Calculated_TimeSeries_ContactPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointPowerScalar_Calculated_IndividualHopsContactPhase);

                                %Hip active energy transfer, Individual Hops, Contact Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'ActiveEnergyTransfer_TimeSeries_ContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, HipActiveEnergyTransfer_IndividualHopsContactPhase);

                                %Total Hip energy transfer, Individual Hops, Contact Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'TotalEnergyTransfer_TimeSeries_EntireContactPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalHipEnergyTransfer_IndividualHopsContactPhase);




                                %Hip Power, Individual Hops, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Power_Scalar_Calculated_TimeSeries_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointPowerScalar_Calculated_Braking);

                                %Hip active energy transfer, Individual Hops, Braking Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'ActiveEnergyTransfer_TimeSeries_BrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, HipActiveEnergyTransfer_Braking);

                                %Total Hip energy transfer, Individual Hops, Braking Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'TotalEnergyTransfer_TimeSeries_EntireBrakingPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalHipEnergyTransfer_Braking);




                                %Hip Power, Individual Hops, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'Power_Scalar_Calculated_TimeSeries_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointPowerScalar_Calculated_Propulsion);

                                %Hip active energy transfer, Individual Hops, Propulsion Phase
                                 David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'ActiveEnergyTransfer_TimeSeries_PropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, HipActiveEnergyTransfer_Propulsion);

                                %Total Hip energy transfer, Individual Hops, Propulsion Phase                  
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'TotalEnergyTransfer_TimeSeries_EntirePropulsionPhase',HoppingRate_ID{ b },HoppingTrialNumber{ q }, TotalHipEnergyTransfer_Propulsion);





                            %Integrated Data

                                %Hip Active Segment Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'ActiveSegmentWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipActiveSegmentWorkTransfer_Braking );

                                %Hip Total Work Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'TotalWorkTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipTotalWorkTransfer_Braking );

                                %Hip Joint Work Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'JointWorkScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointWorkScalar_Braking );



                                %Hip Average Active Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageActivePowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageActiveEnergyTransfer_Braking );

                                %Hip Average Total Power Transfer, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageTotalPowerTransfer_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageTotalEnergyTransfer_Braking );

                                %Hip Average Joint Power Scalar, Braking Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageJointPowerScalar_BrakingPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageJointPowerScalar_Braking );




                                %Hip Active Segment Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'ActiveSegmentWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipActiveSegmentWorkTransfer_Propulsion );

                                %Hip Total Work Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'TotalWorkTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipTotalWorkTransfer_Propulsion );

                                %Hip Joint Work Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'JointWorkScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipJointWorkScalar_Propulsion );



                                %Hip Average Active Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageActivePowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageActiveEnergyTransfer_Propulsion );

                                %Hip Average Total Power Transfer, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageTotalPowerTransfer_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageTotalEnergyTransfer_Propulsion );

                                %Hip Average Joint Power Scalar, Propulsion Phase
                                David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals',GroupList{m}, ParticipantList{ n },'IndividualHops',LimbID{ a },...
                                    'Hip', 'AverageJointPowerScalar_PropulsionPhase',HoppingRate_ID{ b }, HoppingTrialNumber{ q }, HipAverageJointPowerScalar_Propulsion );


                                
                                
                                
                                
                                
                                
                                
    %% END Q Loop - Hopping Bout

                            end

                            
                                
                                

                                
 %% END B Loop - Hopping Rate                       
                            
                        end

                    
%% END A Loop - Limb                
                    
            end

            end%END IF STATEMENT FOR REPROCESSING EACH PARTICIPANT'S DATA
            
%% END N Loop - Participant          
            
        end
        
  
        
        
        
%% END M Loop - Group        
        
    end
    
    

    
    
    
    
    
    
    
    
    
%% END L Loop

end


if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 3',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end










 %% SECTION 4 - Take Participant/Group Averages for Each Hopping Rate (Average of Energy Flow Matrices)
  
 %Round hopping rate ID to avoid weird errors
 EnergyFlow(:, 8) = round( EnergyFlow(:, 8), 1 );

    %Will use these to know which row to fill in the energy flow means
    RowtoFill_EnergyFlow = 1;
    RowtoFill_EnergyFlow_ParticipantMeans = 1;


    %Need to know how many SD columns we need for EnergyFlow
    NumberofSD_Columns_EnergyFlowTable =  size( EnergyFlow, 2 ) - 10 ;

    %Create a vector for filling in the SD columns
    ColumntoFill_SD_EnergyFlowTable = ( size( EnergyFlow, 2 ) + 1 ) : ( size( EnergyFlow, 2 ) + NumberofSD_Columns_EnergyFlowTable ) ;


    %Initialize matrices to energy flow means
    EnergyFlow_GroupMeansPerHoppingRate = NaN( 1,  size( EnergyFlow, 2 ) + NumberofSD_Columns_EnergyFlowTable ); 
    EnergyFlow_ParticipantMeansPerHoppingRate = NaN( 1,  size( EnergyFlow, 2 ) + NumberofSD_Columns_EnergyFlowTable ); 
    
    

%Begin M For Loop - Loop Through Groups    
for m = 1:numel(GroupList)

    %Use get field to create a new data structure containing the list of participants. List of participants is
    %stored under the second field of the structure (the list of groups)


    %Need to know which rows in the 1st column of EnergyFlow correspond to the Mth
    %group
    EnergyFlow_IndicesForOneGroup = find( EnergyFlow(:, 1) == m );

    %Create a new energy flow matrix containing only Group M
    EnergyFlow_OneGroup = EnergyFlow( EnergyFlow_IndicesForOneGroup, :);






    %If Group being processed is ATx, set Participant List to contain list of ATx participants.
    %If Group being processed is Controls, set Participant List to contain list of Control
    %participants.
    if strcmp( GroupList{m}, 'ATx' )

        ParticipantList = ATxParticipantList;

        ParticipantMass = ATxParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    else

        ParticipantList = ControlParticipantList;

        ParticipantMass = ControlParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    end





%% Begin A For Loop - Loop Through Limbs

    for a = 1:numel(LimbID)


        %Need to know which rows in the 3rd column of EnergyFlow_OneGroup correspond to Limb A
        EnergyFlow_IndicesForOneLimb = find( EnergyFlow_OneGroup(:, 3) == a );


        %Create a new energy flow matrix containing only Limb A
        EnergyFlow_OneLimb = EnergyFlow_OneGroup( EnergyFlow_IndicesForOneLimb, :);




%% Begin B For Loop - Loop Through Hopping Rates      

            for b = 1 : numel( HoppingRate_ID)



                %Need to know which rows in the 14th column of EnergyFlow_OneLimb correspond
                %to Hopping Rate B
                EnergyFlow_IndicesforOneRate = find( EnergyFlow_OneLimb( :, 8) == HoppingRate_ID_forTable(b) );

                %Create a new energy flow matrix containing only Hopping Rate B
                EnergyFlow_OneRate = EnergyFlow_OneLimb( EnergyFlow_IndicesforOneRate, : );



                %Need to create a vector containing the values  for  each joint (1 for ankle, 2 for knee, 3
                %for hip )
                VectorofUniqueJoints = unique( EnergyFlow_OneRate( :, 7 ) );




%% Begin C For Loop - Loop Through Each Joint

                for c = 1 : length( VectorofUniqueJoints ) 

                    

                    %Need to know which rows in the 7th column of EnergyFlow_OneRate
                    %correspond to Joint C
                    EnergyFlow_IndicesforOneJoint = find( EnergyFlow_OneRate( :, 7 ) == VectorofUniqueJoints( c ) );

                    %Create a new energy flow matrix containing only Joint C
                    EnergyFlow_OneJoint = EnergyFlow_OneRate( EnergyFlow_IndicesforOneJoint, : );


                    %Create vector containing the segments (foot, shank, thigh, pelvis) corresponding to
                    %Joint C
                    VectorofUniqueSegments = unique( EnergyFlow_OneJoint( :, 9 ) );

                    for g = 1 : length( VectorofUniqueSegments )

                        %Need to know which rows in the 9th column of EnergyFlow_OneRate
                        %correspond to segment G
                        EnergyFlow_IndicesforOneSegment= find( EnergyFlow_OneJoint( :, 9 ) == VectorofUniqueSegments( g ) );
    
                        %Create a new energy flow matrix containing only Segment G
                        EnergyFlow_OneSegment = EnergyFlow_OneJoint( EnergyFlow_IndicesforOneSegment, : );


                        %Create vector containing the values for proximal vs distal segments for Segment
                        %G
                        VectorofUniqueProxvsDistSegments = unique( EnergyFlow_OneSegment( :, 10 ) );


                        for h = 1 : length( VectorofUniqueProxvsDistSegments )

                            %Need to know which rows in the 9th column of EnergyFlow_OneRate
                            %correspond to segment G
                            EnergyFlow_IndicesforOneProxvsDistSegment= find( EnergyFlow_OneSegment( :, 10 ) == VectorofUniqueProxvsDistSegments( h ) );
        
                            %Create a new energy flow matrix containing only Segment G
                            EnergyFlow_OneProxvsDistSegment = EnergyFlow_OneSegment( EnergyFlow_IndicesforOneProxvsDistSegment, : );



                            %We want to take average of participant data, so fist create a vector containing
                            %Participant IDs. Use unique() to get rid of repeating IDs.
                            VectorofUniqueParticipants = unique( EnergyFlow_OneProxvsDistSegment( :, 2 ) );




%% Calculate Group Means - Energy Flow

                            %Take average of each column of Power_OneJoint and store in the next row of JointPower_GroupMeansPerHoppingRate
                            EnergyFlow_GroupMeansPerHoppingRate( RowtoFill_EnergyFlow, 1 : size( EnergyFlow, 2) ) = mean(  EnergyFlow_OneProxvsDistSegment, 1, 'omitnan'  );
        
                            for z = 1 : numel( ColumntoFill_SD_EnergyFlowTable )
        
                                %Find standard deviation of each power variable
                                EnergyFlow_GroupMeansPerHoppingRate( RowtoFill_EnergyFlow, ColumntoFill_SD_EnergyFlowTable(z) ) =...
                                    std(  EnergyFlow_OneProxvsDistSegment( :, ColumntoFill_SD_EnergyFlowTable( z ) -NumberofSD_Columns_EnergyFlowTable  ), 'omitnan'  );
        
                            end
        
                            %Add 1 to RowtoFill_JointPower  so the next loop will fill the next row of JointPower_GroupMeansPerHoppingRate
                            RowtoFill_EnergyFlow =  RowtoFill_EnergyFlow + 1;
                    



%% Begin E For Loop - Loop Through Participants

                            for e = 1 : numel( VectorofUniqueParticipants )
                            
                                %Find which rows in the 2nd column of Power_OneJoint correspond to Participant E
                                EnergyFlow_IndicesforOneParticipant = find( EnergyFlow_OneProxvsDistSegment( :, 2 ) == VectorofUniqueParticipants( e ) );
                            
                                %Create a new joint power matrix containing only Participant E
                                EnergyFlow_OneParticipant = EnergyFlow_OneProxvsDistSegment( EnergyFlow_IndicesforOneParticipant, : );
        
        
        %% Calculate Participant Means - Energy Flow
        
                                %Find the mean of all columns of Power_OneParticipant and store in the same
                                %columns in JointPower_ParticipantMeansPerHoppingRate
                                EnergyFlow_ParticipantMeansPerHoppingRate( RowtoFill_EnergyFlow_ParticipantMeans, 1 : size( EnergyFlow, 2) ) = mean(  EnergyFlow_OneParticipant, 1, 'omitnan'  );
                                
                                %Use this for loop to calculate the SD of each numerical variable in
                                %EnergyFlow and store in the next column of
                                %JointPower_ParticipantMeansPerHoppingRate. Find the column in
                                %Power_OneParticipant by subtracting the total number of SD columns from the
                                %ColumntoFill_SD variable.
                                for z = 1 : numel( ColumntoFill_SD_EnergyFlowTable )
        
                                    %Find standard deviation of each power variable
                                    EnergyFlow_ParticipantMeansPerHoppingRate( RowtoFill_EnergyFlow_ParticipantMeans, ColumntoFill_SD_EnergyFlowTable(z) ) =...
                                        std(  EnergyFlow_OneParticipant( :, ColumntoFill_SD_EnergyFlowTable( z ) - NumberofSD_Columns_EnergyFlowTable ), 'omitnan'  );
                                
                                end
                               
                                %Add 1 to RowtoFill_JointPower_ParticipantMeans so that the next loop fills in
                                %the next row of JointPower_ParticipantMeansPerHoppingRate
                               RowtoFill_EnergyFlow_ParticipantMeans = RowtoFill_EnergyFlow_ParticipantMeans + 1;
        
                            end%End E Loop - Each Participant
                        
                         
                         end%End H Loop - Each Prox vs Dist Segment


                    end%End G Loop - Each Seegment
                    
                    
                end%End C Loop - Each Joint
                
                
            end%End B Loop - Hopping Rate
            
            
    end%End A Loop - Limb ID
    
end%End M Loop - Group ID
    
    

if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 4',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end








  %% SECTION 5 - Find Between-Limb Diff, Use Participant Means
  

EnergyFlow_ParticipantMeansPerHoppingRate(:,8) = round( EnergyFlow_ParticipantMeansPerHoppingRate(:,8) , 1 );


    %Will use these to know which row to fill in the joint power and joint behavior index means
    RowtoFill_EnergyFlow_LimbDiff = 1;
    

    %Initialize matrices to hold between-limb differences in energy flow. Find the necessary number of columns by
    %finding the number of columns EnergyFlow_ParticipantMeansPerHoppingRate then adding that number -
    %10, because there are 10 columns of categorical variables.
    EnergyFlow_ParticipantMeansLimbDiff = NaN( 1,  size( EnergyFlow_ParticipantMeansPerHoppingRate, 2 ) + ( size( EnergyFlow_ParticipantMeansPerHoppingRate, 2 )  - 14  ) ); 
  
    

    %Find number of columns in EnergyFlow_ParticipantMeansPerHoppingRate. Will use this to fill in the
    %appropriate columns when calculating between-limb ratios
    NumColumn = size( EnergyFlow_ParticipantMeansPerHoppingRate, 2 );
    

%Begin M For Loop - Loop Through Groups    
for m = 1:numel(GroupList)

    %Use get field to create a new data structure containing the list of participants. List of participants is
    %stored under the second field of the structure (the list of groups)


    %Need to know which rows in the 1st column of EnergyFlow correspond to the Mth
    %group
    EnergyFlow_IndicesForOneGroup = find( EnergyFlow_ParticipantMeansPerHoppingRate(:, 1) == m );

    %Create a new joint power matrix containing only Group M
    EnergyFlow_OneGroup = EnergyFlow_ParticipantMeansPerHoppingRate( EnergyFlow_IndicesForOneGroup, :);






    %If Group being processed is ATx, set Participant List to contain list of ATx participants.
    %If Group being processed is Controls, set Participant List to contain list of Control
    %participants.
    if strcmp( GroupList{m}, 'ATx' )

        ParticipantList = ATxParticipantList;

        ParticipantMass = ATxParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    else

        ParticipantList = ControlParticipantList;

        ParticipantMass = ControlParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    end





%% Begin B For Loop - Loop Through Hopping Rates      

            for b = 1 : numel( HoppingRate_ID)



                %Need to know which rows in the 8th column of Power_OneLimb correspond
                %to Hopping Rate B
                EnergyFlow_IndicesforOneRate = find( EnergyFlow_OneGroup( :, 8) == round(HoppingRate_ID_forTable( b ), 1 ) );

                %Create a new joint power matrix containing only Hopping Rate B
                EnergyFlow_OneRate = EnergyFlow_OneGroup( EnergyFlow_IndicesforOneRate, : );



                %Need to create a vector containing the values  for  each joint (1 for ankle, 2 for knee, 3
                %for hip ). These are stored in column 7
                VectorofUniqueJoints = unique( EnergyFlow_OneRate( :, 7 ) );




%% Begin C For Loop - Loop Through Each Joint

                for c = 1 : length( VectorofUniqueJoints ) 

                    

                    %Need to know which rows in the 7th column of Power_OneRate
                    %correspond to Joint C
                    EnergyFlow_IndicesforOneJoint = find( EnergyFlow_OneRate( :, 7 ) == VectorofUniqueJoints( c ) );

                    %Create a new joint power matrix containing only Joint C
                    EnergyFlow_OneJoint = EnergyFlow_OneRate( EnergyFlow_IndicesforOneJoint, : );


                    %Create vector containing the segments (foot, shank, thigh, pelvis) corresponding to
                    %Joint C
                    VectorofUniqueSegments = unique( EnergyFlow_OneJoint( :, 9 ) );



                    for g = 1 : length( VectorofUniqueSegments )

                        %Need to know which rows in the 9th column of EnergyFlow_OneRate
                        %correspond to segment G
                        EnergyFlow_IndicesforOneSegment= find( EnergyFlow_OneJoint( :, 9 ) == VectorofUniqueSegments( g ) );
    
                        %Create a new energy flow matrix containing only Segment G
                        EnergyFlow_OneSegment = EnergyFlow_OneJoint( EnergyFlow_IndicesforOneSegment, : );


                        %Create vector containing the values for proximal vs distal segments for Segment
                        %G
                        VectorofUniqueProxvsDistSegments = unique( EnergyFlow_OneSegment( :, 10 ) );



                        for h = 1 : length( VectorofUniqueProxvsDistSegments )

                            %Need to know which rows in the 9th column of EnergyFlow_OneRate
                            %correspond to segment G
                            EnergyFlow_IndicesforOneProxvsDistSegment= find( EnergyFlow_OneSegment( :, 10 ) == VectorofUniqueProxvsDistSegments( h ) );
        
                            %Create a new energy flow matrix containing only Segment G
                            EnergyFlow_OneProxvsDistSegment = EnergyFlow_OneSegment( EnergyFlow_IndicesforOneProxvsDistSegment, : );

                            

                            %We want to take average of participant data, so fist create a vector containing
                            %Participant IDs. Use unique() to get rid of repeating IDs.
                            VectorofUniqueParticipants = unique( EnergyFlow_OneProxvsDistSegment( :, 2 ) );



                    
%% Begin E For Loop - Loop Through Participants
                            for e = 1 : numel( VectorofUniqueParticipants )
                    
                    
%% Joint Power Calculations


                                EnergyFlow_IndicesforOneParticipant = find( EnergyFlow_OneProxvsDistSegment( :, 2 ) == VectorofUniqueParticipants( e ) );
                            
                                %Create a new joint power matrix containing only Participant E
                                EnergyFlow_OneParticipant = EnergyFlow_OneProxvsDistSegment( EnergyFlow_IndicesforOneParticipant, : );
        
                                %Store Group_ID, Participant_ID, Joint_ID, HoppingRate_ID, Segment ID (foot, shank, thigh, pelvis), Proximal vs Distal Segment ID in the first 6 columns
                                %of JointPower_ParticipantMeansLimbDiff
                                EnergyFlow_ParticipantMeansLimbDiff( RowtoFill_EnergyFlow_LimbDiff, 1 : 6 ) = EnergyFlow_OneParticipant( 1, [ 1, 2, 7, 8, 9, 10 ] );
                        


                        %Use this for loop to calculate the between-limb diff in the numerical variables
                        %of Power_OneParticipant, which is from column 11 onward.
                        for z = 11 : size( EnergyFlow_OneParticipant, 2 )


                            %Calculate between-limb diff as either Non-Involved Minus Involved or
                            %Contralateral Minus Matched Dominance. Use z - 4 to find the correct column
                            %because we're only using 6 categorical variables instead of 11
                            EnergyFlow_ParticipantMeansLimbDiff( RowtoFill_EnergyFlow_LimbDiff, z - 4 ) = EnergyFlow_OneParticipant( 2, z ) - EnergyFlow_OneParticipant( 1, z );


                            %Calculate between-limb ratio as Involved divided by Non-Involved  or
                            %Matched Dominance divided by Contralateral. Find the column to fill by using
                            %NumColumn + z - 10. NumColumn is the number of columns in
                            %EnergyFlow_ParticipantMeansPerHoppingRate. Add z then subtract 10 to fill
                            %in the right column. Example: If calculating ratio for column 11 of
                            %EnergyFlow_ParticipantMeansPerHoppingRate, z = 11; minus 10 = 1 --> fill in
                            %the column right after the end of EnergyFlow_ParticipantMeansPerHoppingRate.
                            EnergyFlow_ParticipantMeansLimbDiff( RowtoFill_EnergyFlow_LimbDiff, NumColumn + z - 14  ) = EnergyFlow_OneParticipant( 1, z ) ./ EnergyFlow_OneParticipant( 2, z );


                        
                        end
                       
                       RowtoFill_EnergyFlow_LimbDiff = RowtoFill_EnergyFlow_LimbDiff + 1;
                            
                            end%End E Loop - Each Participant

                        end% End H Loop - Each Proximal vs Distal Segment

                    end%End G Loop - Each Segment
                    
                    
                end%End C Loop - Each Joint
                
                
            end%End B Loop - Hopping Rate
    
end%End M Loop - Group ID
    
    

if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 5',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end



%% SECTION 6 - Take Participant/Group Averages for Each Hopping Rate (Average of JointReactionForceAndLinearVel Matrices)
  
 %Round hopping rate ID to avoid weird errors
 JointReactionForceAndLinearVel(:, 8) = round( JointReactionForceAndLinearVel(:, 8), 1 );

    %Will use these to know which row to fill in the energy flow means
    RowtoFill_JointReactionForceAndLinearVel = 1;
    RowtoFill_JointReactionForceAndLinearVel_ParticipantMeans = 1;


    %Need to know how many SD columns we need for JointReactionForceAndLinearVel. Subtract 9 because
    %there are 9 categorical variables - don't need the SD of these
    NumberofSD_Columns_JointReactionForceAndLinearVelTable =  size( JointReactionForceAndLinearVel, 2 ) - 9;

    %Create a vector for filling in the SD columns
    ColumntoFill_SD_JointReactionForceAndLinearVelTable = ( size( JointReactionForceAndLinearVel, 2 ) + 1 ) : ( size( JointReactionForceAndLinearVel, 2 ) + NumberofSD_Columns_JointReactionForceAndLinearVelTable ) ;


    %Initialize matrices to energy flow means
    JointReactionForceAndLinearVel_GroupMeansPerHoppingRate = NaN( 1,  size( JointReactionForceAndLinearVel, 2 ) + NumberofSD_Columns_JointReactionForceAndLinearVelTable ); 
    JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate = NaN( 1,  size( JointReactionForceAndLinearVel, 2 ) + NumberofSD_Columns_JointReactionForceAndLinearVelTable ); 
    
    

%Begin M For Loop - Loop Through Groups    
for m = 1:numel(GroupList)

    %Use get field to create a new data structure containing the list of participants. List of participants is
    %stored under the second field of the structure (the list of groups)


    %Need to know which rows in the 1st column of JointReactionForceAndLinearVel correspond to the Mth
    %group
    JointReactionForceAndLinearVel_IndicesForOneGroup = find( JointReactionForceAndLinearVel(:, 1) == m );

    %Create a new energy flow matrix containing only Group M
    JointReactionForceAndLinearVel_OneGroup = JointReactionForceAndLinearVel( JointReactionForceAndLinearVel_IndicesForOneGroup, :);






    %If Group being processed is ATx, set Participant List to contain list of ATx participants.
    %If Group being processed is Controls, set Participant List to contain list of Control
    %participants.
    if strcmp( GroupList{m}, 'ATx' )

        ParticipantList = ATxParticipantList;

        ParticipantMass = ATxParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    else

        ParticipantList = ControlParticipantList;

        ParticipantMass = ControlParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    end





%% Begin A For Loop - Loop Through Limbs

    for a = 1:numel(LimbID)


        %Need to know which rows in the 3rd column of JointReactionForceAndLinearVel_OneGroup correspond to Limb A
        JointReactionForceAndLinearVel_IndicesForOneLimb = find( JointReactionForceAndLinearVel_OneGroup(:, 3) == a );


        %Create a new energy flow matrix containing only Limb A
        JointReactionForceAndLinearVel_OneLimb = JointReactionForceAndLinearVel_OneGroup( JointReactionForceAndLinearVel_IndicesForOneLimb, :);




%% Begin B For Loop - Loop Through Hopping Rates      

            for b = 1 : numel( HoppingRate_ID)



                %Need to know which rows in the 14th column of JointReactionForceAndLinearVel_OneLimb correspond
                %to Hopping Rate B
                JointReactionForceAndLinearVel_IndicesforOneRate = find( JointReactionForceAndLinearVel_OneLimb( :, 8) == HoppingRate_ID_forTable(b) );

                %Create a new energy flow matrix containing only Hopping Rate B
                JointReactionForceAndLinearVel_OneRate = JointReactionForceAndLinearVel_OneLimb( JointReactionForceAndLinearVel_IndicesforOneRate, : );



                %Need to create a vector containing the values  for  each joint (1 for ankle, 2 for knee, 3
                %for hip )
                VectorofUniqueJoints = unique( JointReactionForceAndLinearVel_OneRate( :, 7 ) );




%% Begin C For Loop - Loop Through Each Joint

                for c = 1 : length( VectorofUniqueJoints ) 

                    

                    %Need to know which rows in the 7th column of JointReactionForceAndLinearVel_OneRate
                    %correspond to Joint C
                    JointReactionForceAndLinearVel_IndicesforOneJoint = find( JointReactionForceAndLinearVel_OneRate( :, 7 ) == VectorofUniqueJoints( c ) );

                    %Create a new energy flow matrix containing only Joint C
                    JointReactionForceAndLinearVel_OneJoint = JointReactionForceAndLinearVel_OneRate( JointReactionForceAndLinearVel_IndicesforOneJoint, : );


                    %Create vector containing the X, Y, and Z axes
                    VectorofUniqueAxes= unique( JointReactionForceAndLinearVel_OneJoint( :, 9 ) );



                    for g = 1 : length( VectorofUniqueAxes )

                        %Need to know which rows in the 9th column of JointReactionForceAndLinearVel_OneRate
                        %correspond to segment G
                        JointReactionForceAndLinearVel_IndicesforOneAxis= find( JointReactionForceAndLinearVel_OneJoint( :, 9 ) == VectorofUniqueAxes( g ) );
    
                        %Create a new energy flow matrix containing only Segment G
                        JointReactionForceAndLinearVel_OneAxis = JointReactionForceAndLinearVel_OneJoint( JointReactionForceAndLinearVel_IndicesforOneAxis, : );


                        %We want to take average of participant data, so fist create a vector containing
                        %Participant IDs. Use unique() to get rid of repeating IDs.
                        VectorofUniqueParticipants = unique( JointReactionForceAndLinearVel_OneAxis( :, 2 ) );




%% Calculate Group Means - Energy Flow

                            %Take average of each column of Power_OneJoint and store in the next row of JointPower_GroupMeansPerHoppingRate
                            JointReactionForceAndLinearVel_GroupMeansPerHoppingRate( RowtoFill_JointReactionForceAndLinearVel, 1 : size( JointReactionForceAndLinearVel, 2) ) = mean(  JointReactionForceAndLinearVel_OneAxis, 1, 'omitnan'  );
        
                            for z = 1 : numel( ColumntoFill_SD_JointReactionForceAndLinearVelTable )
        
                                %Find standard deviation of each power variable
                                JointReactionForceAndLinearVel_GroupMeansPerHoppingRate( RowtoFill_JointReactionForceAndLinearVel, ColumntoFill_SD_JointReactionForceAndLinearVelTable(z) ) =...
                                    std(  JointReactionForceAndLinearVel_OneAxis( :, ColumntoFill_SD_JointReactionForceAndLinearVelTable( z ) -NumberofSD_Columns_JointReactionForceAndLinearVelTable  ), 'omitnan'  );
        
                            end
        
                            %Add 1 to RowtoFill_JointPower  so the next loop will fill the next row of JointPower_GroupMeansPerHoppingRate
                            RowtoFill_JointReactionForceAndLinearVel =  RowtoFill_JointReactionForceAndLinearVel + 1;
                    



%% Begin E For Loop - Loop Through Participants

                        for e = 1 : numel( VectorofUniqueParticipants )
                        
                            %Find which rows in the 2nd column of Power_OneJoint correspond to Participant E
                            JointReactionForceAndLinearVel_IndicesforOneParticipant = find( JointReactionForceAndLinearVel_OneAxis( :, 2 ) == VectorofUniqueParticipants( e ) );
                        
                            %Create a new joint power matrix containing only Participant E
                            JointReactionForceAndLinearVel_OneParticipant =JointReactionForceAndLinearVel_OneAxis( JointReactionForceAndLinearVel_IndicesforOneParticipant, : );
    
    
    %% Calculate Participant Means - Energy Flow
    
                            %Find the mean of all columns of Power_OneParticipant and store in the same
                            %columns in JointPower_ParticipantMeansPerHoppingRate
                            JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate( RowtoFill_JointReactionForceAndLinearVel_ParticipantMeans, 1 : size( JointReactionForceAndLinearVel, 2) ) = mean(  JointReactionForceAndLinearVel_OneParticipant, 1, 'omitnan'  );
                            
                            %Use this for loop to calculate the SD of each numerical variable in
                            %JointReactionForceAndLinearVel and store in the next column of
                            %JointPower_ParticipantMeansPerHoppingRate. Find the column in
                            %Power_OneParticipant by subtracting the total number of SD columns from the
                            %ColumntoFill_SD variable.
                            for z = 1 : numel( ColumntoFill_SD_JointReactionForceAndLinearVelTable )
    
                                %Find standard deviation of each power variable
                                JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate( RowtoFill_JointReactionForceAndLinearVel_ParticipantMeans, ColumntoFill_SD_JointReactionForceAndLinearVelTable(z) ) =...
                                    std(  JointReactionForceAndLinearVel_OneParticipant( :, ColumntoFill_SD_JointReactionForceAndLinearVelTable( z ) - NumberofSD_Columns_JointReactionForceAndLinearVelTable ), 'omitnan'  );
                            
                            end
                           
                            %Add 1 to RowtoFill_JointPower_ParticipantMeans so that the next loop fills in
                            %the next row of JointPower_ParticipantMeansPerHoppingRate
                           RowtoFill_JointReactionForceAndLinearVel_ParticipantMeans = RowtoFill_JointReactionForceAndLinearVel_ParticipantMeans + 1;
        
                        end%End E Loop - Each Participant
                        
                    end%End G Loop - Each Seegment
                    
                    
                end%End C Loop - Each Joint
                
                
            end%End B Loop - Hopping Rate
            
            
    end%End A Loop - Limb ID
    
end%End M Loop - Group ID
    
    

if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 6',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end


 




  %% SECTION 7 - Find Between-Limb Diff of Joint Reaction Force/Linear Vel, Use Participant Means
  

JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate(:,8) = round( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate(:,8) , 1 );


    %Will use these to know which row to fill in the joint power and joint behavior index means
    RowtoFill_JointReactionForceAndLinearVel_LimbDiff = 1;
    

    %Initialize matrices to hold between-limb differences in energy flow. Find the necessary number of columns by
    %finding the number of columns JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate then
    %adding that number minus
    %13, because there are 9 columns of categorical variables - won't find the ratios for these
    %variables. Extra 4 is because we remove 4 of the original categorical variables in
    %JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate. Don't need hop number, trial number,
    %MTU ID, or Limb ID
    JointReactionForceAndLinearVel_ParticipantMeansLimbDiff =...
        NaN( 1,  size( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate, 2 ) + ( size( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate, 2 )  - 13  ) ); 
  
    

    %Find number of columns in JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate. Will use this to fill in the
    %appropriate columns when calculating between-limb ratios
    NumColumn = size( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate, 2 );
    

%Begin M For Loop - Loop Through Groups    
for m = 1:numel(GroupList)

    %Use get field to create a new data structure containing the list of participants. List of participants is
    %stored under the second field of the structure (the list of groups)


    %Need to know which rows in the 1st column of JointReactionForceAndLinearVel correspond to the Mth
    %group
    JointReactionForceAndLinearVel_IndicesForOneGroup = find( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate(:, 1) == m );

    %Create a new joint power matrix containing only Group M
    JointReactionForceAndLinearVel_OneGroup = JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate( JointReactionForceAndLinearVel_IndicesForOneGroup, :);






    %If Group being processed is ATx, set Participant List to contain list of ATx participants.
    %If Group being processed is Controls, set Participant List to contain list of Control
    %participants.
    if strcmp( GroupList{m}, 'ATx' )

        ParticipantList = ATxParticipantList;

        ParticipantMass = ATxParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    else

        ParticipantList = ControlParticipantList;

        ParticipantMass = ControlParticipantMass;

        HoppingRate_ID = {'PreferredHz', 'TwoHz', 'TwoPoint3Hz'};

        HoppingRate_ID_forTable = [0, 2, 2.3];
        
        LimbID = [1, 2];

    end





%% Begin B For Loop - Loop Through Hopping Rates      

            for b = 1 : numel( HoppingRate_ID)



                %Need to know which rows in the 8th column of Power_OneLimb correspond
                %to Hopping Rate B
                JointReactionForceAndLinearVel_IndicesforOneRate = find( JointReactionForceAndLinearVel_OneGroup( :, 8) == round(HoppingRate_ID_forTable( b ), 1 ) );

                %Create a new joint power matrix containing only Hopping Rate B
                JointReactionForceAndLinearVel_OneRate = JointReactionForceAndLinearVel_OneGroup( JointReactionForceAndLinearVel_IndicesforOneRate, : );



                %Need to create a vector containing the values  for  each joint (1 for ankle, 2 for knee, 3
                %for hip ). These are stored in column 7
                VectorofUniqueJoints = unique( JointReactionForceAndLinearVel_OneRate( :, 7 ) );




%% Begin C For Loop - Loop Through Each Joint

                for c = 1 : length( VectorofUniqueJoints ) 

                    

                    %Need to know which rows in the 7th column of Power_OneRate
                    %correspond to Joint C
                    JointReactionForceAndLinearVel_IndicesforOneJoint = find( JointReactionForceAndLinearVel_OneRate( :, 7 ) == VectorofUniqueJoints( c ) );

                    %Create a new joint power matrix containing only Joint C
                    JointReactionForceAndLinearVel_OneJoint = JointReactionForceAndLinearVel_OneRate( JointReactionForceAndLinearVel_IndicesforOneJoint, : );


                    %Create vector containing the X, Y, and Z axes for Joint C
                    VectorofUniqueAxes = unique( JointReactionForceAndLinearVel_OneJoint( :, 9 ) );



                    for g = 1 : length( VectorofUniqueAxes )

                        %Need to know which rows in the 9th column of
                        %JointReactionForceAndLinearVel_OneJoint
                        %correspond to Axis G
                        JointReactionForceAndLinearVel_IndicesforOneAxis= find( JointReactionForceAndLinearVel_OneJoint( :, 9 ) == VectorofUniqueAxes( g ) );
    
                        %Create a new energy flow matrix containing only Axis G
                        JointReactionForceAndLinearVel_OneAxis = JointReactionForceAndLinearVel_OneJoint( JointReactionForceAndLinearVel_IndicesforOneAxis, : );

                        %We want to take average of participant data, so fist create a vector containing
                        %Participant IDs. Use unique() to get rid of repeating IDs.
                        VectorofUniqueParticipants = unique( JointReactionForceAndLinearVel_OneAxis( :, 2 ) );



                
%% Begin E For Loop - Loop Through Participants
                        for e = 1 : numel( VectorofUniqueParticipants )
                
                
%% Joint Power Calculations

                            %Need to know which rows in the 2nd column of
                            %JointReactionForceAndLinearVel_OneAxis
                            JointReactionForceAndLinearVel_IndicesforOneParticipant = find( JointReactionForceAndLinearVel_OneAxis( :, 2 ) == VectorofUniqueParticipants( e ) );
                        
                            %Create a new joint power matrix containing only Participant E
                            JointReactionForceAndLinearVel_OneParticipant = JointReactionForceAndLinearVel_OneAxis( JointReactionForceAndLinearVel_IndicesforOneParticipant, : );
    
                            %Store Group_ID, Participant_ID, Joint_ID, HoppingRate_ID, Axis ID  in the first 5 columns
                            %of JointPower_ParticipantMeansLimbDiff
                            JointReactionForceAndLinearVel_ParticipantMeansLimbDiff( RowtoFill_JointReactionForceAndLinearVel_LimbDiff, 1 : 5 ) = JointReactionForceAndLinearVel_OneParticipant( 1, [ 1, 2, 7, 8, 9 ] );
                    


                            %Use this for loop to calculate the between-limb diff in the numerical variables
                            %of Power_OneParticipant, which is from column 11 onward.
                            for z = 10 : size( JointReactionForceAndLinearVel_OneParticipant, 2 )
        
        
                                %Calculate between-limb diff as either Non-Involved Minus Involved or
                                %Contralateral Minus Matched Dominance. Use z - 4 to find the correct column
                                %because we're only using 6 categorical variables instead of 11
                                JointReactionForceAndLinearVel_ParticipantMeansLimbDiff( RowtoFill_JointReactionForceAndLinearVel_LimbDiff, z - 4 ) = JointReactionForceAndLinearVel_OneParticipant( 2, z ) - JointReactionForceAndLinearVel_OneParticipant( 1, z );
        
        
                                %Calculate between-limb ratio as Involved divided by Non-Involved  or
                                %Matched Dominance divided by Contralateral. Find the column to fill by using
                                %NumColumn + z - 10. NumColumn is the number of columns in
                                %JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate. Add z then subtract 10 to fill
                                %in the right column. Example: If calculating ratio for column 11 of
                                %JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate, z = 11; minus 10 = 1 --> fill in
                                %the column right after the end of JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate.
                                JointReactionForceAndLinearVel_ParticipantMeansLimbDiff( RowtoFill_JointReactionForceAndLinearVel_LimbDiff, NumColumn + z - 13  ) = JointReactionForceAndLinearVel_OneParticipant( 1, z ) ./ JointReactionForceAndLinearVel_OneParticipant( 2, z );
        
                            
                            end
                   
                        RowtoFill_JointReactionForceAndLinearVel_LimbDiff = RowtoFill_JointReactionForceAndLinearVel_LimbDiff + 1;
                            

                        end%End E Loop - Each Participant

                    end%End G Loop - Each Segment
                    
                    
                end%End C Loop - Each Joint
                
                
            end%End B Loop - Hopping Rate
    
end%End M Loop - Group ID
    
    

if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 7',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end







%% SECTION 8 - Create and Export Tables - ENERGY FLOW
    


%Set variable names for creaitng tables from the EnergyFlow
VariableNames_EnergyFlow =  {'Group_ID','Participant_ID','Limb_ID','MTU_ID','Trial_ID','Hop_ID','Joint_ID', 'HoppingRate_ID',...
'Segment_ID_Name', 'Segment_ID_ProxvsDist',...
'SegmentAverageEnergy_Braking',  'SegmentAverageEnergy_Propulsion',  'SegmentWork_Braking',  'SegmentWork_Propulsion',... 
'JointActiveWork_forSegment_Braking', 'JointPassiveWork_forSegment_Braking', 'JointActiveWorkTransfer_Braking',...
    'JointTotalWorkTransfer_Braking',  'JointWorkScalar_Braking',...
'JointActiveWork_forSegment_Propulsion', 'JointPassiveWork_forSegment_Propulsion', 'JointActiveWorkTransfer_Propulsion',...
    'JointTotalWorkTransfer_Propulsion',  'JointWorkScalar_Propulsion',...
'JointAverageActivePower_forSegment_Braking', 'JointAveragePassivePower_forSegment_Braking', 'JointAverageActivePowerTransfer_Braking',...
    'JointAverageTotalPowerTransfer_Braking',  'JointAveragePowerScalar_Braking',...
'JointAverageActivePower_forSegment_Propulsion', 'JointAveragePassivePower_forSegment_Propulsion', 'JointAverageActivePowerTransfer_Propulsion',...
    'JointAverageTotalPowerTransfer_Propulsion',  'JointAveragePowerScalar_Propulsion',...
'PeakLimbStiffness_ContactPhase', 'PeakLimbStiffness_BrakingPhase', 'PeakLimbStiffness_PropulsionPhase',...
'AverageLimbStiffness_ContactPhase', 'AverageLimbStiffness_BrakingPhase', 'AverageLimbStiffness_PropulsionPhase',...
'InitialSegmentEnergy_BrakingPhase',  'InitialSegmentEnergy_PropulsionPhase',... 
'BetweenLimbTendonThickness_mm','VAS_Rating' };

%Create a table from the EnergyFlow dat
EnergyFlow_Table = array2table(EnergyFlow, 'VariableNames', VariableNames_EnergyFlow);

%Save the EnergyFlow table as an Excel file
writetable(EnergyFlow_Table, 'PostQuals_EnergyFlow_Table.xlsx');

%Save the EnergyFlow matrix (NOT table) in the data structure
David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals','AllGroups','EnergyFlow_Matrix', EnergyFlow);

%Save the EnergyFlow table in the data structure
David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals','AllGroups','EnergyFlow_Table', EnergyFlow_Table);








%Set variable names for creaitng tables from the JointPower_GroupMeansPerHoppingRate and
%JointPower_ParticipantMeansPerHoppingRate data
VariableNames_EnergyFlow = {'Group_ID','Participant_ID','Limb_ID','MTU_ID','Trial_ID','Hop_ID','Joint_ID','HoppingRate_ID',...
'Segment_ID_Name', 'Segment_ID_ProxvsDist',...
'Mean_SegmentAverageEnergy_Braking',  'Mean_SegmentAverageEnergy_Propulsion',  'Mean_SegmentWork_Braking',  'Mean_SegmentWork_Propulsion',... 
'Mean_JointActiveWork_forSegment_Braking', 'Mean_JointPassiveWork_forSegment_Braking', 'Mean_JointActiveWorkTransfer_Braking',...
    'Mean_JointTotalWorkTransfer_Braking',  'Mean_JointWorkScalar_Braking',...
'Mean_JointActiveWork_forSegment_Propulsion', 'Mean_JointPassiveWork_forSegment_Propulsion', 'Mean_JointActiveWorkTransfer_Propulsion',...
    'Mean_JointTotalWorkTransfer_Propulsion',  'Mean_JointWorkScalar_Propulsion',...
'Mean_JointAverageActivePower_forSegment_Braking', 'Mean_JointAveragePassivePower_forSegment_Braking', 'Mean_JointAverageActivePowerTransfer_Braking',...
    'Mean_JointAverageTotalPowerTransfer_Braking',  'Mean_JointAveragePowerScalar_Braking',...
'Mean_JointAverageActivePower_forSegment_Propulsion', 'Mean_JointAveragePassivePower_forSegment_Propulsion', 'Mean_JointAverageActivePowerTransfer_Propulsion',...
    'Mean_JointAverageTotalPowerTransfer_Propulsion',  'Mean_JointAveragePowerScalar_Propulsion',...
'Mean_PeakLimbStiffness_ContactPhase', 'Mean_PeakLimbStiffness_BrakingPhase', 'Mean_PeakLimbStiffness_PropulsionPhase',...
'Mean_AverageLimbStiffness_ContactPhase', 'Mean_AverageLimbStiffness_BrakingPhase', 'Mean_AverageLimbStiffness_PropulsionPhase',...
'Mean_InitialSegmentEnergy_BrakingPhase',  'Mean_InitialSegmentEnergy_PropulsionPhase',... 
'Mean_BetweenLimbTendonThickness_mm', 'Mean_VAS_Rating',...
'SD_SegmentAverageEnergy_Braking',  'SD_SegmentAverageEnergy_Propulsion',  'SD_SegmentWork_Braking',  'SD_SegmentWork_Propulsion',... 
'SD_JointActiveWork_forSegment_Braking', 'SD_JointPassiveWork_forSegment_Braking', 'SD_JointActiveWorkTransfer_Braking',...
    'SD_JointTotalWorkTransfer_Braking',  'SD_JointWorkScalar_Braking',...
'SD_JointActiveWork_forSegment_Propulsion', 'SD_JointPassiveWork_forSegment_Propulsion', 'SD_JointActiveWorkTransfer_Propulsion',...
    'SD_JointTotalWorkTransfer_Propulsion',  'SD_JointWorkScalar_Propulsion',...
'SD_JointAverageActivePower_forSegment_Braking', 'SD_JointAveragePassivePower_forSegment_Braking', 'SD_JointAverageActivePowerTransfer_Braking',...
    'SD_JointAverageTotalPowerTransfer_Braking',  'SD_JointAveragePowerScalar_Braking',...
'SD_JointAverageActivePower_forSegment_Propulsion', 'SD_JointAveragePassivePower_forSegment_Propulsion', 'SD_JointAverageActivePowerTransfer_Propulsion',...
    'SD_JointAverageTotalPowerTransfer_Propulsion',  'SD_JointAveragePowerScalar_Propulsion',...
'SD_PeakLimbStiffness_ContactPhase', 'SD_PeakLimbStiffness_BrakingPhase', 'SD_PeakLimbStiffness_PropulsionPhase',...
'SD_AverageLimbStiffness_ContactPhase', 'SD_AverageLimbStiffness_BrakingPhase', 'SD_AverageLimbStiffness_PropulsionPhase',...
'SD_InitialSegmentEnergy_BrakingPhase',  'SD_InitialSegmentEnergy_PropulsionPhase',... 
'SD_BetweenLimbTendonThickness_mm', 'SD_VAS_Rating' };

%Create a table from the JointPower_GroupMeansPerHoppingRate data and save it as an Excel file
writetable( array2table( EnergyFlow_GroupMeansPerHoppingRate, 'VariableNames', VariableNames_EnergyFlow ), 'PostQuals_EnergyFlow_GroupMeansPerHoppingRate.xlsx' );

%Create a table from the JointPower_ParticipantMeansPerHoppingRate data and save it as an Excel file
writetable( array2table( EnergyFlow_ParticipantMeansPerHoppingRate, 'VariableNames', VariableNames_EnergyFlow ), 'PostQuals_EnergyFlow_ParticipantMeansPerHoppingRate.xlsx' );

    






                                    
VariableNames_EnergyFlow_LimbDiff = { 'Group_ID', 'Participant_ID', 'Joint_ID', 'HoppingRate_ID',...
'Segment_ID_Name', 'Segment_ID_ProxvsDist',...
'Mean_SegmentAverageEnergy_Braking',  'Mean_SegmentAverageEnergy_Propulsion',  'Mean_SegmentWork_Braking',  'Mean_SegmentWork_Propulsion',... 
'Mean_JointActiveWork_forSegment_Braking', 'Mean_JointPassiveWork_forSegment_Braking', 'Mean_JointActiveWorkTransfer_Braking',...
    'Mean_JointTotalWorkTransfer_Braking',  'Mean_JointWorkScalar_Braking',...
'Mean_JointActiveWork_forSegment_Propulsion', 'Mean_JointPassiveWork_forSegment_Propulsion', 'Mean_JointActiveWorkTransfer_Propulsion',...
    'Mean_JointTotalWorkTransfer_Propulsion',  'Mean_JointWorkScalar_Propulsion',...
'Mean_JointAverageActivePower_forSegment_Braking', 'Mean_JointAveragePassivePower_forSegment_Braking', 'Mean_JointAverageActivePowerTransfer_Braking',...
    'Mean_JointAverageTotalPowerTransfer_Braking',  'Mean_JointAveragePowerScalar_Braking',...
'Mean_JointAverageActivePower_forSegment_Propulsion', 'Mean_JointAveragePassivePower_forSegment_Propulsion', 'Mean_JointAverageActivePowerTransfer_Propulsion',...
    'Mean_JointAverageTotalPowerTransfer_Propulsion',  'Mean_JointAveragePowerScalar_Propulsion',...
'Mean_PeakLimbStiffness_ContactPhase', 'Mean_PeakLimbStiffness_BrakingPhase', 'Mean_PeakLimbStiffness_PropulsionPhase',...
'Mean_AverageLimbStiffness_ContactPhase', 'Mean_AverageLimbStiffness_BrakingPhase', 'Mean_AverageLimbStiffness_PropulsionPhase',...
'Mean_InitialSegmentEnergy_BrakingPhase',  'Mean_InitialSegmentEnergy_PropulsionPhase',...
'Mean_BetweenLimbTendonThickness_mm', 'Mean_VAS_Rating',...
'SD_SegmentAverageEnergy_Braking',  'SD_SegmentAverageEnergy_Propulsion',  'SD_SegmentWork_Braking',  'SD_SegmentWork_Propulsion',... 
'SD_JointActiveWork_forSegment_Braking', 'SD_JointPassiveWork_forSegment_Braking', 'SD_JointActiveWorkTransfer_Braking',...
    'SD_JointTotalWorkTransfer_Braking',  'SD_JointWorkScalar_Braking',...
'SD_JointActiveWork_forSegment_Propulsion', 'SD_JointPassiveWork_forSegment_Propulsion', 'SD_JointActiveWorkTransfer_Propulsion',...
    'SD_JointTotalWorkTransfer_Propulsion',  'SD_JointWorkScalar_Propulsion',...
'SD_JointAverageActivePower_forSegment_Braking', 'SD_JointAveragePassivePower_forSegment_Braking', 'SD_JointAverageActivePowerTransfer_Braking',...
    'SD_JointAverageTotalPowerTransfer_Braking',  'SD_JointAveragePowerScalar_Braking',...
'SD_JointAverageActivePower_forSegment_Propulsion', 'SD_JointAveragePassivePower_forSegment_Propulsion', 'SD_JointAverageActivePowerTransfer_Propulsion',...
    'SD_JointAverageTotalPowerTransfer_Propulsion',  'SD_JointAveragePowerScalar_Propulsion',...
'SD_PeakLimbStiffness_ContactPhase', 'SD_PeakLimbStiffness_BrakingPhase', 'SD_PeakLimbStiffness_PropulsionPhase',...
'SD_AverageLimbStiffness_ContactPhase', 'SD_AverageLimbStiffness_BrakingPhase', 'SD_AverageLimbStiffness_PropulsionPhase',...
'SD_InitialSegmentEnergy_BrakingPhase',  'SD_InitialSegmentEnergy_PropulsionPhase',... 
'SD_BetweenLimbTendonThickness_mm', 'SD_VAS_Rating'...
'Mean_Ratio_SegmentAverageEnergy_Braking',  'Mean_Ratio_SegmentAverageEnergy_Propulsion',  'Mean_Ratio_SegmentWork_Braking',  'Mean_Ratio_SegmentWork_Propulsion',... 
'Mean_Ratio_JointActiveWork_forSegment_Braking', 'Mean_Ratio_JointPassiveWork_forSegment_Braking', 'Mean_Ratio_JointActiveWorkTransfer_Braking',...
    'Mean_Ratio_JointTotalWorkTransfer_Braking',  'Mean_Ratio_JointWorkScalar_Braking',...
'Mean_Ratio_JointActiveWork_forSegment_Propulsion', 'Mean_Ratio_JointPassiveWork_forSegment_Propulsion', 'Mean_Ratio_JointActiveWorkTransfer_Propulsion',...
    'Mean_Ratio_JointTotalWorkTransfer_Propulsion',  'Mean_Ratio_JointWorkScalar_Propulsion',...
'Mean_Ratio_JointAverageActivePower_forSegment_Braking', 'Mean_Ratio_JointAveragePassivePower_forSegment_Braking', 'Mean_Ratio_JointAverageActivePowerTransfer_Braking',...
    'Mean_Ratio_JointAverageTotalPowerTransfer_Braking',  'Mean_Ratio_JointAveragePowerScalar_Braking',...
'Mean_Ratio_JointAverageActivePower_forSegment_Propulsion', 'Mean_Ratio_JointAveragePassivePower_forSegment_Propulsion', 'Mean_Ratio_JointAverageActivePowerTransfer_Propulsion',...
    'Mean_Ratio_JointAverageTotalPowerTransfer_Propulsion',  'Mean_Ratio_JointAveragePowerScalar_Propulsion',...
'Mean_Ratio_PeakLimbStiffness_ContactPhase', 'Mean_Ratio_PeakLimbStiffness_BrakingPhase', 'Mean_Ratio_PeakLimbStiffness_PropulsionPhase',...
'Mean_Ratio_AverageLimbStiffness_ContactPhase', 'Mean_Ratio_AverageLimbStiffness_BrakingPhase', 'Mean_Ratio_AverageLimbStiffness_PropulsionPhase',...
'Mean_Ratio_InitialSegmentEnergy_BrakingPhase',  'Mean_Ratio_InitialSegmentEnergy_PropulsionPhase',... 
'Mean_Ratio_BetweenLimbTendonThickness_mm', 'Mean_Ratio_VAS_Rating',...
'SD_Ratio_SegmentAverageEnergy_Braking',  'SD_Ratio_SegmentAverageEnergy_Propulsion',  'SD_Ratio_SegmentWork_Braking',  'SD_Ratio_SegmentWork_Propulsion',... 
'SD_Ratio_JointActiveWork_forSegment_Braking', 'SD_Ratio_JointPassiveWork_forSegment_Braking', 'SD_Ratio_JointActiveWorkTransfer_Braking',...
    'SD_Ratio_JointTotalWorkTransfer_Braking',  'SD_Ratio_JointWorkScalar_Braking',...
'SD_Ratio_JointActiveWork_forSegment_Propulsion', 'SD_Ratio_JointPassiveWork_forSegment_Propulsion', 'SD_Ratio_JointActiveWorkTransfer_Propulsion',...
    'SD_Ratio_JointTotalWorkTransfer_Propulsion',  'SD_Ratio_JointWorkScalar_Propulsion',...
'SD_Ratio_JointAverageActivePower_forSegment_Braking', 'SD_Ratio_JointAveragePassivePower_forSegment_Braking', 'SD_Ratio_JointAverageActivePowerTransfer_Braking',...
    'SD_Ratio_JointAverageTotalPowerTransfer_Braking',  'SD_Ratio_JointAveragePowerScalar_Braking',...
'SD_Ratio_JointAverageActivePower_forSegment_Propulsion', 'SD_Ratio_JointAveragePassivePower_forSegment_Propulsion', 'SD_Ratio_JointAverageActivePowerTransfer_Propulsion',...
    'SD_Ratio_JointAverageTotalPowerTransfer_Propulsion',  'SD_Ratio_JointAveragePowerScalar_Propulsion',...
'SD_Ratio_PeakLimbStiffness_ContactPhase', 'SD_Ratio_PeakLimbStiffness_BrakingPhase', 'SD_Ratio_PeakLimbStiffness_PropulsionPhase',...
'SD_Ratio_AverageLimbStiffness_ContactPhase', 'SD_Ratio_AverageLimbStiffness_BrakingPhase', 'SD_Ratio_AverageLimbStiffness_PropulsionPhase',...
'SD_Ratio_InitialSegmentEnergy_BrakingPhase',  'SD_Ratio_InitialSegmentEnergy_PropulsionPhase',... 
'SD_Ratio_BetweenLimbTendonThickness_mm', 'SD_Ratio_VAS_Rating' };


    %Create a table from the JointBehaviorIndex_GroupMeansPerHoppingRate data and save it as an Excel file
    writetable( array2table( EnergyFlow_ParticipantMeansLimbDiff, 'VariableNames', VariableNames_EnergyFlow_LimbDiff ),...
        'PostQuals_EnergyFlow_BetweenLimbDiff_ParticipantMeans.xlsx' );





    



if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 8',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end





%% SECTION 9 - Create and Export Tables - JOINT REACTION FORCE/LINEAR VEL
    




%Set variable names for creaitng tables from the JointReactionForceAndLinearVel
VariableNames_JointReactionForceAndLinearVel =  {'Group_ID','Participant_ID','Limb_ID','MTU_ID','Trial_ID','Hop_ID','Joint_ID', 'HoppingRate_ID',...
'Axis_ID',...
'PeakJointReactionForce_BrakingPhase', 'PeakJointReactionForce_PropulsionPhase', 'AverageJointReactionForce_BrakingPhase', 'AverageJointReactionForce_PropulsionPhase',...
'PeakJointLinearVel_BrakingPhase', 'PeakJointLinearVel_PropulsionPhase', 'AverageJointLinearVel_BrakingPhase', 'AverageJointLinearVel_PropulsionPhase',...
'BetweenLimbTendonThickness_mm','VAS_Rating' };

%Create a table from the JointReactionForceAndLinearVel dat
JointReactionForceAndLinearVel_Table = array2table(JointReactionForceAndLinearVel, 'VariableNames', VariableNames_JointReactionForceAndLinearVel);

%Save the JointReactionForceAndLinearVel table as an Excel file
writetable(JointReactionForceAndLinearVel_Table, 'PostQuals_JointReactionForceAndLinearVel_Table.xlsx');

%Save the JointReactionForceAndLinearVel matrix (NOT table) in the data structure
David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals','AllGroups','JointReactionForceAndLinearVel_Matrix', JointReactionForceAndLinearVel);

%Save the JointReactionForceAndLinearVel table in the data structure
David_DissertationDataStructure = setfield(David_DissertationDataStructure,'Post_Quals','AllGroups','JointReactionForceAndLinearVel_Table', JointReactionForceAndLinearVel_Table);








%Set variable names for creaitng tables from the JointPower_GroupMeansPerHoppingRate and
%JointPower_ParticipantMeansPerHoppingRate data
VariableNames_JointReactionForceAndLinearVel = {'Group_ID','Participant_ID','Limb_ID','MTU_ID','Trial_ID','Hop_ID','Joint_ID','HoppingRate_ID',...
'Axis_ID',...
'Mean_PeakJointReactionForce_BrakingPhase', 'Mean_PeakJointReactionForce_PropulsionPhase', 'Mean_AverageJointReactionForce_BrakingPhase',...
    'Mean_AverageJointReactionForce_PropulsionPhase',...
'Mean_PeakJointLinearVel_BrakingPhase', 'Mean_PeakJointLinearVel_PropulsionPhase', 'Mean_AverageJointLinearVel_BrakingPhase', 'Mean_AverageJointLinearVel_PropulsionPhase',...
'Mean_BetweenLimbTendonThickness_mm', 'Mean_VAS_Rating',...
'SD_PeakJointReactionForce_BrakingPhase', 'SD_PeakJointReactionForce_PropulsionPhase', 'SD_AverageJointReactionForce_BrakingPhase',...
    'SD_AverageJointReactionForce_PropulsionPhase',...
'SD_PeakJointLinearVel_BrakingPhase', 'SD_PeakJointLinearVel_PropulsionPhase', 'SD_AverageJointLinearVel_BrakingPhase', 'SD_AverageJointLinearVel_PropulsionPhase',...
'SD_BetweenLimbTendonThickness_mm', 'SD_VAS_Rating' };

%Create a table from the JointPower_GroupMeansPerHoppingRate data and save it as an Excel file
writetable( array2table( JointReactionForceAndLinearVel_GroupMeansPerHoppingRate, 'VariableNames', VariableNames_JointReactionForceAndLinearVel ), 'PostQuals_JointReactionForceAndLinearVel_GroupMeansPerHoppingRate.xlsx' );

%Create a table from the JointPower_ParticipantMeansPerHoppingRate data and save it as an Excel file
writetable( array2table( JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate, 'VariableNames', VariableNames_JointReactionForceAndLinearVel ), 'PostQuals_JointReactionForceAndLinearVel_ParticipantMeansPerHoppingRate.xlsx' );

    






                                    
VariableNames_JointReactionForceAndLinearVel_LimbDiff = { 'Group_ID', 'Participant_ID', 'Joint_ID', 'HoppingRate_ID',...
'Axis_ID',...
'Mean_PeakJointReactionForce_BrakingPhase', 'Mean_PeakJointReactionForce_PropulsionPhase', 'Mean_AverageJointReactionForce_BrakingPhase',...
    'Mean_AverageJointReactionForce_PropulsionPhase',...
'Mean_PeakJointLinearVel_BrakingPhase', 'Mean_PeakJointLinearVel_PropulsionPhase', 'Mean_AverageJointLinearVel_BrakingPhase', 'Mean_AverageJointLinearVel_PropulsionPhase',...
'Mean_BetweenLimbTendonThickness_mm', 'Mean_VAS_Rating',...
'SD_PeakJointReactionForce_BrakingPhase', 'SD_PeakJointReactionForce_PropulsionPhase', 'SD_AverageJointReactionForce_BrakingPhase',...
    'SD_AverageJointReactionForce_PropulsionPhase',...
'SD_PeakJointLinearVel_BrakingPhase', 'SD_PeakJointLinearVel_PropulsionPhase', 'SD_AverageJointLinearVel_BrakingPhase', 'SD_AverageJointLinearVel_PropulsionPhase',...
'SD_BetweenLimbTendonThickness_mm', 'SD_VAS_Rating'...
'Mean_Ratio_PeakJointReactionForce_BrakingPhase', 'Mean_Ratio_PeakJointReactionForce_PropulsionPhase', 'Mean_Ratio_AverageJointReactionForce_BrakingPhase',...
    'Mean_Ratio_AverageJointReactionForce_PropulsionPhase',...
'Mean_Ratio_PeakJointLinearVel_BrakingPhase', 'Mean_Ratio_PeakJointLinearVel_PropulsionPhase', 'Mean_Ratio_AverageJointLinearVel_BrakingPhase',...
    'Mean_Ratio_AverageJointLinearVel_PropulsionPhase',...
'Mean_Ratio_BetweenLimbTendonThickness_mm', 'Mean_Ratio_VAS_Rating',...
'SD_Ratio_PeakJointReactionForce_BrakingPhase', 'SD_Ratio_PeakJointReactionForce_PropulsionPhase', 'SD_Ratio_AverageJointReactionForce_BrakingPhase',...
    'SD_Ratio_AverageJointReactionForce_PropulsionPhase',...
'SD_Ratio_PeakJointLinearVel_BrakingPhase', 'SD_Ratio_PeakJointLinearVel_PropulsionPhase', 'SD_Ratio_AverageJointLinearVel_BrakingPhase',...
    'SD_Ratio_AverageJointLinearVel_PropulsionPhase',...
'SD_Ratio_BetweenLimbTendonThickness_mm', 'SD_Ratio_VAS_Rating' };


    %Create a table from the JointBehaviorIndex_GroupMeansPerHoppingRate data and save it as an Excel file
    writetable( array2table( JointReactionForceAndLinearVel_ParticipantMeansLimbDiff, 'VariableNames', VariableNames_JointReactionForceAndLinearVel_LimbDiff ),...
        'PostQuals_JointReactionForceAndLinearVel_BetweenLimbDiff_ParticipantMeans.xlsx' );





    



if isempty( lasterror )
    
    msgbox('\fontsize{15} NO ERRORS IN SECTION 9',CreateStruct);
    
else
    
    error = lasterror;
    msgbox(['\fontsize{15}' error.message 'Line ' num2str(error.stack.line) ]',CreateStruct);
    
end